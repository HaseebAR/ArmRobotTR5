
TR5_PROCESSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f5c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08008018  08008018  00018018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081e0  080081e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080081e0  080081e0  000181e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081e8  080081e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081e8  080081e8  000181e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081ec  080081ec  000181ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080081f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000010  08008200  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08008200  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e86a  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f89  00000000  00000000  0002e8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00030830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  00031408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c781  00000000  00000000  00031f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ece1  00000000  00000000  0004e699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba1e3  00000000  00000000  0005d37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011755d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d88  00000000  00000000  001175b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008000 	.word	0x08008000

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08008000 	.word	0x08008000

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f001 fbab 	bl	8001b5c <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f001 fafb 	bl	8001a0c <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f001 fb9d 	bl	8001b5c <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fb93 	bl	8001b5c <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fb23 	bl	8001a90 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb19 	bl	8001a90 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_cfrcmple>:
 800046c:	4684      	mov	ip, r0
 800046e:	0008      	movs	r0, r1
 8000470:	4661      	mov	r1, ip
 8000472:	e7ff      	b.n	8000474 <__aeabi_cfcmpeq>

08000474 <__aeabi_cfcmpeq>:
 8000474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000476:	f000 fc59 	bl	8000d2c <__lesf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	d401      	bmi.n	8000482 <__aeabi_cfcmpeq+0xe>
 800047e:	2100      	movs	r1, #0
 8000480:	42c8      	cmn	r0, r1
 8000482:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000484 <__aeabi_fcmpeq>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f000 fbe5 	bl	8000c54 <__eqsf2>
 800048a:	4240      	negs	r0, r0
 800048c:	3001      	adds	r0, #1
 800048e:	bd10      	pop	{r4, pc}

08000490 <__aeabi_fcmplt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fc4b 	bl	8000d2c <__lesf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	db01      	blt.n	800049e <__aeabi_fcmplt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_fcmple>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 fc41 	bl	8000d2c <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	dd01      	ble.n	80004b2 <__aeabi_fcmple+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_fcmpgt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fbf1 	bl	8000ca0 <__gesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dc01      	bgt.n	80004c6 <__aeabi_fcmpgt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmpge>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fbe7 	bl	8000ca0 <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	da01      	bge.n	80004da <__aeabi_fcmpge+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_uldivmod>:
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d111      	bne.n	8000508 <__aeabi_uldivmod+0x28>
 80004e4:	2a00      	cmp	r2, #0
 80004e6:	d10f      	bne.n	8000508 <__aeabi_uldivmod+0x28>
 80004e8:	2900      	cmp	r1, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_uldivmod+0xe>
 80004ec:	2800      	cmp	r0, #0
 80004ee:	d002      	beq.n	80004f6 <__aeabi_uldivmod+0x16>
 80004f0:	2100      	movs	r1, #0
 80004f2:	43c9      	mvns	r1, r1
 80004f4:	0008      	movs	r0, r1
 80004f6:	b407      	push	{r0, r1, r2}
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <__aeabi_uldivmod+0x24>)
 80004fa:	a102      	add	r1, pc, #8	; (adr r1, 8000504 <__aeabi_uldivmod+0x24>)
 80004fc:	1840      	adds	r0, r0, r1
 80004fe:	9002      	str	r0, [sp, #8]
 8000500:	bd03      	pop	{r0, r1, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	fffffee9 	.word	0xfffffee9
 8000508:	b403      	push	{r0, r1}
 800050a:	4668      	mov	r0, sp
 800050c:	b501      	push	{r0, lr}
 800050e:	9802      	ldr	r0, [sp, #8]
 8000510:	f000 f81e 	bl	8000550 <__udivmoddi4>
 8000514:	9b01      	ldr	r3, [sp, #4]
 8000516:	469e      	mov	lr, r3
 8000518:	b002      	add	sp, #8
 800051a:	bc0c      	pop	{r2, r3}
 800051c:	4770      	bx	lr
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__aeabi_f2uiz>:
 8000520:	219e      	movs	r1, #158	; 0x9e
 8000522:	b510      	push	{r4, lr}
 8000524:	05c9      	lsls	r1, r1, #23
 8000526:	1c04      	adds	r4, r0, #0
 8000528:	f7ff ffd0 	bl	80004cc <__aeabi_fcmpge>
 800052c:	2800      	cmp	r0, #0
 800052e:	d103      	bne.n	8000538 <__aeabi_f2uiz+0x18>
 8000530:	1c20      	adds	r0, r4, #0
 8000532:	f000 ff13 	bl	800135c <__aeabi_f2iz>
 8000536:	bd10      	pop	{r4, pc}
 8000538:	219e      	movs	r1, #158	; 0x9e
 800053a:	1c20      	adds	r0, r4, #0
 800053c:	05c9      	lsls	r1, r1, #23
 800053e:	f000 fd5f 	bl	8001000 <__aeabi_fsub>
 8000542:	f000 ff0b 	bl	800135c <__aeabi_f2iz>
 8000546:	2380      	movs	r3, #128	; 0x80
 8000548:	061b      	lsls	r3, r3, #24
 800054a:	469c      	mov	ip, r3
 800054c:	4460      	add	r0, ip
 800054e:	e7f2      	b.n	8000536 <__aeabi_f2uiz+0x16>

08000550 <__udivmoddi4>:
 8000550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000552:	4657      	mov	r7, sl
 8000554:	464e      	mov	r6, r9
 8000556:	4645      	mov	r5, r8
 8000558:	46de      	mov	lr, fp
 800055a:	b5e0      	push	{r5, r6, r7, lr}
 800055c:	0004      	movs	r4, r0
 800055e:	000d      	movs	r5, r1
 8000560:	4692      	mov	sl, r2
 8000562:	4699      	mov	r9, r3
 8000564:	b083      	sub	sp, #12
 8000566:	428b      	cmp	r3, r1
 8000568:	d830      	bhi.n	80005cc <__udivmoddi4+0x7c>
 800056a:	d02d      	beq.n	80005c8 <__udivmoddi4+0x78>
 800056c:	4649      	mov	r1, r9
 800056e:	4650      	mov	r0, sl
 8000570:	f002 fa6a 	bl	8002a48 <__clzdi2>
 8000574:	0029      	movs	r1, r5
 8000576:	0006      	movs	r6, r0
 8000578:	0020      	movs	r0, r4
 800057a:	f002 fa65 	bl	8002a48 <__clzdi2>
 800057e:	1a33      	subs	r3, r6, r0
 8000580:	4698      	mov	r8, r3
 8000582:	3b20      	subs	r3, #32
 8000584:	469b      	mov	fp, r3
 8000586:	d433      	bmi.n	80005f0 <__udivmoddi4+0xa0>
 8000588:	465a      	mov	r2, fp
 800058a:	4653      	mov	r3, sl
 800058c:	4093      	lsls	r3, r2
 800058e:	4642      	mov	r2, r8
 8000590:	001f      	movs	r7, r3
 8000592:	4653      	mov	r3, sl
 8000594:	4093      	lsls	r3, r2
 8000596:	001e      	movs	r6, r3
 8000598:	42af      	cmp	r7, r5
 800059a:	d83a      	bhi.n	8000612 <__udivmoddi4+0xc2>
 800059c:	42af      	cmp	r7, r5
 800059e:	d100      	bne.n	80005a2 <__udivmoddi4+0x52>
 80005a0:	e078      	b.n	8000694 <__udivmoddi4+0x144>
 80005a2:	465b      	mov	r3, fp
 80005a4:	1ba4      	subs	r4, r4, r6
 80005a6:	41bd      	sbcs	r5, r7
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	da00      	bge.n	80005ae <__udivmoddi4+0x5e>
 80005ac:	e075      	b.n	800069a <__udivmoddi4+0x14a>
 80005ae:	2200      	movs	r2, #0
 80005b0:	2300      	movs	r3, #0
 80005b2:	9200      	str	r2, [sp, #0]
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	465a      	mov	r2, fp
 80005ba:	4093      	lsls	r3, r2
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	4642      	mov	r2, r8
 80005c2:	4093      	lsls	r3, r2
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	e028      	b.n	800061a <__udivmoddi4+0xca>
 80005c8:	4282      	cmp	r2, r0
 80005ca:	d9cf      	bls.n	800056c <__udivmoddi4+0x1c>
 80005cc:	2200      	movs	r2, #0
 80005ce:	2300      	movs	r3, #0
 80005d0:	9200      	str	r2, [sp, #0]
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <__udivmoddi4+0x8e>
 80005da:	601c      	str	r4, [r3, #0]
 80005dc:	605d      	str	r5, [r3, #4]
 80005de:	9800      	ldr	r0, [sp, #0]
 80005e0:	9901      	ldr	r1, [sp, #4]
 80005e2:	b003      	add	sp, #12
 80005e4:	bcf0      	pop	{r4, r5, r6, r7}
 80005e6:	46bb      	mov	fp, r7
 80005e8:	46b2      	mov	sl, r6
 80005ea:	46a9      	mov	r9, r5
 80005ec:	46a0      	mov	r8, r4
 80005ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	4652      	mov	r2, sl
 80005f8:	40da      	lsrs	r2, r3
 80005fa:	4641      	mov	r1, r8
 80005fc:	0013      	movs	r3, r2
 80005fe:	464a      	mov	r2, r9
 8000600:	408a      	lsls	r2, r1
 8000602:	0017      	movs	r7, r2
 8000604:	4642      	mov	r2, r8
 8000606:	431f      	orrs	r7, r3
 8000608:	4653      	mov	r3, sl
 800060a:	4093      	lsls	r3, r2
 800060c:	001e      	movs	r6, r3
 800060e:	42af      	cmp	r7, r5
 8000610:	d9c4      	bls.n	800059c <__udivmoddi4+0x4c>
 8000612:	2200      	movs	r2, #0
 8000614:	2300      	movs	r3, #0
 8000616:	9200      	str	r2, [sp, #0]
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	4643      	mov	r3, r8
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0d9      	beq.n	80005d4 <__udivmoddi4+0x84>
 8000620:	07fb      	lsls	r3, r7, #31
 8000622:	0872      	lsrs	r2, r6, #1
 8000624:	431a      	orrs	r2, r3
 8000626:	4646      	mov	r6, r8
 8000628:	087b      	lsrs	r3, r7, #1
 800062a:	e00e      	b.n	800064a <__udivmoddi4+0xfa>
 800062c:	42ab      	cmp	r3, r5
 800062e:	d101      	bne.n	8000634 <__udivmoddi4+0xe4>
 8000630:	42a2      	cmp	r2, r4
 8000632:	d80c      	bhi.n	800064e <__udivmoddi4+0xfe>
 8000634:	1aa4      	subs	r4, r4, r2
 8000636:	419d      	sbcs	r5, r3
 8000638:	2001      	movs	r0, #1
 800063a:	1924      	adds	r4, r4, r4
 800063c:	416d      	adcs	r5, r5
 800063e:	2100      	movs	r1, #0
 8000640:	3e01      	subs	r6, #1
 8000642:	1824      	adds	r4, r4, r0
 8000644:	414d      	adcs	r5, r1
 8000646:	2e00      	cmp	r6, #0
 8000648:	d006      	beq.n	8000658 <__udivmoddi4+0x108>
 800064a:	42ab      	cmp	r3, r5
 800064c:	d9ee      	bls.n	800062c <__udivmoddi4+0xdc>
 800064e:	3e01      	subs	r6, #1
 8000650:	1924      	adds	r4, r4, r4
 8000652:	416d      	adcs	r5, r5
 8000654:	2e00      	cmp	r6, #0
 8000656:	d1f8      	bne.n	800064a <__udivmoddi4+0xfa>
 8000658:	9800      	ldr	r0, [sp, #0]
 800065a:	9901      	ldr	r1, [sp, #4]
 800065c:	465b      	mov	r3, fp
 800065e:	1900      	adds	r0, r0, r4
 8000660:	4169      	adcs	r1, r5
 8000662:	2b00      	cmp	r3, #0
 8000664:	db24      	blt.n	80006b0 <__udivmoddi4+0x160>
 8000666:	002b      	movs	r3, r5
 8000668:	465a      	mov	r2, fp
 800066a:	4644      	mov	r4, r8
 800066c:	40d3      	lsrs	r3, r2
 800066e:	002a      	movs	r2, r5
 8000670:	40e2      	lsrs	r2, r4
 8000672:	001c      	movs	r4, r3
 8000674:	465b      	mov	r3, fp
 8000676:	0015      	movs	r5, r2
 8000678:	2b00      	cmp	r3, #0
 800067a:	db2a      	blt.n	80006d2 <__udivmoddi4+0x182>
 800067c:	0026      	movs	r6, r4
 800067e:	409e      	lsls	r6, r3
 8000680:	0033      	movs	r3, r6
 8000682:	0026      	movs	r6, r4
 8000684:	4647      	mov	r7, r8
 8000686:	40be      	lsls	r6, r7
 8000688:	0032      	movs	r2, r6
 800068a:	1a80      	subs	r0, r0, r2
 800068c:	4199      	sbcs	r1, r3
 800068e:	9000      	str	r0, [sp, #0]
 8000690:	9101      	str	r1, [sp, #4]
 8000692:	e79f      	b.n	80005d4 <__udivmoddi4+0x84>
 8000694:	42a3      	cmp	r3, r4
 8000696:	d8bc      	bhi.n	8000612 <__udivmoddi4+0xc2>
 8000698:	e783      	b.n	80005a2 <__udivmoddi4+0x52>
 800069a:	4642      	mov	r2, r8
 800069c:	2320      	movs	r3, #32
 800069e:	2100      	movs	r1, #0
 80006a0:	1a9b      	subs	r3, r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	9100      	str	r1, [sp, #0]
 80006a6:	9201      	str	r2, [sp, #4]
 80006a8:	2201      	movs	r2, #1
 80006aa:	40da      	lsrs	r2, r3
 80006ac:	9201      	str	r2, [sp, #4]
 80006ae:	e786      	b.n	80005be <__udivmoddi4+0x6e>
 80006b0:	4642      	mov	r2, r8
 80006b2:	2320      	movs	r3, #32
 80006b4:	1a9b      	subs	r3, r3, r2
 80006b6:	002a      	movs	r2, r5
 80006b8:	4646      	mov	r6, r8
 80006ba:	409a      	lsls	r2, r3
 80006bc:	0023      	movs	r3, r4
 80006be:	40f3      	lsrs	r3, r6
 80006c0:	4644      	mov	r4, r8
 80006c2:	4313      	orrs	r3, r2
 80006c4:	002a      	movs	r2, r5
 80006c6:	40e2      	lsrs	r2, r4
 80006c8:	001c      	movs	r4, r3
 80006ca:	465b      	mov	r3, fp
 80006cc:	0015      	movs	r5, r2
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	dad4      	bge.n	800067c <__udivmoddi4+0x12c>
 80006d2:	4642      	mov	r2, r8
 80006d4:	002f      	movs	r7, r5
 80006d6:	2320      	movs	r3, #32
 80006d8:	0026      	movs	r6, r4
 80006da:	4097      	lsls	r7, r2
 80006dc:	1a9b      	subs	r3, r3, r2
 80006de:	40de      	lsrs	r6, r3
 80006e0:	003b      	movs	r3, r7
 80006e2:	4333      	orrs	r3, r6
 80006e4:	e7cd      	b.n	8000682 <__udivmoddi4+0x132>
 80006e6:	46c0      	nop			; (mov r8, r8)

080006e8 <__aeabi_fadd>:
 80006e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ea:	46c6      	mov	lr, r8
 80006ec:	0243      	lsls	r3, r0, #9
 80006ee:	0a5b      	lsrs	r3, r3, #9
 80006f0:	024e      	lsls	r6, r1, #9
 80006f2:	0045      	lsls	r5, r0, #1
 80006f4:	004f      	lsls	r7, r1, #1
 80006f6:	00da      	lsls	r2, r3, #3
 80006f8:	0fc4      	lsrs	r4, r0, #31
 80006fa:	469c      	mov	ip, r3
 80006fc:	0a70      	lsrs	r0, r6, #9
 80006fe:	4690      	mov	r8, r2
 8000700:	b500      	push	{lr}
 8000702:	0e2d      	lsrs	r5, r5, #24
 8000704:	0e3f      	lsrs	r7, r7, #24
 8000706:	0fc9      	lsrs	r1, r1, #31
 8000708:	09b6      	lsrs	r6, r6, #6
 800070a:	428c      	cmp	r4, r1
 800070c:	d04b      	beq.n	80007a6 <__aeabi_fadd+0xbe>
 800070e:	1bea      	subs	r2, r5, r7
 8000710:	2a00      	cmp	r2, #0
 8000712:	dd36      	ble.n	8000782 <__aeabi_fadd+0x9a>
 8000714:	2f00      	cmp	r7, #0
 8000716:	d061      	beq.n	80007dc <__aeabi_fadd+0xf4>
 8000718:	2dff      	cmp	r5, #255	; 0xff
 800071a:	d100      	bne.n	800071e <__aeabi_fadd+0x36>
 800071c:	e0ad      	b.n	800087a <__aeabi_fadd+0x192>
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	04db      	lsls	r3, r3, #19
 8000722:	431e      	orrs	r6, r3
 8000724:	2a1b      	cmp	r2, #27
 8000726:	dc00      	bgt.n	800072a <__aeabi_fadd+0x42>
 8000728:	e0d3      	b.n	80008d2 <__aeabi_fadd+0x1ea>
 800072a:	2001      	movs	r0, #1
 800072c:	4643      	mov	r3, r8
 800072e:	1a18      	subs	r0, r3, r0
 8000730:	0143      	lsls	r3, r0, #5
 8000732:	d400      	bmi.n	8000736 <__aeabi_fadd+0x4e>
 8000734:	e08c      	b.n	8000850 <__aeabi_fadd+0x168>
 8000736:	0180      	lsls	r0, r0, #6
 8000738:	0987      	lsrs	r7, r0, #6
 800073a:	0038      	movs	r0, r7
 800073c:	f002 f966 	bl	8002a0c <__clzsi2>
 8000740:	3805      	subs	r0, #5
 8000742:	4087      	lsls	r7, r0
 8000744:	4285      	cmp	r5, r0
 8000746:	dc00      	bgt.n	800074a <__aeabi_fadd+0x62>
 8000748:	e0b6      	b.n	80008b8 <__aeabi_fadd+0x1d0>
 800074a:	1a2d      	subs	r5, r5, r0
 800074c:	48b3      	ldr	r0, [pc, #716]	; (8000a1c <__aeabi_fadd+0x334>)
 800074e:	4038      	ands	r0, r7
 8000750:	0743      	lsls	r3, r0, #29
 8000752:	d004      	beq.n	800075e <__aeabi_fadd+0x76>
 8000754:	230f      	movs	r3, #15
 8000756:	4003      	ands	r3, r0
 8000758:	2b04      	cmp	r3, #4
 800075a:	d000      	beq.n	800075e <__aeabi_fadd+0x76>
 800075c:	3004      	adds	r0, #4
 800075e:	0143      	lsls	r3, r0, #5
 8000760:	d400      	bmi.n	8000764 <__aeabi_fadd+0x7c>
 8000762:	e078      	b.n	8000856 <__aeabi_fadd+0x16e>
 8000764:	1c6a      	adds	r2, r5, #1
 8000766:	2dfe      	cmp	r5, #254	; 0xfe
 8000768:	d065      	beq.n	8000836 <__aeabi_fadd+0x14e>
 800076a:	0180      	lsls	r0, r0, #6
 800076c:	0a43      	lsrs	r3, r0, #9
 800076e:	469c      	mov	ip, r3
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	4663      	mov	r3, ip
 8000774:	05d0      	lsls	r0, r2, #23
 8000776:	4318      	orrs	r0, r3
 8000778:	07e4      	lsls	r4, r4, #31
 800077a:	4320      	orrs	r0, r4
 800077c:	bc80      	pop	{r7}
 800077e:	46b8      	mov	r8, r7
 8000780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000782:	2a00      	cmp	r2, #0
 8000784:	d035      	beq.n	80007f2 <__aeabi_fadd+0x10a>
 8000786:	1b7a      	subs	r2, r7, r5
 8000788:	2d00      	cmp	r5, #0
 800078a:	d000      	beq.n	800078e <__aeabi_fadd+0xa6>
 800078c:	e0af      	b.n	80008ee <__aeabi_fadd+0x206>
 800078e:	4643      	mov	r3, r8
 8000790:	2b00      	cmp	r3, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0xae>
 8000794:	e0a7      	b.n	80008e6 <__aeabi_fadd+0x1fe>
 8000796:	1e53      	subs	r3, r2, #1
 8000798:	2a01      	cmp	r2, #1
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0xb6>
 800079c:	e12f      	b.n	80009fe <__aeabi_fadd+0x316>
 800079e:	2aff      	cmp	r2, #255	; 0xff
 80007a0:	d069      	beq.n	8000876 <__aeabi_fadd+0x18e>
 80007a2:	001a      	movs	r2, r3
 80007a4:	e0aa      	b.n	80008fc <__aeabi_fadd+0x214>
 80007a6:	1be9      	subs	r1, r5, r7
 80007a8:	2900      	cmp	r1, #0
 80007aa:	dd70      	ble.n	800088e <__aeabi_fadd+0x1a6>
 80007ac:	2f00      	cmp	r7, #0
 80007ae:	d037      	beq.n	8000820 <__aeabi_fadd+0x138>
 80007b0:	2dff      	cmp	r5, #255	; 0xff
 80007b2:	d062      	beq.n	800087a <__aeabi_fadd+0x192>
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	04db      	lsls	r3, r3, #19
 80007b8:	431e      	orrs	r6, r3
 80007ba:	291b      	cmp	r1, #27
 80007bc:	dc00      	bgt.n	80007c0 <__aeabi_fadd+0xd8>
 80007be:	e0b0      	b.n	8000922 <__aeabi_fadd+0x23a>
 80007c0:	2001      	movs	r0, #1
 80007c2:	4440      	add	r0, r8
 80007c4:	0143      	lsls	r3, r0, #5
 80007c6:	d543      	bpl.n	8000850 <__aeabi_fadd+0x168>
 80007c8:	3501      	adds	r5, #1
 80007ca:	2dff      	cmp	r5, #255	; 0xff
 80007cc:	d033      	beq.n	8000836 <__aeabi_fadd+0x14e>
 80007ce:	2301      	movs	r3, #1
 80007d0:	4a93      	ldr	r2, [pc, #588]	; (8000a20 <__aeabi_fadd+0x338>)
 80007d2:	4003      	ands	r3, r0
 80007d4:	0840      	lsrs	r0, r0, #1
 80007d6:	4010      	ands	r0, r2
 80007d8:	4318      	orrs	r0, r3
 80007da:	e7b9      	b.n	8000750 <__aeabi_fadd+0x68>
 80007dc:	2e00      	cmp	r6, #0
 80007de:	d100      	bne.n	80007e2 <__aeabi_fadd+0xfa>
 80007e0:	e083      	b.n	80008ea <__aeabi_fadd+0x202>
 80007e2:	1e51      	subs	r1, r2, #1
 80007e4:	2a01      	cmp	r2, #1
 80007e6:	d100      	bne.n	80007ea <__aeabi_fadd+0x102>
 80007e8:	e0d8      	b.n	800099c <__aeabi_fadd+0x2b4>
 80007ea:	2aff      	cmp	r2, #255	; 0xff
 80007ec:	d045      	beq.n	800087a <__aeabi_fadd+0x192>
 80007ee:	000a      	movs	r2, r1
 80007f0:	e798      	b.n	8000724 <__aeabi_fadd+0x3c>
 80007f2:	27fe      	movs	r7, #254	; 0xfe
 80007f4:	1c6a      	adds	r2, r5, #1
 80007f6:	4217      	tst	r7, r2
 80007f8:	d000      	beq.n	80007fc <__aeabi_fadd+0x114>
 80007fa:	e086      	b.n	800090a <__aeabi_fadd+0x222>
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d000      	beq.n	8000802 <__aeabi_fadd+0x11a>
 8000800:	e0b7      	b.n	8000972 <__aeabi_fadd+0x28a>
 8000802:	4643      	mov	r3, r8
 8000804:	2b00      	cmp	r3, #0
 8000806:	d100      	bne.n	800080a <__aeabi_fadd+0x122>
 8000808:	e0f3      	b.n	80009f2 <__aeabi_fadd+0x30a>
 800080a:	2200      	movs	r2, #0
 800080c:	2e00      	cmp	r6, #0
 800080e:	d0b0      	beq.n	8000772 <__aeabi_fadd+0x8a>
 8000810:	1b98      	subs	r0, r3, r6
 8000812:	0143      	lsls	r3, r0, #5
 8000814:	d400      	bmi.n	8000818 <__aeabi_fadd+0x130>
 8000816:	e0fa      	b.n	8000a0e <__aeabi_fadd+0x326>
 8000818:	4643      	mov	r3, r8
 800081a:	000c      	movs	r4, r1
 800081c:	1af0      	subs	r0, r6, r3
 800081e:	e797      	b.n	8000750 <__aeabi_fadd+0x68>
 8000820:	2e00      	cmp	r6, #0
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x13e>
 8000824:	e0c8      	b.n	80009b8 <__aeabi_fadd+0x2d0>
 8000826:	1e4a      	subs	r2, r1, #1
 8000828:	2901      	cmp	r1, #1
 800082a:	d100      	bne.n	800082e <__aeabi_fadd+0x146>
 800082c:	e0ae      	b.n	800098c <__aeabi_fadd+0x2a4>
 800082e:	29ff      	cmp	r1, #255	; 0xff
 8000830:	d023      	beq.n	800087a <__aeabi_fadd+0x192>
 8000832:	0011      	movs	r1, r2
 8000834:	e7c1      	b.n	80007ba <__aeabi_fadd+0xd2>
 8000836:	2300      	movs	r3, #0
 8000838:	22ff      	movs	r2, #255	; 0xff
 800083a:	469c      	mov	ip, r3
 800083c:	e799      	b.n	8000772 <__aeabi_fadd+0x8a>
 800083e:	21fe      	movs	r1, #254	; 0xfe
 8000840:	1c6a      	adds	r2, r5, #1
 8000842:	4211      	tst	r1, r2
 8000844:	d077      	beq.n	8000936 <__aeabi_fadd+0x24e>
 8000846:	2aff      	cmp	r2, #255	; 0xff
 8000848:	d0f5      	beq.n	8000836 <__aeabi_fadd+0x14e>
 800084a:	0015      	movs	r5, r2
 800084c:	4446      	add	r6, r8
 800084e:	0870      	lsrs	r0, r6, #1
 8000850:	0743      	lsls	r3, r0, #29
 8000852:	d000      	beq.n	8000856 <__aeabi_fadd+0x16e>
 8000854:	e77e      	b.n	8000754 <__aeabi_fadd+0x6c>
 8000856:	08c3      	lsrs	r3, r0, #3
 8000858:	2dff      	cmp	r5, #255	; 0xff
 800085a:	d00e      	beq.n	800087a <__aeabi_fadd+0x192>
 800085c:	025b      	lsls	r3, r3, #9
 800085e:	0a5b      	lsrs	r3, r3, #9
 8000860:	469c      	mov	ip, r3
 8000862:	b2ea      	uxtb	r2, r5
 8000864:	e785      	b.n	8000772 <__aeabi_fadd+0x8a>
 8000866:	2e00      	cmp	r6, #0
 8000868:	d007      	beq.n	800087a <__aeabi_fadd+0x192>
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	03d2      	lsls	r2, r2, #15
 800086e:	4213      	tst	r3, r2
 8000870:	d003      	beq.n	800087a <__aeabi_fadd+0x192>
 8000872:	4210      	tst	r0, r2
 8000874:	d101      	bne.n	800087a <__aeabi_fadd+0x192>
 8000876:	000c      	movs	r4, r1
 8000878:	0003      	movs	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0db      	beq.n	8000836 <__aeabi_fadd+0x14e>
 800087e:	2080      	movs	r0, #128	; 0x80
 8000880:	03c0      	lsls	r0, r0, #15
 8000882:	4318      	orrs	r0, r3
 8000884:	0240      	lsls	r0, r0, #9
 8000886:	0a43      	lsrs	r3, r0, #9
 8000888:	469c      	mov	ip, r3
 800088a:	22ff      	movs	r2, #255	; 0xff
 800088c:	e771      	b.n	8000772 <__aeabi_fadd+0x8a>
 800088e:	2900      	cmp	r1, #0
 8000890:	d0d5      	beq.n	800083e <__aeabi_fadd+0x156>
 8000892:	1b7a      	subs	r2, r7, r5
 8000894:	2d00      	cmp	r5, #0
 8000896:	d160      	bne.n	800095a <__aeabi_fadd+0x272>
 8000898:	4643      	mov	r3, r8
 800089a:	2b00      	cmp	r3, #0
 800089c:	d024      	beq.n	80008e8 <__aeabi_fadd+0x200>
 800089e:	1e53      	subs	r3, r2, #1
 80008a0:	2a01      	cmp	r2, #1
 80008a2:	d073      	beq.n	800098c <__aeabi_fadd+0x2a4>
 80008a4:	2aff      	cmp	r2, #255	; 0xff
 80008a6:	d0e7      	beq.n	8000878 <__aeabi_fadd+0x190>
 80008a8:	001a      	movs	r2, r3
 80008aa:	2a1b      	cmp	r2, #27
 80008ac:	dc00      	bgt.n	80008b0 <__aeabi_fadd+0x1c8>
 80008ae:	e085      	b.n	80009bc <__aeabi_fadd+0x2d4>
 80008b0:	2001      	movs	r0, #1
 80008b2:	003d      	movs	r5, r7
 80008b4:	1980      	adds	r0, r0, r6
 80008b6:	e785      	b.n	80007c4 <__aeabi_fadd+0xdc>
 80008b8:	2320      	movs	r3, #32
 80008ba:	003a      	movs	r2, r7
 80008bc:	1b45      	subs	r5, r0, r5
 80008be:	0038      	movs	r0, r7
 80008c0:	3501      	adds	r5, #1
 80008c2:	40ea      	lsrs	r2, r5
 80008c4:	1b5d      	subs	r5, r3, r5
 80008c6:	40a8      	lsls	r0, r5
 80008c8:	1e43      	subs	r3, r0, #1
 80008ca:	4198      	sbcs	r0, r3
 80008cc:	2500      	movs	r5, #0
 80008ce:	4310      	orrs	r0, r2
 80008d0:	e73e      	b.n	8000750 <__aeabi_fadd+0x68>
 80008d2:	2320      	movs	r3, #32
 80008d4:	0030      	movs	r0, r6
 80008d6:	1a9b      	subs	r3, r3, r2
 80008d8:	0031      	movs	r1, r6
 80008da:	4098      	lsls	r0, r3
 80008dc:	40d1      	lsrs	r1, r2
 80008de:	1e43      	subs	r3, r0, #1
 80008e0:	4198      	sbcs	r0, r3
 80008e2:	4308      	orrs	r0, r1
 80008e4:	e722      	b.n	800072c <__aeabi_fadd+0x44>
 80008e6:	000c      	movs	r4, r1
 80008e8:	0003      	movs	r3, r0
 80008ea:	0015      	movs	r5, r2
 80008ec:	e7b4      	b.n	8000858 <__aeabi_fadd+0x170>
 80008ee:	2fff      	cmp	r7, #255	; 0xff
 80008f0:	d0c1      	beq.n	8000876 <__aeabi_fadd+0x18e>
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	4640      	mov	r0, r8
 80008f6:	04db      	lsls	r3, r3, #19
 80008f8:	4318      	orrs	r0, r3
 80008fa:	4680      	mov	r8, r0
 80008fc:	2a1b      	cmp	r2, #27
 80008fe:	dd51      	ble.n	80009a4 <__aeabi_fadd+0x2bc>
 8000900:	2001      	movs	r0, #1
 8000902:	000c      	movs	r4, r1
 8000904:	003d      	movs	r5, r7
 8000906:	1a30      	subs	r0, r6, r0
 8000908:	e712      	b.n	8000730 <__aeabi_fadd+0x48>
 800090a:	4643      	mov	r3, r8
 800090c:	1b9f      	subs	r7, r3, r6
 800090e:	017b      	lsls	r3, r7, #5
 8000910:	d42b      	bmi.n	800096a <__aeabi_fadd+0x282>
 8000912:	2f00      	cmp	r7, #0
 8000914:	d000      	beq.n	8000918 <__aeabi_fadd+0x230>
 8000916:	e710      	b.n	800073a <__aeabi_fadd+0x52>
 8000918:	2300      	movs	r3, #0
 800091a:	2400      	movs	r4, #0
 800091c:	2200      	movs	r2, #0
 800091e:	469c      	mov	ip, r3
 8000920:	e727      	b.n	8000772 <__aeabi_fadd+0x8a>
 8000922:	2320      	movs	r3, #32
 8000924:	0032      	movs	r2, r6
 8000926:	0030      	movs	r0, r6
 8000928:	40ca      	lsrs	r2, r1
 800092a:	1a59      	subs	r1, r3, r1
 800092c:	4088      	lsls	r0, r1
 800092e:	1e43      	subs	r3, r0, #1
 8000930:	4198      	sbcs	r0, r3
 8000932:	4310      	orrs	r0, r2
 8000934:	e745      	b.n	80007c2 <__aeabi_fadd+0xda>
 8000936:	2d00      	cmp	r5, #0
 8000938:	d14a      	bne.n	80009d0 <__aeabi_fadd+0x2e8>
 800093a:	4643      	mov	r3, r8
 800093c:	2b00      	cmp	r3, #0
 800093e:	d063      	beq.n	8000a08 <__aeabi_fadd+0x320>
 8000940:	2200      	movs	r2, #0
 8000942:	2e00      	cmp	r6, #0
 8000944:	d100      	bne.n	8000948 <__aeabi_fadd+0x260>
 8000946:	e714      	b.n	8000772 <__aeabi_fadd+0x8a>
 8000948:	0030      	movs	r0, r6
 800094a:	4440      	add	r0, r8
 800094c:	0143      	lsls	r3, r0, #5
 800094e:	d400      	bmi.n	8000952 <__aeabi_fadd+0x26a>
 8000950:	e77e      	b.n	8000850 <__aeabi_fadd+0x168>
 8000952:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <__aeabi_fadd+0x334>)
 8000954:	3501      	adds	r5, #1
 8000956:	4018      	ands	r0, r3
 8000958:	e77a      	b.n	8000850 <__aeabi_fadd+0x168>
 800095a:	2fff      	cmp	r7, #255	; 0xff
 800095c:	d08c      	beq.n	8000878 <__aeabi_fadd+0x190>
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	4641      	mov	r1, r8
 8000962:	04db      	lsls	r3, r3, #19
 8000964:	4319      	orrs	r1, r3
 8000966:	4688      	mov	r8, r1
 8000968:	e79f      	b.n	80008aa <__aeabi_fadd+0x1c2>
 800096a:	4643      	mov	r3, r8
 800096c:	000c      	movs	r4, r1
 800096e:	1af7      	subs	r7, r6, r3
 8000970:	e6e3      	b.n	800073a <__aeabi_fadd+0x52>
 8000972:	4642      	mov	r2, r8
 8000974:	2a00      	cmp	r2, #0
 8000976:	d000      	beq.n	800097a <__aeabi_fadd+0x292>
 8000978:	e775      	b.n	8000866 <__aeabi_fadd+0x17e>
 800097a:	2e00      	cmp	r6, #0
 800097c:	d000      	beq.n	8000980 <__aeabi_fadd+0x298>
 800097e:	e77a      	b.n	8000876 <__aeabi_fadd+0x18e>
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	03db      	lsls	r3, r3, #15
 8000984:	2400      	movs	r4, #0
 8000986:	469c      	mov	ip, r3
 8000988:	22ff      	movs	r2, #255	; 0xff
 800098a:	e6f2      	b.n	8000772 <__aeabi_fadd+0x8a>
 800098c:	0030      	movs	r0, r6
 800098e:	4440      	add	r0, r8
 8000990:	2501      	movs	r5, #1
 8000992:	0143      	lsls	r3, r0, #5
 8000994:	d400      	bmi.n	8000998 <__aeabi_fadd+0x2b0>
 8000996:	e75b      	b.n	8000850 <__aeabi_fadd+0x168>
 8000998:	2502      	movs	r5, #2
 800099a:	e718      	b.n	80007ce <__aeabi_fadd+0xe6>
 800099c:	4643      	mov	r3, r8
 800099e:	2501      	movs	r5, #1
 80009a0:	1b98      	subs	r0, r3, r6
 80009a2:	e6c5      	b.n	8000730 <__aeabi_fadd+0x48>
 80009a4:	2320      	movs	r3, #32
 80009a6:	4644      	mov	r4, r8
 80009a8:	4640      	mov	r0, r8
 80009aa:	40d4      	lsrs	r4, r2
 80009ac:	1a9a      	subs	r2, r3, r2
 80009ae:	4090      	lsls	r0, r2
 80009b0:	1e43      	subs	r3, r0, #1
 80009b2:	4198      	sbcs	r0, r3
 80009b4:	4320      	orrs	r0, r4
 80009b6:	e7a4      	b.n	8000902 <__aeabi_fadd+0x21a>
 80009b8:	000d      	movs	r5, r1
 80009ba:	e74d      	b.n	8000858 <__aeabi_fadd+0x170>
 80009bc:	2320      	movs	r3, #32
 80009be:	4641      	mov	r1, r8
 80009c0:	4640      	mov	r0, r8
 80009c2:	40d1      	lsrs	r1, r2
 80009c4:	1a9a      	subs	r2, r3, r2
 80009c6:	4090      	lsls	r0, r2
 80009c8:	1e43      	subs	r3, r0, #1
 80009ca:	4198      	sbcs	r0, r3
 80009cc:	4308      	orrs	r0, r1
 80009ce:	e770      	b.n	80008b2 <__aeabi_fadd+0x1ca>
 80009d0:	4642      	mov	r2, r8
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fadd+0x2f0>
 80009d6:	e74f      	b.n	8000878 <__aeabi_fadd+0x190>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d100      	bne.n	80009de <__aeabi_fadd+0x2f6>
 80009dc:	e74d      	b.n	800087a <__aeabi_fadd+0x192>
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	03d2      	lsls	r2, r2, #15
 80009e2:	4213      	tst	r3, r2
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x300>
 80009e6:	e748      	b.n	800087a <__aeabi_fadd+0x192>
 80009e8:	4210      	tst	r0, r2
 80009ea:	d000      	beq.n	80009ee <__aeabi_fadd+0x306>
 80009ec:	e745      	b.n	800087a <__aeabi_fadd+0x192>
 80009ee:	0003      	movs	r3, r0
 80009f0:	e743      	b.n	800087a <__aeabi_fadd+0x192>
 80009f2:	2e00      	cmp	r6, #0
 80009f4:	d090      	beq.n	8000918 <__aeabi_fadd+0x230>
 80009f6:	000c      	movs	r4, r1
 80009f8:	4684      	mov	ip, r0
 80009fa:	2200      	movs	r2, #0
 80009fc:	e6b9      	b.n	8000772 <__aeabi_fadd+0x8a>
 80009fe:	4643      	mov	r3, r8
 8000a00:	000c      	movs	r4, r1
 8000a02:	1af0      	subs	r0, r6, r3
 8000a04:	3501      	adds	r5, #1
 8000a06:	e693      	b.n	8000730 <__aeabi_fadd+0x48>
 8000a08:	4684      	mov	ip, r0
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	e6b1      	b.n	8000772 <__aeabi_fadd+0x8a>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	d000      	beq.n	8000a14 <__aeabi_fadd+0x32c>
 8000a12:	e71d      	b.n	8000850 <__aeabi_fadd+0x168>
 8000a14:	2300      	movs	r3, #0
 8000a16:	2400      	movs	r4, #0
 8000a18:	469c      	mov	ip, r3
 8000a1a:	e6aa      	b.n	8000772 <__aeabi_fadd+0x8a>
 8000a1c:	fbffffff 	.word	0xfbffffff
 8000a20:	7dffffff 	.word	0x7dffffff

08000a24 <__aeabi_fdiv>:
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a26:	464f      	mov	r7, r9
 8000a28:	4646      	mov	r6, r8
 8000a2a:	46d6      	mov	lr, sl
 8000a2c:	0245      	lsls	r5, r0, #9
 8000a2e:	b5c0      	push	{r6, r7, lr}
 8000a30:	0047      	lsls	r7, r0, #1
 8000a32:	1c0c      	adds	r4, r1, #0
 8000a34:	0a6d      	lsrs	r5, r5, #9
 8000a36:	0e3f      	lsrs	r7, r7, #24
 8000a38:	0fc6      	lsrs	r6, r0, #31
 8000a3a:	2f00      	cmp	r7, #0
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fdiv+0x1c>
 8000a3e:	e070      	b.n	8000b22 <__aeabi_fdiv+0xfe>
 8000a40:	2fff      	cmp	r7, #255	; 0xff
 8000a42:	d100      	bne.n	8000a46 <__aeabi_fdiv+0x22>
 8000a44:	e075      	b.n	8000b32 <__aeabi_fdiv+0x10e>
 8000a46:	00eb      	lsls	r3, r5, #3
 8000a48:	2580      	movs	r5, #128	; 0x80
 8000a4a:	04ed      	lsls	r5, r5, #19
 8000a4c:	431d      	orrs	r5, r3
 8000a4e:	2300      	movs	r3, #0
 8000a50:	4699      	mov	r9, r3
 8000a52:	469a      	mov	sl, r3
 8000a54:	3f7f      	subs	r7, #127	; 0x7f
 8000a56:	0260      	lsls	r0, r4, #9
 8000a58:	0a43      	lsrs	r3, r0, #9
 8000a5a:	4698      	mov	r8, r3
 8000a5c:	0063      	lsls	r3, r4, #1
 8000a5e:	0e1b      	lsrs	r3, r3, #24
 8000a60:	0fe4      	lsrs	r4, r4, #31
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d04e      	beq.n	8000b04 <__aeabi_fdiv+0xe0>
 8000a66:	2bff      	cmp	r3, #255	; 0xff
 8000a68:	d046      	beq.n	8000af8 <__aeabi_fdiv+0xd4>
 8000a6a:	4642      	mov	r2, r8
 8000a6c:	00d0      	lsls	r0, r2, #3
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	04d2      	lsls	r2, r2, #19
 8000a72:	4302      	orrs	r2, r0
 8000a74:	4690      	mov	r8, r2
 8000a76:	2200      	movs	r2, #0
 8000a78:	3b7f      	subs	r3, #127	; 0x7f
 8000a7a:	0031      	movs	r1, r6
 8000a7c:	1aff      	subs	r7, r7, r3
 8000a7e:	464b      	mov	r3, r9
 8000a80:	4061      	eors	r1, r4
 8000a82:	b2c9      	uxtb	r1, r1
 8000a84:	4313      	orrs	r3, r2
 8000a86:	2b0f      	cmp	r3, #15
 8000a88:	d900      	bls.n	8000a8c <__aeabi_fdiv+0x68>
 8000a8a:	e0b5      	b.n	8000bf8 <__aeabi_fdiv+0x1d4>
 8000a8c:	486e      	ldr	r0, [pc, #440]	; (8000c48 <__aeabi_fdiv+0x224>)
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	58c3      	ldr	r3, [r0, r3]
 8000a92:	469f      	mov	pc, r3
 8000a94:	2300      	movs	r3, #0
 8000a96:	4698      	mov	r8, r3
 8000a98:	0026      	movs	r6, r4
 8000a9a:	4645      	mov	r5, r8
 8000a9c:	4692      	mov	sl, r2
 8000a9e:	4653      	mov	r3, sl
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fdiv+0x82>
 8000aa4:	e089      	b.n	8000bba <__aeabi_fdiv+0x196>
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d100      	bne.n	8000aac <__aeabi_fdiv+0x88>
 8000aaa:	e09e      	b.n	8000bea <__aeabi_fdiv+0x1c6>
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d018      	beq.n	8000ae2 <__aeabi_fdiv+0xbe>
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	337f      	adds	r3, #127	; 0x7f
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	dd69      	ble.n	8000b8c <__aeabi_fdiv+0x168>
 8000ab8:	076a      	lsls	r2, r5, #29
 8000aba:	d004      	beq.n	8000ac6 <__aeabi_fdiv+0xa2>
 8000abc:	220f      	movs	r2, #15
 8000abe:	402a      	ands	r2, r5
 8000ac0:	2a04      	cmp	r2, #4
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_fdiv+0xa2>
 8000ac4:	3504      	adds	r5, #4
 8000ac6:	012a      	lsls	r2, r5, #4
 8000ac8:	d503      	bpl.n	8000ad2 <__aeabi_fdiv+0xae>
 8000aca:	4b60      	ldr	r3, [pc, #384]	; (8000c4c <__aeabi_fdiv+0x228>)
 8000acc:	401d      	ands	r5, r3
 8000ace:	003b      	movs	r3, r7
 8000ad0:	3380      	adds	r3, #128	; 0x80
 8000ad2:	2bfe      	cmp	r3, #254	; 0xfe
 8000ad4:	dd00      	ble.n	8000ad8 <__aeabi_fdiv+0xb4>
 8000ad6:	e070      	b.n	8000bba <__aeabi_fdiv+0x196>
 8000ad8:	01ad      	lsls	r5, r5, #6
 8000ada:	0a6d      	lsrs	r5, r5, #9
 8000adc:	b2d8      	uxtb	r0, r3
 8000ade:	e002      	b.n	8000ae6 <__aeabi_fdiv+0xc2>
 8000ae0:	000e      	movs	r6, r1
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	2500      	movs	r5, #0
 8000ae6:	05c0      	lsls	r0, r0, #23
 8000ae8:	4328      	orrs	r0, r5
 8000aea:	07f6      	lsls	r6, r6, #31
 8000aec:	4330      	orrs	r0, r6
 8000aee:	bce0      	pop	{r5, r6, r7}
 8000af0:	46ba      	mov	sl, r7
 8000af2:	46b1      	mov	r9, r6
 8000af4:	46a8      	mov	r8, r5
 8000af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af8:	4643      	mov	r3, r8
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d13f      	bne.n	8000b7e <__aeabi_fdiv+0x15a>
 8000afe:	2202      	movs	r2, #2
 8000b00:	3fff      	subs	r7, #255	; 0xff
 8000b02:	e003      	b.n	8000b0c <__aeabi_fdiv+0xe8>
 8000b04:	4643      	mov	r3, r8
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d12d      	bne.n	8000b66 <__aeabi_fdiv+0x142>
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	0031      	movs	r1, r6
 8000b0e:	464b      	mov	r3, r9
 8000b10:	4061      	eors	r1, r4
 8000b12:	b2c9      	uxtb	r1, r1
 8000b14:	4313      	orrs	r3, r2
 8000b16:	2b0f      	cmp	r3, #15
 8000b18:	d834      	bhi.n	8000b84 <__aeabi_fdiv+0x160>
 8000b1a:	484d      	ldr	r0, [pc, #308]	; (8000c50 <__aeabi_fdiv+0x22c>)
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	58c3      	ldr	r3, [r0, r3]
 8000b20:	469f      	mov	pc, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d113      	bne.n	8000b4e <__aeabi_fdiv+0x12a>
 8000b26:	2304      	movs	r3, #4
 8000b28:	4699      	mov	r9, r3
 8000b2a:	3b03      	subs	r3, #3
 8000b2c:	2700      	movs	r7, #0
 8000b2e:	469a      	mov	sl, r3
 8000b30:	e791      	b.n	8000a56 <__aeabi_fdiv+0x32>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	d105      	bne.n	8000b42 <__aeabi_fdiv+0x11e>
 8000b36:	2308      	movs	r3, #8
 8000b38:	4699      	mov	r9, r3
 8000b3a:	3b06      	subs	r3, #6
 8000b3c:	27ff      	movs	r7, #255	; 0xff
 8000b3e:	469a      	mov	sl, r3
 8000b40:	e789      	b.n	8000a56 <__aeabi_fdiv+0x32>
 8000b42:	230c      	movs	r3, #12
 8000b44:	4699      	mov	r9, r3
 8000b46:	3b09      	subs	r3, #9
 8000b48:	27ff      	movs	r7, #255	; 0xff
 8000b4a:	469a      	mov	sl, r3
 8000b4c:	e783      	b.n	8000a56 <__aeabi_fdiv+0x32>
 8000b4e:	0028      	movs	r0, r5
 8000b50:	f001 ff5c 	bl	8002a0c <__clzsi2>
 8000b54:	2776      	movs	r7, #118	; 0x76
 8000b56:	1f43      	subs	r3, r0, #5
 8000b58:	409d      	lsls	r5, r3
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	427f      	negs	r7, r7
 8000b5e:	4699      	mov	r9, r3
 8000b60:	469a      	mov	sl, r3
 8000b62:	1a3f      	subs	r7, r7, r0
 8000b64:	e777      	b.n	8000a56 <__aeabi_fdiv+0x32>
 8000b66:	4640      	mov	r0, r8
 8000b68:	f001 ff50 	bl	8002a0c <__clzsi2>
 8000b6c:	4642      	mov	r2, r8
 8000b6e:	1f43      	subs	r3, r0, #5
 8000b70:	409a      	lsls	r2, r3
 8000b72:	2376      	movs	r3, #118	; 0x76
 8000b74:	425b      	negs	r3, r3
 8000b76:	4690      	mov	r8, r2
 8000b78:	1a1b      	subs	r3, r3, r0
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	e77d      	b.n	8000a7a <__aeabi_fdiv+0x56>
 8000b7e:	23ff      	movs	r3, #255	; 0xff
 8000b80:	2203      	movs	r2, #3
 8000b82:	e77a      	b.n	8000a7a <__aeabi_fdiv+0x56>
 8000b84:	000e      	movs	r6, r1
 8000b86:	20ff      	movs	r0, #255	; 0xff
 8000b88:	2500      	movs	r5, #0
 8000b8a:	e7ac      	b.n	8000ae6 <__aeabi_fdiv+0xc2>
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	1ac0      	subs	r0, r0, r3
 8000b90:	281b      	cmp	r0, #27
 8000b92:	dca6      	bgt.n	8000ae2 <__aeabi_fdiv+0xbe>
 8000b94:	379e      	adds	r7, #158	; 0x9e
 8000b96:	002a      	movs	r2, r5
 8000b98:	40bd      	lsls	r5, r7
 8000b9a:	40c2      	lsrs	r2, r0
 8000b9c:	1e6b      	subs	r3, r5, #1
 8000b9e:	419d      	sbcs	r5, r3
 8000ba0:	4315      	orrs	r5, r2
 8000ba2:	076b      	lsls	r3, r5, #29
 8000ba4:	d004      	beq.n	8000bb0 <__aeabi_fdiv+0x18c>
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	402b      	ands	r3, r5
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_fdiv+0x18c>
 8000bae:	3504      	adds	r5, #4
 8000bb0:	016b      	lsls	r3, r5, #5
 8000bb2:	d544      	bpl.n	8000c3e <__aeabi_fdiv+0x21a>
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	2500      	movs	r5, #0
 8000bb8:	e795      	b.n	8000ae6 <__aeabi_fdiv+0xc2>
 8000bba:	20ff      	movs	r0, #255	; 0xff
 8000bbc:	2500      	movs	r5, #0
 8000bbe:	e792      	b.n	8000ae6 <__aeabi_fdiv+0xc2>
 8000bc0:	2580      	movs	r5, #128	; 0x80
 8000bc2:	2600      	movs	r6, #0
 8000bc4:	20ff      	movs	r0, #255	; 0xff
 8000bc6:	03ed      	lsls	r5, r5, #15
 8000bc8:	e78d      	b.n	8000ae6 <__aeabi_fdiv+0xc2>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	4698      	mov	r8, r3
 8000bce:	2080      	movs	r0, #128	; 0x80
 8000bd0:	03c0      	lsls	r0, r0, #15
 8000bd2:	4205      	tst	r5, r0
 8000bd4:	d009      	beq.n	8000bea <__aeabi_fdiv+0x1c6>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	4203      	tst	r3, r0
 8000bda:	d106      	bne.n	8000bea <__aeabi_fdiv+0x1c6>
 8000bdc:	4645      	mov	r5, r8
 8000bde:	4305      	orrs	r5, r0
 8000be0:	026d      	lsls	r5, r5, #9
 8000be2:	0026      	movs	r6, r4
 8000be4:	20ff      	movs	r0, #255	; 0xff
 8000be6:	0a6d      	lsrs	r5, r5, #9
 8000be8:	e77d      	b.n	8000ae6 <__aeabi_fdiv+0xc2>
 8000bea:	2080      	movs	r0, #128	; 0x80
 8000bec:	03c0      	lsls	r0, r0, #15
 8000bee:	4305      	orrs	r5, r0
 8000bf0:	026d      	lsls	r5, r5, #9
 8000bf2:	20ff      	movs	r0, #255	; 0xff
 8000bf4:	0a6d      	lsrs	r5, r5, #9
 8000bf6:	e776      	b.n	8000ae6 <__aeabi_fdiv+0xc2>
 8000bf8:	4642      	mov	r2, r8
 8000bfa:	016b      	lsls	r3, r5, #5
 8000bfc:	0150      	lsls	r0, r2, #5
 8000bfe:	4283      	cmp	r3, r0
 8000c00:	d219      	bcs.n	8000c36 <__aeabi_fdiv+0x212>
 8000c02:	221b      	movs	r2, #27
 8000c04:	2500      	movs	r5, #0
 8000c06:	3f01      	subs	r7, #1
 8000c08:	2601      	movs	r6, #1
 8000c0a:	001c      	movs	r4, r3
 8000c0c:	006d      	lsls	r5, r5, #1
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	2c00      	cmp	r4, #0
 8000c12:	db01      	blt.n	8000c18 <__aeabi_fdiv+0x1f4>
 8000c14:	4298      	cmp	r0, r3
 8000c16:	d801      	bhi.n	8000c1c <__aeabi_fdiv+0x1f8>
 8000c18:	1a1b      	subs	r3, r3, r0
 8000c1a:	4335      	orrs	r5, r6
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d1f3      	bne.n	8000c0a <__aeabi_fdiv+0x1e6>
 8000c22:	1e5a      	subs	r2, r3, #1
 8000c24:	4193      	sbcs	r3, r2
 8000c26:	431d      	orrs	r5, r3
 8000c28:	003b      	movs	r3, r7
 8000c2a:	337f      	adds	r3, #127	; 0x7f
 8000c2c:	000e      	movs	r6, r1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	dd00      	ble.n	8000c34 <__aeabi_fdiv+0x210>
 8000c32:	e741      	b.n	8000ab8 <__aeabi_fdiv+0x94>
 8000c34:	e7aa      	b.n	8000b8c <__aeabi_fdiv+0x168>
 8000c36:	221a      	movs	r2, #26
 8000c38:	2501      	movs	r5, #1
 8000c3a:	1a1b      	subs	r3, r3, r0
 8000c3c:	e7e4      	b.n	8000c08 <__aeabi_fdiv+0x1e4>
 8000c3e:	01ad      	lsls	r5, r5, #6
 8000c40:	2000      	movs	r0, #0
 8000c42:	0a6d      	lsrs	r5, r5, #9
 8000c44:	e74f      	b.n	8000ae6 <__aeabi_fdiv+0xc2>
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	08008018 	.word	0x08008018
 8000c4c:	f7ffffff 	.word	0xf7ffffff
 8000c50:	08008058 	.word	0x08008058

08000c54 <__eqsf2>:
 8000c54:	b570      	push	{r4, r5, r6, lr}
 8000c56:	0042      	lsls	r2, r0, #1
 8000c58:	0245      	lsls	r5, r0, #9
 8000c5a:	024e      	lsls	r6, r1, #9
 8000c5c:	004c      	lsls	r4, r1, #1
 8000c5e:	0fc3      	lsrs	r3, r0, #31
 8000c60:	0a6d      	lsrs	r5, r5, #9
 8000c62:	2001      	movs	r0, #1
 8000c64:	0e12      	lsrs	r2, r2, #24
 8000c66:	0a76      	lsrs	r6, r6, #9
 8000c68:	0e24      	lsrs	r4, r4, #24
 8000c6a:	0fc9      	lsrs	r1, r1, #31
 8000c6c:	2aff      	cmp	r2, #255	; 0xff
 8000c6e:	d006      	beq.n	8000c7e <__eqsf2+0x2a>
 8000c70:	2cff      	cmp	r4, #255	; 0xff
 8000c72:	d003      	beq.n	8000c7c <__eqsf2+0x28>
 8000c74:	42a2      	cmp	r2, r4
 8000c76:	d101      	bne.n	8000c7c <__eqsf2+0x28>
 8000c78:	42b5      	cmp	r5, r6
 8000c7a:	d006      	beq.n	8000c8a <__eqsf2+0x36>
 8000c7c:	bd70      	pop	{r4, r5, r6, pc}
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d1fc      	bne.n	8000c7c <__eqsf2+0x28>
 8000c82:	2cff      	cmp	r4, #255	; 0xff
 8000c84:	d1fa      	bne.n	8000c7c <__eqsf2+0x28>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d1f8      	bne.n	8000c7c <__eqsf2+0x28>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d006      	beq.n	8000c9c <__eqsf2+0x48>
 8000c8e:	2001      	movs	r0, #1
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	d1f3      	bne.n	8000c7c <__eqsf2+0x28>
 8000c94:	0028      	movs	r0, r5
 8000c96:	1e43      	subs	r3, r0, #1
 8000c98:	4198      	sbcs	r0, r3
 8000c9a:	e7ef      	b.n	8000c7c <__eqsf2+0x28>
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	e7ed      	b.n	8000c7c <__eqsf2+0x28>

08000ca0 <__gesf2>:
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	0042      	lsls	r2, r0, #1
 8000ca4:	0245      	lsls	r5, r0, #9
 8000ca6:	024e      	lsls	r6, r1, #9
 8000ca8:	004c      	lsls	r4, r1, #1
 8000caa:	0fc3      	lsrs	r3, r0, #31
 8000cac:	0a6d      	lsrs	r5, r5, #9
 8000cae:	0e12      	lsrs	r2, r2, #24
 8000cb0:	0a76      	lsrs	r6, r6, #9
 8000cb2:	0e24      	lsrs	r4, r4, #24
 8000cb4:	0fc8      	lsrs	r0, r1, #31
 8000cb6:	2aff      	cmp	r2, #255	; 0xff
 8000cb8:	d01b      	beq.n	8000cf2 <__gesf2+0x52>
 8000cba:	2cff      	cmp	r4, #255	; 0xff
 8000cbc:	d00e      	beq.n	8000cdc <__gesf2+0x3c>
 8000cbe:	2a00      	cmp	r2, #0
 8000cc0:	d11b      	bne.n	8000cfa <__gesf2+0x5a>
 8000cc2:	2c00      	cmp	r4, #0
 8000cc4:	d101      	bne.n	8000cca <__gesf2+0x2a>
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d01c      	beq.n	8000d04 <__gesf2+0x64>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d00c      	beq.n	8000ce8 <__gesf2+0x48>
 8000cce:	4283      	cmp	r3, r0
 8000cd0:	d01c      	beq.n	8000d0c <__gesf2+0x6c>
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	1e58      	subs	r0, r3, #1
 8000cd6:	4008      	ands	r0, r1
 8000cd8:	3801      	subs	r0, #1
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d122      	bne.n	8000d26 <__gesf2+0x86>
 8000ce0:	2a00      	cmp	r2, #0
 8000ce2:	d1f4      	bne.n	8000cce <__gesf2+0x2e>
 8000ce4:	2d00      	cmp	r5, #0
 8000ce6:	d1f2      	bne.n	8000cce <__gesf2+0x2e>
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	d1f6      	bne.n	8000cda <__gesf2+0x3a>
 8000cec:	2001      	movs	r0, #1
 8000cee:	4240      	negs	r0, r0
 8000cf0:	e7f3      	b.n	8000cda <__gesf2+0x3a>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	d117      	bne.n	8000d26 <__gesf2+0x86>
 8000cf6:	2cff      	cmp	r4, #255	; 0xff
 8000cf8:	d0f0      	beq.n	8000cdc <__gesf2+0x3c>
 8000cfa:	2c00      	cmp	r4, #0
 8000cfc:	d1e7      	bne.n	8000cce <__gesf2+0x2e>
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d1e5      	bne.n	8000cce <__gesf2+0x2e>
 8000d02:	e7e6      	b.n	8000cd2 <__gesf2+0x32>
 8000d04:	2000      	movs	r0, #0
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e7      	beq.n	8000cda <__gesf2+0x3a>
 8000d0a:	e7e2      	b.n	8000cd2 <__gesf2+0x32>
 8000d0c:	42a2      	cmp	r2, r4
 8000d0e:	dc05      	bgt.n	8000d1c <__gesf2+0x7c>
 8000d10:	dbea      	blt.n	8000ce8 <__gesf2+0x48>
 8000d12:	42b5      	cmp	r5, r6
 8000d14:	d802      	bhi.n	8000d1c <__gesf2+0x7c>
 8000d16:	d3e7      	bcc.n	8000ce8 <__gesf2+0x48>
 8000d18:	2000      	movs	r0, #0
 8000d1a:	e7de      	b.n	8000cda <__gesf2+0x3a>
 8000d1c:	4243      	negs	r3, r0
 8000d1e:	4158      	adcs	r0, r3
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	3801      	subs	r0, #1
 8000d24:	e7d9      	b.n	8000cda <__gesf2+0x3a>
 8000d26:	2002      	movs	r0, #2
 8000d28:	4240      	negs	r0, r0
 8000d2a:	e7d6      	b.n	8000cda <__gesf2+0x3a>

08000d2c <__lesf2>:
 8000d2c:	b570      	push	{r4, r5, r6, lr}
 8000d2e:	0042      	lsls	r2, r0, #1
 8000d30:	0245      	lsls	r5, r0, #9
 8000d32:	024e      	lsls	r6, r1, #9
 8000d34:	004c      	lsls	r4, r1, #1
 8000d36:	0fc3      	lsrs	r3, r0, #31
 8000d38:	0a6d      	lsrs	r5, r5, #9
 8000d3a:	0e12      	lsrs	r2, r2, #24
 8000d3c:	0a76      	lsrs	r6, r6, #9
 8000d3e:	0e24      	lsrs	r4, r4, #24
 8000d40:	0fc8      	lsrs	r0, r1, #31
 8000d42:	2aff      	cmp	r2, #255	; 0xff
 8000d44:	d00b      	beq.n	8000d5e <__lesf2+0x32>
 8000d46:	2cff      	cmp	r4, #255	; 0xff
 8000d48:	d00d      	beq.n	8000d66 <__lesf2+0x3a>
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d11f      	bne.n	8000d8e <__lesf2+0x62>
 8000d4e:	2c00      	cmp	r4, #0
 8000d50:	d116      	bne.n	8000d80 <__lesf2+0x54>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d114      	bne.n	8000d80 <__lesf2+0x54>
 8000d56:	2000      	movs	r0, #0
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d010      	beq.n	8000d7e <__lesf2+0x52>
 8000d5c:	e009      	b.n	8000d72 <__lesf2+0x46>
 8000d5e:	2d00      	cmp	r5, #0
 8000d60:	d10c      	bne.n	8000d7c <__lesf2+0x50>
 8000d62:	2cff      	cmp	r4, #255	; 0xff
 8000d64:	d113      	bne.n	8000d8e <__lesf2+0x62>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d108      	bne.n	8000d7c <__lesf2+0x50>
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	d008      	beq.n	8000d80 <__lesf2+0x54>
 8000d6e:	4283      	cmp	r3, r0
 8000d70:	d012      	beq.n	8000d98 <__lesf2+0x6c>
 8000d72:	2102      	movs	r1, #2
 8000d74:	1e58      	subs	r0, r3, #1
 8000d76:	4008      	ands	r0, r1
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e000      	b.n	8000d7e <__lesf2+0x52>
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
 8000d80:	2d00      	cmp	r5, #0
 8000d82:	d1f4      	bne.n	8000d6e <__lesf2+0x42>
 8000d84:	2800      	cmp	r0, #0
 8000d86:	d1fa      	bne.n	8000d7e <__lesf2+0x52>
 8000d88:	2001      	movs	r0, #1
 8000d8a:	4240      	negs	r0, r0
 8000d8c:	e7f7      	b.n	8000d7e <__lesf2+0x52>
 8000d8e:	2c00      	cmp	r4, #0
 8000d90:	d1ed      	bne.n	8000d6e <__lesf2+0x42>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d1eb      	bne.n	8000d6e <__lesf2+0x42>
 8000d96:	e7ec      	b.n	8000d72 <__lesf2+0x46>
 8000d98:	42a2      	cmp	r2, r4
 8000d9a:	dc05      	bgt.n	8000da8 <__lesf2+0x7c>
 8000d9c:	dbf2      	blt.n	8000d84 <__lesf2+0x58>
 8000d9e:	42b5      	cmp	r5, r6
 8000da0:	d802      	bhi.n	8000da8 <__lesf2+0x7c>
 8000da2:	d3ef      	bcc.n	8000d84 <__lesf2+0x58>
 8000da4:	2000      	movs	r0, #0
 8000da6:	e7ea      	b.n	8000d7e <__lesf2+0x52>
 8000da8:	4243      	negs	r3, r0
 8000daa:	4158      	adcs	r0, r3
 8000dac:	0040      	lsls	r0, r0, #1
 8000dae:	3801      	subs	r0, #1
 8000db0:	e7e5      	b.n	8000d7e <__lesf2+0x52>
 8000db2:	46c0      	nop			; (mov r8, r8)

08000db4 <__aeabi_fmul>:
 8000db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db6:	464f      	mov	r7, r9
 8000db8:	4646      	mov	r6, r8
 8000dba:	46d6      	mov	lr, sl
 8000dbc:	0244      	lsls	r4, r0, #9
 8000dbe:	0045      	lsls	r5, r0, #1
 8000dc0:	b5c0      	push	{r6, r7, lr}
 8000dc2:	0a64      	lsrs	r4, r4, #9
 8000dc4:	1c0f      	adds	r7, r1, #0
 8000dc6:	0e2d      	lsrs	r5, r5, #24
 8000dc8:	0fc6      	lsrs	r6, r0, #31
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_fmul+0x1c>
 8000dce:	e08d      	b.n	8000eec <__aeabi_fmul+0x138>
 8000dd0:	2dff      	cmp	r5, #255	; 0xff
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_fmul+0x22>
 8000dd4:	e092      	b.n	8000efc <__aeabi_fmul+0x148>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	2080      	movs	r0, #128	; 0x80
 8000dda:	4699      	mov	r9, r3
 8000ddc:	469a      	mov	sl, r3
 8000dde:	00e4      	lsls	r4, r4, #3
 8000de0:	04c0      	lsls	r0, r0, #19
 8000de2:	4304      	orrs	r4, r0
 8000de4:	3d7f      	subs	r5, #127	; 0x7f
 8000de6:	0278      	lsls	r0, r7, #9
 8000de8:	0a43      	lsrs	r3, r0, #9
 8000dea:	4698      	mov	r8, r3
 8000dec:	007b      	lsls	r3, r7, #1
 8000dee:	0e1b      	lsrs	r3, r3, #24
 8000df0:	0fff      	lsrs	r7, r7, #31
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d100      	bne.n	8000df8 <__aeabi_fmul+0x44>
 8000df6:	e070      	b.n	8000eda <__aeabi_fmul+0x126>
 8000df8:	2bff      	cmp	r3, #255	; 0xff
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_fmul+0x4a>
 8000dfc:	e086      	b.n	8000f0c <__aeabi_fmul+0x158>
 8000dfe:	4642      	mov	r2, r8
 8000e00:	00d0      	lsls	r0, r2, #3
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	3b7f      	subs	r3, #127	; 0x7f
 8000e06:	18ed      	adds	r5, r5, r3
 8000e08:	2300      	movs	r3, #0
 8000e0a:	04d2      	lsls	r2, r2, #19
 8000e0c:	4302      	orrs	r2, r0
 8000e0e:	4690      	mov	r8, r2
 8000e10:	469c      	mov	ip, r3
 8000e12:	0031      	movs	r1, r6
 8000e14:	464b      	mov	r3, r9
 8000e16:	4079      	eors	r1, r7
 8000e18:	1c68      	adds	r0, r5, #1
 8000e1a:	2b0f      	cmp	r3, #15
 8000e1c:	d81c      	bhi.n	8000e58 <__aeabi_fmul+0xa4>
 8000e1e:	4a76      	ldr	r2, [pc, #472]	; (8000ff8 <__aeabi_fmul+0x244>)
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	58d3      	ldr	r3, [r2, r3]
 8000e24:	469f      	mov	pc, r3
 8000e26:	0039      	movs	r1, r7
 8000e28:	4644      	mov	r4, r8
 8000e2a:	46e2      	mov	sl, ip
 8000e2c:	4653      	mov	r3, sl
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d00f      	beq.n	8000e52 <__aeabi_fmul+0x9e>
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d100      	bne.n	8000e38 <__aeabi_fmul+0x84>
 8000e36:	e0d7      	b.n	8000fe8 <__aeabi_fmul+0x234>
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d137      	bne.n	8000eac <__aeabi_fmul+0xf8>
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	2400      	movs	r4, #0
 8000e40:	05c0      	lsls	r0, r0, #23
 8000e42:	4320      	orrs	r0, r4
 8000e44:	07c9      	lsls	r1, r1, #31
 8000e46:	4308      	orrs	r0, r1
 8000e48:	bce0      	pop	{r5, r6, r7}
 8000e4a:	46ba      	mov	sl, r7
 8000e4c:	46b1      	mov	r9, r6
 8000e4e:	46a8      	mov	r8, r5
 8000e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e52:	20ff      	movs	r0, #255	; 0xff
 8000e54:	2400      	movs	r4, #0
 8000e56:	e7f3      	b.n	8000e40 <__aeabi_fmul+0x8c>
 8000e58:	0c26      	lsrs	r6, r4, #16
 8000e5a:	0424      	lsls	r4, r4, #16
 8000e5c:	0c22      	lsrs	r2, r4, #16
 8000e5e:	4644      	mov	r4, r8
 8000e60:	0424      	lsls	r4, r4, #16
 8000e62:	0c24      	lsrs	r4, r4, #16
 8000e64:	4643      	mov	r3, r8
 8000e66:	0027      	movs	r7, r4
 8000e68:	0c1b      	lsrs	r3, r3, #16
 8000e6a:	4357      	muls	r7, r2
 8000e6c:	4374      	muls	r4, r6
 8000e6e:	435a      	muls	r2, r3
 8000e70:	435e      	muls	r6, r3
 8000e72:	1912      	adds	r2, r2, r4
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	189b      	adds	r3, r3, r2
 8000e78:	429c      	cmp	r4, r3
 8000e7a:	d903      	bls.n	8000e84 <__aeabi_fmul+0xd0>
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	0252      	lsls	r2, r2, #9
 8000e80:	4694      	mov	ip, r2
 8000e82:	4466      	add	r6, ip
 8000e84:	043f      	lsls	r7, r7, #16
 8000e86:	041a      	lsls	r2, r3, #16
 8000e88:	0c3f      	lsrs	r7, r7, #16
 8000e8a:	19d2      	adds	r2, r2, r7
 8000e8c:	0194      	lsls	r4, r2, #6
 8000e8e:	1e67      	subs	r7, r4, #1
 8000e90:	41bc      	sbcs	r4, r7
 8000e92:	0c1b      	lsrs	r3, r3, #16
 8000e94:	0e92      	lsrs	r2, r2, #26
 8000e96:	199b      	adds	r3, r3, r6
 8000e98:	4314      	orrs	r4, r2
 8000e9a:	019b      	lsls	r3, r3, #6
 8000e9c:	431c      	orrs	r4, r3
 8000e9e:	011b      	lsls	r3, r3, #4
 8000ea0:	d400      	bmi.n	8000ea4 <__aeabi_fmul+0xf0>
 8000ea2:	e09b      	b.n	8000fdc <__aeabi_fmul+0x228>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	0862      	lsrs	r2, r4, #1
 8000ea8:	401c      	ands	r4, r3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	0002      	movs	r2, r0
 8000eae:	327f      	adds	r2, #127	; 0x7f
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	dd64      	ble.n	8000f7e <__aeabi_fmul+0x1ca>
 8000eb4:	0763      	lsls	r3, r4, #29
 8000eb6:	d004      	beq.n	8000ec2 <__aeabi_fmul+0x10e>
 8000eb8:	230f      	movs	r3, #15
 8000eba:	4023      	ands	r3, r4
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d000      	beq.n	8000ec2 <__aeabi_fmul+0x10e>
 8000ec0:	3404      	adds	r4, #4
 8000ec2:	0123      	lsls	r3, r4, #4
 8000ec4:	d503      	bpl.n	8000ece <__aeabi_fmul+0x11a>
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <__aeabi_fmul+0x248>)
 8000eca:	3280      	adds	r2, #128	; 0x80
 8000ecc:	401c      	ands	r4, r3
 8000ece:	2afe      	cmp	r2, #254	; 0xfe
 8000ed0:	dcbf      	bgt.n	8000e52 <__aeabi_fmul+0x9e>
 8000ed2:	01a4      	lsls	r4, r4, #6
 8000ed4:	0a64      	lsrs	r4, r4, #9
 8000ed6:	b2d0      	uxtb	r0, r2
 8000ed8:	e7b2      	b.n	8000e40 <__aeabi_fmul+0x8c>
 8000eda:	4643      	mov	r3, r8
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d13d      	bne.n	8000f5c <__aeabi_fmul+0x1a8>
 8000ee0:	464a      	mov	r2, r9
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	4691      	mov	r9, r2
 8000ee8:	469c      	mov	ip, r3
 8000eea:	e792      	b.n	8000e12 <__aeabi_fmul+0x5e>
 8000eec:	2c00      	cmp	r4, #0
 8000eee:	d129      	bne.n	8000f44 <__aeabi_fmul+0x190>
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	4699      	mov	r9, r3
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	2500      	movs	r5, #0
 8000ef8:	469a      	mov	sl, r3
 8000efa:	e774      	b.n	8000de6 <__aeabi_fmul+0x32>
 8000efc:	2c00      	cmp	r4, #0
 8000efe:	d11b      	bne.n	8000f38 <__aeabi_fmul+0x184>
 8000f00:	2308      	movs	r3, #8
 8000f02:	4699      	mov	r9, r3
 8000f04:	3b06      	subs	r3, #6
 8000f06:	25ff      	movs	r5, #255	; 0xff
 8000f08:	469a      	mov	sl, r3
 8000f0a:	e76c      	b.n	8000de6 <__aeabi_fmul+0x32>
 8000f0c:	4643      	mov	r3, r8
 8000f0e:	35ff      	adds	r5, #255	; 0xff
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10b      	bne.n	8000f2c <__aeabi_fmul+0x178>
 8000f14:	2302      	movs	r3, #2
 8000f16:	464a      	mov	r2, r9
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	4691      	mov	r9, r2
 8000f1c:	469c      	mov	ip, r3
 8000f1e:	e778      	b.n	8000e12 <__aeabi_fmul+0x5e>
 8000f20:	4653      	mov	r3, sl
 8000f22:	0031      	movs	r1, r6
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fmul+0x176>
 8000f28:	e783      	b.n	8000e32 <__aeabi_fmul+0x7e>
 8000f2a:	e792      	b.n	8000e52 <__aeabi_fmul+0x9e>
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	464a      	mov	r2, r9
 8000f30:	431a      	orrs	r2, r3
 8000f32:	4691      	mov	r9, r2
 8000f34:	469c      	mov	ip, r3
 8000f36:	e76c      	b.n	8000e12 <__aeabi_fmul+0x5e>
 8000f38:	230c      	movs	r3, #12
 8000f3a:	4699      	mov	r9, r3
 8000f3c:	3b09      	subs	r3, #9
 8000f3e:	25ff      	movs	r5, #255	; 0xff
 8000f40:	469a      	mov	sl, r3
 8000f42:	e750      	b.n	8000de6 <__aeabi_fmul+0x32>
 8000f44:	0020      	movs	r0, r4
 8000f46:	f001 fd61 	bl	8002a0c <__clzsi2>
 8000f4a:	2576      	movs	r5, #118	; 0x76
 8000f4c:	1f43      	subs	r3, r0, #5
 8000f4e:	409c      	lsls	r4, r3
 8000f50:	2300      	movs	r3, #0
 8000f52:	426d      	negs	r5, r5
 8000f54:	4699      	mov	r9, r3
 8000f56:	469a      	mov	sl, r3
 8000f58:	1a2d      	subs	r5, r5, r0
 8000f5a:	e744      	b.n	8000de6 <__aeabi_fmul+0x32>
 8000f5c:	4640      	mov	r0, r8
 8000f5e:	f001 fd55 	bl	8002a0c <__clzsi2>
 8000f62:	4642      	mov	r2, r8
 8000f64:	1f43      	subs	r3, r0, #5
 8000f66:	409a      	lsls	r2, r3
 8000f68:	2300      	movs	r3, #0
 8000f6a:	1a2d      	subs	r5, r5, r0
 8000f6c:	4690      	mov	r8, r2
 8000f6e:	469c      	mov	ip, r3
 8000f70:	3d76      	subs	r5, #118	; 0x76
 8000f72:	e74e      	b.n	8000e12 <__aeabi_fmul+0x5e>
 8000f74:	2480      	movs	r4, #128	; 0x80
 8000f76:	2100      	movs	r1, #0
 8000f78:	20ff      	movs	r0, #255	; 0xff
 8000f7a:	03e4      	lsls	r4, r4, #15
 8000f7c:	e760      	b.n	8000e40 <__aeabi_fmul+0x8c>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	2b1b      	cmp	r3, #27
 8000f84:	dd00      	ble.n	8000f88 <__aeabi_fmul+0x1d4>
 8000f86:	e759      	b.n	8000e3c <__aeabi_fmul+0x88>
 8000f88:	0022      	movs	r2, r4
 8000f8a:	309e      	adds	r0, #158	; 0x9e
 8000f8c:	40da      	lsrs	r2, r3
 8000f8e:	4084      	lsls	r4, r0
 8000f90:	0013      	movs	r3, r2
 8000f92:	1e62      	subs	r2, r4, #1
 8000f94:	4194      	sbcs	r4, r2
 8000f96:	431c      	orrs	r4, r3
 8000f98:	0763      	lsls	r3, r4, #29
 8000f9a:	d004      	beq.n	8000fa6 <__aeabi_fmul+0x1f2>
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	4023      	ands	r3, r4
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_fmul+0x1f2>
 8000fa4:	3404      	adds	r4, #4
 8000fa6:	0163      	lsls	r3, r4, #5
 8000fa8:	d51a      	bpl.n	8000fe0 <__aeabi_fmul+0x22c>
 8000faa:	2001      	movs	r0, #1
 8000fac:	2400      	movs	r4, #0
 8000fae:	e747      	b.n	8000e40 <__aeabi_fmul+0x8c>
 8000fb0:	2080      	movs	r0, #128	; 0x80
 8000fb2:	03c0      	lsls	r0, r0, #15
 8000fb4:	4204      	tst	r4, r0
 8000fb6:	d009      	beq.n	8000fcc <__aeabi_fmul+0x218>
 8000fb8:	4643      	mov	r3, r8
 8000fba:	4203      	tst	r3, r0
 8000fbc:	d106      	bne.n	8000fcc <__aeabi_fmul+0x218>
 8000fbe:	4644      	mov	r4, r8
 8000fc0:	4304      	orrs	r4, r0
 8000fc2:	0264      	lsls	r4, r4, #9
 8000fc4:	0039      	movs	r1, r7
 8000fc6:	20ff      	movs	r0, #255	; 0xff
 8000fc8:	0a64      	lsrs	r4, r4, #9
 8000fca:	e739      	b.n	8000e40 <__aeabi_fmul+0x8c>
 8000fcc:	2080      	movs	r0, #128	; 0x80
 8000fce:	03c0      	lsls	r0, r0, #15
 8000fd0:	4304      	orrs	r4, r0
 8000fd2:	0264      	lsls	r4, r4, #9
 8000fd4:	0031      	movs	r1, r6
 8000fd6:	20ff      	movs	r0, #255	; 0xff
 8000fd8:	0a64      	lsrs	r4, r4, #9
 8000fda:	e731      	b.n	8000e40 <__aeabi_fmul+0x8c>
 8000fdc:	0028      	movs	r0, r5
 8000fde:	e765      	b.n	8000eac <__aeabi_fmul+0xf8>
 8000fe0:	01a4      	lsls	r4, r4, #6
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	0a64      	lsrs	r4, r4, #9
 8000fe6:	e72b      	b.n	8000e40 <__aeabi_fmul+0x8c>
 8000fe8:	2080      	movs	r0, #128	; 0x80
 8000fea:	03c0      	lsls	r0, r0, #15
 8000fec:	4304      	orrs	r4, r0
 8000fee:	0264      	lsls	r4, r4, #9
 8000ff0:	20ff      	movs	r0, #255	; 0xff
 8000ff2:	0a64      	lsrs	r4, r4, #9
 8000ff4:	e724      	b.n	8000e40 <__aeabi_fmul+0x8c>
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	08008098 	.word	0x08008098
 8000ffc:	f7ffffff 	.word	0xf7ffffff

08001000 <__aeabi_fsub>:
 8001000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001002:	46ce      	mov	lr, r9
 8001004:	4647      	mov	r7, r8
 8001006:	0243      	lsls	r3, r0, #9
 8001008:	0a5b      	lsrs	r3, r3, #9
 800100a:	024e      	lsls	r6, r1, #9
 800100c:	00da      	lsls	r2, r3, #3
 800100e:	4694      	mov	ip, r2
 8001010:	0a72      	lsrs	r2, r6, #9
 8001012:	4691      	mov	r9, r2
 8001014:	0045      	lsls	r5, r0, #1
 8001016:	004a      	lsls	r2, r1, #1
 8001018:	b580      	push	{r7, lr}
 800101a:	0e2d      	lsrs	r5, r5, #24
 800101c:	001f      	movs	r7, r3
 800101e:	0fc4      	lsrs	r4, r0, #31
 8001020:	0e12      	lsrs	r2, r2, #24
 8001022:	0fc9      	lsrs	r1, r1, #31
 8001024:	09b6      	lsrs	r6, r6, #6
 8001026:	2aff      	cmp	r2, #255	; 0xff
 8001028:	d05b      	beq.n	80010e2 <__aeabi_fsub+0xe2>
 800102a:	2001      	movs	r0, #1
 800102c:	4041      	eors	r1, r0
 800102e:	428c      	cmp	r4, r1
 8001030:	d039      	beq.n	80010a6 <__aeabi_fsub+0xa6>
 8001032:	1aa8      	subs	r0, r5, r2
 8001034:	2800      	cmp	r0, #0
 8001036:	dd5a      	ble.n	80010ee <__aeabi_fsub+0xee>
 8001038:	2a00      	cmp	r2, #0
 800103a:	d06a      	beq.n	8001112 <__aeabi_fsub+0x112>
 800103c:	2dff      	cmp	r5, #255	; 0xff
 800103e:	d100      	bne.n	8001042 <__aeabi_fsub+0x42>
 8001040:	e0d9      	b.n	80011f6 <__aeabi_fsub+0x1f6>
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	04d2      	lsls	r2, r2, #19
 8001046:	4316      	orrs	r6, r2
 8001048:	281b      	cmp	r0, #27
 800104a:	dc00      	bgt.n	800104e <__aeabi_fsub+0x4e>
 800104c:	e0e9      	b.n	8001222 <__aeabi_fsub+0x222>
 800104e:	2001      	movs	r0, #1
 8001050:	4663      	mov	r3, ip
 8001052:	1a18      	subs	r0, r3, r0
 8001054:	0143      	lsls	r3, r0, #5
 8001056:	d400      	bmi.n	800105a <__aeabi_fsub+0x5a>
 8001058:	e0b4      	b.n	80011c4 <__aeabi_fsub+0x1c4>
 800105a:	0180      	lsls	r0, r0, #6
 800105c:	0987      	lsrs	r7, r0, #6
 800105e:	0038      	movs	r0, r7
 8001060:	f001 fcd4 	bl	8002a0c <__clzsi2>
 8001064:	3805      	subs	r0, #5
 8001066:	4087      	lsls	r7, r0
 8001068:	4285      	cmp	r5, r0
 800106a:	dc00      	bgt.n	800106e <__aeabi_fsub+0x6e>
 800106c:	e0cc      	b.n	8001208 <__aeabi_fsub+0x208>
 800106e:	1a2d      	subs	r5, r5, r0
 8001070:	48b5      	ldr	r0, [pc, #724]	; (8001348 <__aeabi_fsub+0x348>)
 8001072:	4038      	ands	r0, r7
 8001074:	0743      	lsls	r3, r0, #29
 8001076:	d004      	beq.n	8001082 <__aeabi_fsub+0x82>
 8001078:	230f      	movs	r3, #15
 800107a:	4003      	ands	r3, r0
 800107c:	2b04      	cmp	r3, #4
 800107e:	d000      	beq.n	8001082 <__aeabi_fsub+0x82>
 8001080:	3004      	adds	r0, #4
 8001082:	0143      	lsls	r3, r0, #5
 8001084:	d400      	bmi.n	8001088 <__aeabi_fsub+0x88>
 8001086:	e0a0      	b.n	80011ca <__aeabi_fsub+0x1ca>
 8001088:	1c6a      	adds	r2, r5, #1
 800108a:	2dfe      	cmp	r5, #254	; 0xfe
 800108c:	d100      	bne.n	8001090 <__aeabi_fsub+0x90>
 800108e:	e08d      	b.n	80011ac <__aeabi_fsub+0x1ac>
 8001090:	0180      	lsls	r0, r0, #6
 8001092:	0a47      	lsrs	r7, r0, #9
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	05d0      	lsls	r0, r2, #23
 8001098:	4338      	orrs	r0, r7
 800109a:	07e4      	lsls	r4, r4, #31
 800109c:	4320      	orrs	r0, r4
 800109e:	bcc0      	pop	{r6, r7}
 80010a0:	46b9      	mov	r9, r7
 80010a2:	46b0      	mov	r8, r6
 80010a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010a6:	1aa8      	subs	r0, r5, r2
 80010a8:	4680      	mov	r8, r0
 80010aa:	2800      	cmp	r0, #0
 80010ac:	dd45      	ble.n	800113a <__aeabi_fsub+0x13a>
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d070      	beq.n	8001194 <__aeabi_fsub+0x194>
 80010b2:	2dff      	cmp	r5, #255	; 0xff
 80010b4:	d100      	bne.n	80010b8 <__aeabi_fsub+0xb8>
 80010b6:	e09e      	b.n	80011f6 <__aeabi_fsub+0x1f6>
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	04db      	lsls	r3, r3, #19
 80010bc:	431e      	orrs	r6, r3
 80010be:	4643      	mov	r3, r8
 80010c0:	2b1b      	cmp	r3, #27
 80010c2:	dc00      	bgt.n	80010c6 <__aeabi_fsub+0xc6>
 80010c4:	e0d2      	b.n	800126c <__aeabi_fsub+0x26c>
 80010c6:	2001      	movs	r0, #1
 80010c8:	4460      	add	r0, ip
 80010ca:	0143      	lsls	r3, r0, #5
 80010cc:	d57a      	bpl.n	80011c4 <__aeabi_fsub+0x1c4>
 80010ce:	3501      	adds	r5, #1
 80010d0:	2dff      	cmp	r5, #255	; 0xff
 80010d2:	d06b      	beq.n	80011ac <__aeabi_fsub+0x1ac>
 80010d4:	2301      	movs	r3, #1
 80010d6:	4a9d      	ldr	r2, [pc, #628]	; (800134c <__aeabi_fsub+0x34c>)
 80010d8:	4003      	ands	r3, r0
 80010da:	0840      	lsrs	r0, r0, #1
 80010dc:	4010      	ands	r0, r2
 80010de:	4318      	orrs	r0, r3
 80010e0:	e7c8      	b.n	8001074 <__aeabi_fsub+0x74>
 80010e2:	2e00      	cmp	r6, #0
 80010e4:	d020      	beq.n	8001128 <__aeabi_fsub+0x128>
 80010e6:	428c      	cmp	r4, r1
 80010e8:	d023      	beq.n	8001132 <__aeabi_fsub+0x132>
 80010ea:	0028      	movs	r0, r5
 80010ec:	38ff      	subs	r0, #255	; 0xff
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d039      	beq.n	8001166 <__aeabi_fsub+0x166>
 80010f2:	1b57      	subs	r7, r2, r5
 80010f4:	2d00      	cmp	r5, #0
 80010f6:	d000      	beq.n	80010fa <__aeabi_fsub+0xfa>
 80010f8:	e09d      	b.n	8001236 <__aeabi_fsub+0x236>
 80010fa:	4663      	mov	r3, ip
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d100      	bne.n	8001102 <__aeabi_fsub+0x102>
 8001100:	e0db      	b.n	80012ba <__aeabi_fsub+0x2ba>
 8001102:	1e7b      	subs	r3, r7, #1
 8001104:	2f01      	cmp	r7, #1
 8001106:	d100      	bne.n	800110a <__aeabi_fsub+0x10a>
 8001108:	e10d      	b.n	8001326 <__aeabi_fsub+0x326>
 800110a:	2fff      	cmp	r7, #255	; 0xff
 800110c:	d071      	beq.n	80011f2 <__aeabi_fsub+0x1f2>
 800110e:	001f      	movs	r7, r3
 8001110:	e098      	b.n	8001244 <__aeabi_fsub+0x244>
 8001112:	2e00      	cmp	r6, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_fsub+0x118>
 8001116:	e0a7      	b.n	8001268 <__aeabi_fsub+0x268>
 8001118:	1e42      	subs	r2, r0, #1
 800111a:	2801      	cmp	r0, #1
 800111c:	d100      	bne.n	8001120 <__aeabi_fsub+0x120>
 800111e:	e0e6      	b.n	80012ee <__aeabi_fsub+0x2ee>
 8001120:	28ff      	cmp	r0, #255	; 0xff
 8001122:	d068      	beq.n	80011f6 <__aeabi_fsub+0x1f6>
 8001124:	0010      	movs	r0, r2
 8001126:	e78f      	b.n	8001048 <__aeabi_fsub+0x48>
 8001128:	2001      	movs	r0, #1
 800112a:	4041      	eors	r1, r0
 800112c:	42a1      	cmp	r1, r4
 800112e:	d000      	beq.n	8001132 <__aeabi_fsub+0x132>
 8001130:	e77f      	b.n	8001032 <__aeabi_fsub+0x32>
 8001132:	20ff      	movs	r0, #255	; 0xff
 8001134:	4240      	negs	r0, r0
 8001136:	4680      	mov	r8, r0
 8001138:	44a8      	add	r8, r5
 800113a:	4640      	mov	r0, r8
 800113c:	2800      	cmp	r0, #0
 800113e:	d038      	beq.n	80011b2 <__aeabi_fsub+0x1b2>
 8001140:	1b51      	subs	r1, r2, r5
 8001142:	2d00      	cmp	r5, #0
 8001144:	d100      	bne.n	8001148 <__aeabi_fsub+0x148>
 8001146:	e0ae      	b.n	80012a6 <__aeabi_fsub+0x2a6>
 8001148:	2aff      	cmp	r2, #255	; 0xff
 800114a:	d100      	bne.n	800114e <__aeabi_fsub+0x14e>
 800114c:	e0df      	b.n	800130e <__aeabi_fsub+0x30e>
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	4660      	mov	r0, ip
 8001152:	04db      	lsls	r3, r3, #19
 8001154:	4318      	orrs	r0, r3
 8001156:	4684      	mov	ip, r0
 8001158:	291b      	cmp	r1, #27
 800115a:	dc00      	bgt.n	800115e <__aeabi_fsub+0x15e>
 800115c:	e0d9      	b.n	8001312 <__aeabi_fsub+0x312>
 800115e:	2001      	movs	r0, #1
 8001160:	0015      	movs	r5, r2
 8001162:	1980      	adds	r0, r0, r6
 8001164:	e7b1      	b.n	80010ca <__aeabi_fsub+0xca>
 8001166:	20fe      	movs	r0, #254	; 0xfe
 8001168:	1c6a      	adds	r2, r5, #1
 800116a:	4210      	tst	r0, r2
 800116c:	d171      	bne.n	8001252 <__aeabi_fsub+0x252>
 800116e:	2d00      	cmp	r5, #0
 8001170:	d000      	beq.n	8001174 <__aeabi_fsub+0x174>
 8001172:	e0a6      	b.n	80012c2 <__aeabi_fsub+0x2c2>
 8001174:	4663      	mov	r3, ip
 8001176:	2b00      	cmp	r3, #0
 8001178:	d100      	bne.n	800117c <__aeabi_fsub+0x17c>
 800117a:	e0d9      	b.n	8001330 <__aeabi_fsub+0x330>
 800117c:	2200      	movs	r2, #0
 800117e:	2e00      	cmp	r6, #0
 8001180:	d100      	bne.n	8001184 <__aeabi_fsub+0x184>
 8001182:	e788      	b.n	8001096 <__aeabi_fsub+0x96>
 8001184:	1b98      	subs	r0, r3, r6
 8001186:	0143      	lsls	r3, r0, #5
 8001188:	d400      	bmi.n	800118c <__aeabi_fsub+0x18c>
 800118a:	e0e1      	b.n	8001350 <__aeabi_fsub+0x350>
 800118c:	4663      	mov	r3, ip
 800118e:	000c      	movs	r4, r1
 8001190:	1af0      	subs	r0, r6, r3
 8001192:	e76f      	b.n	8001074 <__aeabi_fsub+0x74>
 8001194:	2e00      	cmp	r6, #0
 8001196:	d100      	bne.n	800119a <__aeabi_fsub+0x19a>
 8001198:	e0b7      	b.n	800130a <__aeabi_fsub+0x30a>
 800119a:	0002      	movs	r2, r0
 800119c:	3a01      	subs	r2, #1
 800119e:	2801      	cmp	r0, #1
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x1a4>
 80011a2:	e09c      	b.n	80012de <__aeabi_fsub+0x2de>
 80011a4:	28ff      	cmp	r0, #255	; 0xff
 80011a6:	d026      	beq.n	80011f6 <__aeabi_fsub+0x1f6>
 80011a8:	4690      	mov	r8, r2
 80011aa:	e788      	b.n	80010be <__aeabi_fsub+0xbe>
 80011ac:	22ff      	movs	r2, #255	; 0xff
 80011ae:	2700      	movs	r7, #0
 80011b0:	e771      	b.n	8001096 <__aeabi_fsub+0x96>
 80011b2:	20fe      	movs	r0, #254	; 0xfe
 80011b4:	1c6a      	adds	r2, r5, #1
 80011b6:	4210      	tst	r0, r2
 80011b8:	d064      	beq.n	8001284 <__aeabi_fsub+0x284>
 80011ba:	2aff      	cmp	r2, #255	; 0xff
 80011bc:	d0f6      	beq.n	80011ac <__aeabi_fsub+0x1ac>
 80011be:	0015      	movs	r5, r2
 80011c0:	4466      	add	r6, ip
 80011c2:	0870      	lsrs	r0, r6, #1
 80011c4:	0743      	lsls	r3, r0, #29
 80011c6:	d000      	beq.n	80011ca <__aeabi_fsub+0x1ca>
 80011c8:	e756      	b.n	8001078 <__aeabi_fsub+0x78>
 80011ca:	08c3      	lsrs	r3, r0, #3
 80011cc:	2dff      	cmp	r5, #255	; 0xff
 80011ce:	d012      	beq.n	80011f6 <__aeabi_fsub+0x1f6>
 80011d0:	025b      	lsls	r3, r3, #9
 80011d2:	0a5f      	lsrs	r7, r3, #9
 80011d4:	b2ea      	uxtb	r2, r5
 80011d6:	e75e      	b.n	8001096 <__aeabi_fsub+0x96>
 80011d8:	4662      	mov	r2, ip
 80011da:	2a00      	cmp	r2, #0
 80011dc:	d100      	bne.n	80011e0 <__aeabi_fsub+0x1e0>
 80011de:	e096      	b.n	800130e <__aeabi_fsub+0x30e>
 80011e0:	2e00      	cmp	r6, #0
 80011e2:	d008      	beq.n	80011f6 <__aeabi_fsub+0x1f6>
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	03d2      	lsls	r2, r2, #15
 80011e8:	4213      	tst	r3, r2
 80011ea:	d004      	beq.n	80011f6 <__aeabi_fsub+0x1f6>
 80011ec:	4648      	mov	r0, r9
 80011ee:	4210      	tst	r0, r2
 80011f0:	d101      	bne.n	80011f6 <__aeabi_fsub+0x1f6>
 80011f2:	000c      	movs	r4, r1
 80011f4:	464b      	mov	r3, r9
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0d8      	beq.n	80011ac <__aeabi_fsub+0x1ac>
 80011fa:	2780      	movs	r7, #128	; 0x80
 80011fc:	03ff      	lsls	r7, r7, #15
 80011fe:	431f      	orrs	r7, r3
 8001200:	027f      	lsls	r7, r7, #9
 8001202:	22ff      	movs	r2, #255	; 0xff
 8001204:	0a7f      	lsrs	r7, r7, #9
 8001206:	e746      	b.n	8001096 <__aeabi_fsub+0x96>
 8001208:	2320      	movs	r3, #32
 800120a:	003a      	movs	r2, r7
 800120c:	1b45      	subs	r5, r0, r5
 800120e:	0038      	movs	r0, r7
 8001210:	3501      	adds	r5, #1
 8001212:	40ea      	lsrs	r2, r5
 8001214:	1b5d      	subs	r5, r3, r5
 8001216:	40a8      	lsls	r0, r5
 8001218:	1e43      	subs	r3, r0, #1
 800121a:	4198      	sbcs	r0, r3
 800121c:	2500      	movs	r5, #0
 800121e:	4310      	orrs	r0, r2
 8001220:	e728      	b.n	8001074 <__aeabi_fsub+0x74>
 8001222:	2320      	movs	r3, #32
 8001224:	1a1b      	subs	r3, r3, r0
 8001226:	0032      	movs	r2, r6
 8001228:	409e      	lsls	r6, r3
 800122a:	40c2      	lsrs	r2, r0
 800122c:	0030      	movs	r0, r6
 800122e:	1e43      	subs	r3, r0, #1
 8001230:	4198      	sbcs	r0, r3
 8001232:	4310      	orrs	r0, r2
 8001234:	e70c      	b.n	8001050 <__aeabi_fsub+0x50>
 8001236:	2aff      	cmp	r2, #255	; 0xff
 8001238:	d0db      	beq.n	80011f2 <__aeabi_fsub+0x1f2>
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	4660      	mov	r0, ip
 800123e:	04db      	lsls	r3, r3, #19
 8001240:	4318      	orrs	r0, r3
 8001242:	4684      	mov	ip, r0
 8001244:	2f1b      	cmp	r7, #27
 8001246:	dd56      	ble.n	80012f6 <__aeabi_fsub+0x2f6>
 8001248:	2001      	movs	r0, #1
 800124a:	000c      	movs	r4, r1
 800124c:	0015      	movs	r5, r2
 800124e:	1a30      	subs	r0, r6, r0
 8001250:	e700      	b.n	8001054 <__aeabi_fsub+0x54>
 8001252:	4663      	mov	r3, ip
 8001254:	1b9f      	subs	r7, r3, r6
 8001256:	017b      	lsls	r3, r7, #5
 8001258:	d43d      	bmi.n	80012d6 <__aeabi_fsub+0x2d6>
 800125a:	2f00      	cmp	r7, #0
 800125c:	d000      	beq.n	8001260 <__aeabi_fsub+0x260>
 800125e:	e6fe      	b.n	800105e <__aeabi_fsub+0x5e>
 8001260:	2400      	movs	r4, #0
 8001262:	2200      	movs	r2, #0
 8001264:	2700      	movs	r7, #0
 8001266:	e716      	b.n	8001096 <__aeabi_fsub+0x96>
 8001268:	0005      	movs	r5, r0
 800126a:	e7af      	b.n	80011cc <__aeabi_fsub+0x1cc>
 800126c:	0032      	movs	r2, r6
 800126e:	4643      	mov	r3, r8
 8001270:	4641      	mov	r1, r8
 8001272:	40da      	lsrs	r2, r3
 8001274:	2320      	movs	r3, #32
 8001276:	1a5b      	subs	r3, r3, r1
 8001278:	409e      	lsls	r6, r3
 800127a:	0030      	movs	r0, r6
 800127c:	1e43      	subs	r3, r0, #1
 800127e:	4198      	sbcs	r0, r3
 8001280:	4310      	orrs	r0, r2
 8001282:	e721      	b.n	80010c8 <__aeabi_fsub+0xc8>
 8001284:	2d00      	cmp	r5, #0
 8001286:	d1a7      	bne.n	80011d8 <__aeabi_fsub+0x1d8>
 8001288:	4663      	mov	r3, ip
 800128a:	2b00      	cmp	r3, #0
 800128c:	d059      	beq.n	8001342 <__aeabi_fsub+0x342>
 800128e:	2200      	movs	r2, #0
 8001290:	2e00      	cmp	r6, #0
 8001292:	d100      	bne.n	8001296 <__aeabi_fsub+0x296>
 8001294:	e6ff      	b.n	8001096 <__aeabi_fsub+0x96>
 8001296:	0030      	movs	r0, r6
 8001298:	4460      	add	r0, ip
 800129a:	0143      	lsls	r3, r0, #5
 800129c:	d592      	bpl.n	80011c4 <__aeabi_fsub+0x1c4>
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <__aeabi_fsub+0x348>)
 80012a0:	3501      	adds	r5, #1
 80012a2:	4018      	ands	r0, r3
 80012a4:	e78e      	b.n	80011c4 <__aeabi_fsub+0x1c4>
 80012a6:	4663      	mov	r3, ip
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d047      	beq.n	800133c <__aeabi_fsub+0x33c>
 80012ac:	1e4b      	subs	r3, r1, #1
 80012ae:	2901      	cmp	r1, #1
 80012b0:	d015      	beq.n	80012de <__aeabi_fsub+0x2de>
 80012b2:	29ff      	cmp	r1, #255	; 0xff
 80012b4:	d02b      	beq.n	800130e <__aeabi_fsub+0x30e>
 80012b6:	0019      	movs	r1, r3
 80012b8:	e74e      	b.n	8001158 <__aeabi_fsub+0x158>
 80012ba:	000c      	movs	r4, r1
 80012bc:	464b      	mov	r3, r9
 80012be:	003d      	movs	r5, r7
 80012c0:	e784      	b.n	80011cc <__aeabi_fsub+0x1cc>
 80012c2:	4662      	mov	r2, ip
 80012c4:	2a00      	cmp	r2, #0
 80012c6:	d18b      	bne.n	80011e0 <__aeabi_fsub+0x1e0>
 80012c8:	2e00      	cmp	r6, #0
 80012ca:	d192      	bne.n	80011f2 <__aeabi_fsub+0x1f2>
 80012cc:	2780      	movs	r7, #128	; 0x80
 80012ce:	2400      	movs	r4, #0
 80012d0:	22ff      	movs	r2, #255	; 0xff
 80012d2:	03ff      	lsls	r7, r7, #15
 80012d4:	e6df      	b.n	8001096 <__aeabi_fsub+0x96>
 80012d6:	4663      	mov	r3, ip
 80012d8:	000c      	movs	r4, r1
 80012da:	1af7      	subs	r7, r6, r3
 80012dc:	e6bf      	b.n	800105e <__aeabi_fsub+0x5e>
 80012de:	0030      	movs	r0, r6
 80012e0:	4460      	add	r0, ip
 80012e2:	2501      	movs	r5, #1
 80012e4:	0143      	lsls	r3, r0, #5
 80012e6:	d400      	bmi.n	80012ea <__aeabi_fsub+0x2ea>
 80012e8:	e76c      	b.n	80011c4 <__aeabi_fsub+0x1c4>
 80012ea:	2502      	movs	r5, #2
 80012ec:	e6f2      	b.n	80010d4 <__aeabi_fsub+0xd4>
 80012ee:	4663      	mov	r3, ip
 80012f0:	2501      	movs	r5, #1
 80012f2:	1b98      	subs	r0, r3, r6
 80012f4:	e6ae      	b.n	8001054 <__aeabi_fsub+0x54>
 80012f6:	2320      	movs	r3, #32
 80012f8:	4664      	mov	r4, ip
 80012fa:	4660      	mov	r0, ip
 80012fc:	40fc      	lsrs	r4, r7
 80012fe:	1bdf      	subs	r7, r3, r7
 8001300:	40b8      	lsls	r0, r7
 8001302:	1e43      	subs	r3, r0, #1
 8001304:	4198      	sbcs	r0, r3
 8001306:	4320      	orrs	r0, r4
 8001308:	e79f      	b.n	800124a <__aeabi_fsub+0x24a>
 800130a:	0005      	movs	r5, r0
 800130c:	e75e      	b.n	80011cc <__aeabi_fsub+0x1cc>
 800130e:	464b      	mov	r3, r9
 8001310:	e771      	b.n	80011f6 <__aeabi_fsub+0x1f6>
 8001312:	2320      	movs	r3, #32
 8001314:	4665      	mov	r5, ip
 8001316:	4660      	mov	r0, ip
 8001318:	40cd      	lsrs	r5, r1
 800131a:	1a59      	subs	r1, r3, r1
 800131c:	4088      	lsls	r0, r1
 800131e:	1e43      	subs	r3, r0, #1
 8001320:	4198      	sbcs	r0, r3
 8001322:	4328      	orrs	r0, r5
 8001324:	e71c      	b.n	8001160 <__aeabi_fsub+0x160>
 8001326:	4663      	mov	r3, ip
 8001328:	000c      	movs	r4, r1
 800132a:	2501      	movs	r5, #1
 800132c:	1af0      	subs	r0, r6, r3
 800132e:	e691      	b.n	8001054 <__aeabi_fsub+0x54>
 8001330:	2e00      	cmp	r6, #0
 8001332:	d095      	beq.n	8001260 <__aeabi_fsub+0x260>
 8001334:	000c      	movs	r4, r1
 8001336:	464f      	mov	r7, r9
 8001338:	2200      	movs	r2, #0
 800133a:	e6ac      	b.n	8001096 <__aeabi_fsub+0x96>
 800133c:	464b      	mov	r3, r9
 800133e:	000d      	movs	r5, r1
 8001340:	e744      	b.n	80011cc <__aeabi_fsub+0x1cc>
 8001342:	464f      	mov	r7, r9
 8001344:	2200      	movs	r2, #0
 8001346:	e6a6      	b.n	8001096 <__aeabi_fsub+0x96>
 8001348:	fbffffff 	.word	0xfbffffff
 800134c:	7dffffff 	.word	0x7dffffff
 8001350:	2800      	cmp	r0, #0
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x356>
 8001354:	e736      	b.n	80011c4 <__aeabi_fsub+0x1c4>
 8001356:	2400      	movs	r4, #0
 8001358:	2700      	movs	r7, #0
 800135a:	e69c      	b.n	8001096 <__aeabi_fsub+0x96>

0800135c <__aeabi_f2iz>:
 800135c:	0241      	lsls	r1, r0, #9
 800135e:	0042      	lsls	r2, r0, #1
 8001360:	0fc3      	lsrs	r3, r0, #31
 8001362:	0a49      	lsrs	r1, r1, #9
 8001364:	2000      	movs	r0, #0
 8001366:	0e12      	lsrs	r2, r2, #24
 8001368:	2a7e      	cmp	r2, #126	; 0x7e
 800136a:	dd03      	ble.n	8001374 <__aeabi_f2iz+0x18>
 800136c:	2a9d      	cmp	r2, #157	; 0x9d
 800136e:	dd02      	ble.n	8001376 <__aeabi_f2iz+0x1a>
 8001370:	4a09      	ldr	r2, [pc, #36]	; (8001398 <__aeabi_f2iz+0x3c>)
 8001372:	1898      	adds	r0, r3, r2
 8001374:	4770      	bx	lr
 8001376:	2080      	movs	r0, #128	; 0x80
 8001378:	0400      	lsls	r0, r0, #16
 800137a:	4301      	orrs	r1, r0
 800137c:	2a95      	cmp	r2, #149	; 0x95
 800137e:	dc07      	bgt.n	8001390 <__aeabi_f2iz+0x34>
 8001380:	2096      	movs	r0, #150	; 0x96
 8001382:	1a82      	subs	r2, r0, r2
 8001384:	40d1      	lsrs	r1, r2
 8001386:	4248      	negs	r0, r1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f3      	bne.n	8001374 <__aeabi_f2iz+0x18>
 800138c:	0008      	movs	r0, r1
 800138e:	e7f1      	b.n	8001374 <__aeabi_f2iz+0x18>
 8001390:	3a96      	subs	r2, #150	; 0x96
 8001392:	4091      	lsls	r1, r2
 8001394:	e7f7      	b.n	8001386 <__aeabi_f2iz+0x2a>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	7fffffff 	.word	0x7fffffff

0800139c <__aeabi_ui2f>:
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	1e05      	subs	r5, r0, #0
 80013a0:	d00e      	beq.n	80013c0 <__aeabi_ui2f+0x24>
 80013a2:	f001 fb33 	bl	8002a0c <__clzsi2>
 80013a6:	239e      	movs	r3, #158	; 0x9e
 80013a8:	0004      	movs	r4, r0
 80013aa:	1a1b      	subs	r3, r3, r0
 80013ac:	2b96      	cmp	r3, #150	; 0x96
 80013ae:	dc0c      	bgt.n	80013ca <__aeabi_ui2f+0x2e>
 80013b0:	2808      	cmp	r0, #8
 80013b2:	dd01      	ble.n	80013b8 <__aeabi_ui2f+0x1c>
 80013b4:	3c08      	subs	r4, #8
 80013b6:	40a5      	lsls	r5, r4
 80013b8:	026d      	lsls	r5, r5, #9
 80013ba:	0a6d      	lsrs	r5, r5, #9
 80013bc:	b2d8      	uxtb	r0, r3
 80013be:	e001      	b.n	80013c4 <__aeabi_ui2f+0x28>
 80013c0:	2000      	movs	r0, #0
 80013c2:	2500      	movs	r5, #0
 80013c4:	05c0      	lsls	r0, r0, #23
 80013c6:	4328      	orrs	r0, r5
 80013c8:	bd70      	pop	{r4, r5, r6, pc}
 80013ca:	2b99      	cmp	r3, #153	; 0x99
 80013cc:	dd09      	ble.n	80013e2 <__aeabi_ui2f+0x46>
 80013ce:	0002      	movs	r2, r0
 80013d0:	0029      	movs	r1, r5
 80013d2:	321b      	adds	r2, #27
 80013d4:	4091      	lsls	r1, r2
 80013d6:	1e4a      	subs	r2, r1, #1
 80013d8:	4191      	sbcs	r1, r2
 80013da:	2205      	movs	r2, #5
 80013dc:	1a12      	subs	r2, r2, r0
 80013de:	40d5      	lsrs	r5, r2
 80013e0:	430d      	orrs	r5, r1
 80013e2:	2c05      	cmp	r4, #5
 80013e4:	dc12      	bgt.n	800140c <__aeabi_ui2f+0x70>
 80013e6:	0029      	movs	r1, r5
 80013e8:	4e0c      	ldr	r6, [pc, #48]	; (800141c <__aeabi_ui2f+0x80>)
 80013ea:	4031      	ands	r1, r6
 80013ec:	076a      	lsls	r2, r5, #29
 80013ee:	d009      	beq.n	8001404 <__aeabi_ui2f+0x68>
 80013f0:	200f      	movs	r0, #15
 80013f2:	4028      	ands	r0, r5
 80013f4:	2804      	cmp	r0, #4
 80013f6:	d005      	beq.n	8001404 <__aeabi_ui2f+0x68>
 80013f8:	3104      	adds	r1, #4
 80013fa:	014a      	lsls	r2, r1, #5
 80013fc:	d502      	bpl.n	8001404 <__aeabi_ui2f+0x68>
 80013fe:	239f      	movs	r3, #159	; 0x9f
 8001400:	4031      	ands	r1, r6
 8001402:	1b1b      	subs	r3, r3, r4
 8001404:	0189      	lsls	r1, r1, #6
 8001406:	0a4d      	lsrs	r5, r1, #9
 8001408:	b2d8      	uxtb	r0, r3
 800140a:	e7db      	b.n	80013c4 <__aeabi_ui2f+0x28>
 800140c:	1f62      	subs	r2, r4, #5
 800140e:	4095      	lsls	r5, r2
 8001410:	0029      	movs	r1, r5
 8001412:	4e02      	ldr	r6, [pc, #8]	; (800141c <__aeabi_ui2f+0x80>)
 8001414:	4031      	ands	r1, r6
 8001416:	076a      	lsls	r2, r5, #29
 8001418:	d0f4      	beq.n	8001404 <__aeabi_ui2f+0x68>
 800141a:	e7e9      	b.n	80013f0 <__aeabi_ui2f+0x54>
 800141c:	fbffffff 	.word	0xfbffffff

08001420 <__aeabi_ddiv>:
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	4657      	mov	r7, sl
 8001424:	464e      	mov	r6, r9
 8001426:	4645      	mov	r5, r8
 8001428:	46de      	mov	lr, fp
 800142a:	b5e0      	push	{r5, r6, r7, lr}
 800142c:	4681      	mov	r9, r0
 800142e:	0005      	movs	r5, r0
 8001430:	030c      	lsls	r4, r1, #12
 8001432:	0048      	lsls	r0, r1, #1
 8001434:	4692      	mov	sl, r2
 8001436:	001f      	movs	r7, r3
 8001438:	b085      	sub	sp, #20
 800143a:	0b24      	lsrs	r4, r4, #12
 800143c:	0d40      	lsrs	r0, r0, #21
 800143e:	0fce      	lsrs	r6, r1, #31
 8001440:	2800      	cmp	r0, #0
 8001442:	d100      	bne.n	8001446 <__aeabi_ddiv+0x26>
 8001444:	e156      	b.n	80016f4 <__aeabi_ddiv+0x2d4>
 8001446:	4bd4      	ldr	r3, [pc, #848]	; (8001798 <__aeabi_ddiv+0x378>)
 8001448:	4298      	cmp	r0, r3
 800144a:	d100      	bne.n	800144e <__aeabi_ddiv+0x2e>
 800144c:	e172      	b.n	8001734 <__aeabi_ddiv+0x314>
 800144e:	0f6b      	lsrs	r3, r5, #29
 8001450:	00e4      	lsls	r4, r4, #3
 8001452:	431c      	orrs	r4, r3
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	041b      	lsls	r3, r3, #16
 8001458:	4323      	orrs	r3, r4
 800145a:	4698      	mov	r8, r3
 800145c:	4bcf      	ldr	r3, [pc, #828]	; (800179c <__aeabi_ddiv+0x37c>)
 800145e:	00ed      	lsls	r5, r5, #3
 8001460:	469b      	mov	fp, r3
 8001462:	2300      	movs	r3, #0
 8001464:	4699      	mov	r9, r3
 8001466:	4483      	add	fp, r0
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	033c      	lsls	r4, r7, #12
 800146c:	007b      	lsls	r3, r7, #1
 800146e:	4650      	mov	r0, sl
 8001470:	0b24      	lsrs	r4, r4, #12
 8001472:	0d5b      	lsrs	r3, r3, #21
 8001474:	0fff      	lsrs	r7, r7, #31
 8001476:	2b00      	cmp	r3, #0
 8001478:	d100      	bne.n	800147c <__aeabi_ddiv+0x5c>
 800147a:	e11f      	b.n	80016bc <__aeabi_ddiv+0x29c>
 800147c:	4ac6      	ldr	r2, [pc, #792]	; (8001798 <__aeabi_ddiv+0x378>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d100      	bne.n	8001484 <__aeabi_ddiv+0x64>
 8001482:	e162      	b.n	800174a <__aeabi_ddiv+0x32a>
 8001484:	49c5      	ldr	r1, [pc, #788]	; (800179c <__aeabi_ddiv+0x37c>)
 8001486:	0f42      	lsrs	r2, r0, #29
 8001488:	468c      	mov	ip, r1
 800148a:	00e4      	lsls	r4, r4, #3
 800148c:	4659      	mov	r1, fp
 800148e:	4314      	orrs	r4, r2
 8001490:	2280      	movs	r2, #128	; 0x80
 8001492:	4463      	add	r3, ip
 8001494:	0412      	lsls	r2, r2, #16
 8001496:	1acb      	subs	r3, r1, r3
 8001498:	4314      	orrs	r4, r2
 800149a:	469b      	mov	fp, r3
 800149c:	00c2      	lsls	r2, r0, #3
 800149e:	2000      	movs	r0, #0
 80014a0:	0033      	movs	r3, r6
 80014a2:	407b      	eors	r3, r7
 80014a4:	469a      	mov	sl, r3
 80014a6:	464b      	mov	r3, r9
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d827      	bhi.n	80014fc <__aeabi_ddiv+0xdc>
 80014ac:	49bc      	ldr	r1, [pc, #752]	; (80017a0 <__aeabi_ddiv+0x380>)
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	58cb      	ldr	r3, [r1, r3]
 80014b2:	469f      	mov	pc, r3
 80014b4:	46b2      	mov	sl, r6
 80014b6:	9b00      	ldr	r3, [sp, #0]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d016      	beq.n	80014ea <__aeabi_ddiv+0xca>
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d100      	bne.n	80014c2 <__aeabi_ddiv+0xa2>
 80014c0:	e28e      	b.n	80019e0 <__aeabi_ddiv+0x5c0>
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d000      	beq.n	80014c8 <__aeabi_ddiv+0xa8>
 80014c6:	e0d9      	b.n	800167c <__aeabi_ddiv+0x25c>
 80014c8:	2300      	movs	r3, #0
 80014ca:	2400      	movs	r4, #0
 80014cc:	2500      	movs	r5, #0
 80014ce:	4652      	mov	r2, sl
 80014d0:	051b      	lsls	r3, r3, #20
 80014d2:	4323      	orrs	r3, r4
 80014d4:	07d2      	lsls	r2, r2, #31
 80014d6:	4313      	orrs	r3, r2
 80014d8:	0028      	movs	r0, r5
 80014da:	0019      	movs	r1, r3
 80014dc:	b005      	add	sp, #20
 80014de:	bcf0      	pop	{r4, r5, r6, r7}
 80014e0:	46bb      	mov	fp, r7
 80014e2:	46b2      	mov	sl, r6
 80014e4:	46a9      	mov	r9, r5
 80014e6:	46a0      	mov	r8, r4
 80014e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ea:	2400      	movs	r4, #0
 80014ec:	2500      	movs	r5, #0
 80014ee:	4baa      	ldr	r3, [pc, #680]	; (8001798 <__aeabi_ddiv+0x378>)
 80014f0:	e7ed      	b.n	80014ce <__aeabi_ddiv+0xae>
 80014f2:	46ba      	mov	sl, r7
 80014f4:	46a0      	mov	r8, r4
 80014f6:	0015      	movs	r5, r2
 80014f8:	9000      	str	r0, [sp, #0]
 80014fa:	e7dc      	b.n	80014b6 <__aeabi_ddiv+0x96>
 80014fc:	4544      	cmp	r4, r8
 80014fe:	d200      	bcs.n	8001502 <__aeabi_ddiv+0xe2>
 8001500:	e1c7      	b.n	8001892 <__aeabi_ddiv+0x472>
 8001502:	d100      	bne.n	8001506 <__aeabi_ddiv+0xe6>
 8001504:	e1c2      	b.n	800188c <__aeabi_ddiv+0x46c>
 8001506:	2301      	movs	r3, #1
 8001508:	425b      	negs	r3, r3
 800150a:	469c      	mov	ip, r3
 800150c:	002e      	movs	r6, r5
 800150e:	4640      	mov	r0, r8
 8001510:	2500      	movs	r5, #0
 8001512:	44e3      	add	fp, ip
 8001514:	0223      	lsls	r3, r4, #8
 8001516:	0e14      	lsrs	r4, r2, #24
 8001518:	431c      	orrs	r4, r3
 800151a:	0c1b      	lsrs	r3, r3, #16
 800151c:	4699      	mov	r9, r3
 800151e:	0423      	lsls	r3, r4, #16
 8001520:	0c1f      	lsrs	r7, r3, #16
 8001522:	0212      	lsls	r2, r2, #8
 8001524:	4649      	mov	r1, r9
 8001526:	9200      	str	r2, [sp, #0]
 8001528:	9701      	str	r7, [sp, #4]
 800152a:	f7fe fe71 	bl	8000210 <__aeabi_uidivmod>
 800152e:	0002      	movs	r2, r0
 8001530:	437a      	muls	r2, r7
 8001532:	040b      	lsls	r3, r1, #16
 8001534:	0c31      	lsrs	r1, r6, #16
 8001536:	4680      	mov	r8, r0
 8001538:	4319      	orrs	r1, r3
 800153a:	428a      	cmp	r2, r1
 800153c:	d907      	bls.n	800154e <__aeabi_ddiv+0x12e>
 800153e:	2301      	movs	r3, #1
 8001540:	425b      	negs	r3, r3
 8001542:	469c      	mov	ip, r3
 8001544:	1909      	adds	r1, r1, r4
 8001546:	44e0      	add	r8, ip
 8001548:	428c      	cmp	r4, r1
 800154a:	d800      	bhi.n	800154e <__aeabi_ddiv+0x12e>
 800154c:	e207      	b.n	800195e <__aeabi_ddiv+0x53e>
 800154e:	1a88      	subs	r0, r1, r2
 8001550:	4649      	mov	r1, r9
 8001552:	f7fe fe5d 	bl	8000210 <__aeabi_uidivmod>
 8001556:	0409      	lsls	r1, r1, #16
 8001558:	468c      	mov	ip, r1
 800155a:	0431      	lsls	r1, r6, #16
 800155c:	4666      	mov	r6, ip
 800155e:	9a01      	ldr	r2, [sp, #4]
 8001560:	0c09      	lsrs	r1, r1, #16
 8001562:	4342      	muls	r2, r0
 8001564:	0003      	movs	r3, r0
 8001566:	4331      	orrs	r1, r6
 8001568:	428a      	cmp	r2, r1
 800156a:	d904      	bls.n	8001576 <__aeabi_ddiv+0x156>
 800156c:	1909      	adds	r1, r1, r4
 800156e:	3b01      	subs	r3, #1
 8001570:	428c      	cmp	r4, r1
 8001572:	d800      	bhi.n	8001576 <__aeabi_ddiv+0x156>
 8001574:	e1ed      	b.n	8001952 <__aeabi_ddiv+0x532>
 8001576:	1a88      	subs	r0, r1, r2
 8001578:	4642      	mov	r2, r8
 800157a:	0412      	lsls	r2, r2, #16
 800157c:	431a      	orrs	r2, r3
 800157e:	4690      	mov	r8, r2
 8001580:	4641      	mov	r1, r8
 8001582:	9b00      	ldr	r3, [sp, #0]
 8001584:	040e      	lsls	r6, r1, #16
 8001586:	0c1b      	lsrs	r3, r3, #16
 8001588:	001f      	movs	r7, r3
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	9b00      	ldr	r3, [sp, #0]
 800158e:	0c36      	lsrs	r6, r6, #16
 8001590:	041b      	lsls	r3, r3, #16
 8001592:	0c19      	lsrs	r1, r3, #16
 8001594:	000b      	movs	r3, r1
 8001596:	4373      	muls	r3, r6
 8001598:	0c12      	lsrs	r2, r2, #16
 800159a:	437e      	muls	r6, r7
 800159c:	9103      	str	r1, [sp, #12]
 800159e:	4351      	muls	r1, r2
 80015a0:	437a      	muls	r2, r7
 80015a2:	0c1f      	lsrs	r7, r3, #16
 80015a4:	46bc      	mov	ip, r7
 80015a6:	1876      	adds	r6, r6, r1
 80015a8:	4466      	add	r6, ip
 80015aa:	42b1      	cmp	r1, r6
 80015ac:	d903      	bls.n	80015b6 <__aeabi_ddiv+0x196>
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	0249      	lsls	r1, r1, #9
 80015b2:	468c      	mov	ip, r1
 80015b4:	4462      	add	r2, ip
 80015b6:	0c31      	lsrs	r1, r6, #16
 80015b8:	188a      	adds	r2, r1, r2
 80015ba:	0431      	lsls	r1, r6, #16
 80015bc:	041e      	lsls	r6, r3, #16
 80015be:	0c36      	lsrs	r6, r6, #16
 80015c0:	198e      	adds	r6, r1, r6
 80015c2:	4290      	cmp	r0, r2
 80015c4:	d302      	bcc.n	80015cc <__aeabi_ddiv+0x1ac>
 80015c6:	d112      	bne.n	80015ee <__aeabi_ddiv+0x1ce>
 80015c8:	42b5      	cmp	r5, r6
 80015ca:	d210      	bcs.n	80015ee <__aeabi_ddiv+0x1ce>
 80015cc:	4643      	mov	r3, r8
 80015ce:	1e59      	subs	r1, r3, #1
 80015d0:	9b00      	ldr	r3, [sp, #0]
 80015d2:	469c      	mov	ip, r3
 80015d4:	4465      	add	r5, ip
 80015d6:	001f      	movs	r7, r3
 80015d8:	429d      	cmp	r5, r3
 80015da:	419b      	sbcs	r3, r3
 80015dc:	425b      	negs	r3, r3
 80015de:	191b      	adds	r3, r3, r4
 80015e0:	18c0      	adds	r0, r0, r3
 80015e2:	4284      	cmp	r4, r0
 80015e4:	d200      	bcs.n	80015e8 <__aeabi_ddiv+0x1c8>
 80015e6:	e1a0      	b.n	800192a <__aeabi_ddiv+0x50a>
 80015e8:	d100      	bne.n	80015ec <__aeabi_ddiv+0x1cc>
 80015ea:	e19b      	b.n	8001924 <__aeabi_ddiv+0x504>
 80015ec:	4688      	mov	r8, r1
 80015ee:	1bae      	subs	r6, r5, r6
 80015f0:	42b5      	cmp	r5, r6
 80015f2:	41ad      	sbcs	r5, r5
 80015f4:	1a80      	subs	r0, r0, r2
 80015f6:	426d      	negs	r5, r5
 80015f8:	1b40      	subs	r0, r0, r5
 80015fa:	4284      	cmp	r4, r0
 80015fc:	d100      	bne.n	8001600 <__aeabi_ddiv+0x1e0>
 80015fe:	e1d5      	b.n	80019ac <__aeabi_ddiv+0x58c>
 8001600:	4649      	mov	r1, r9
 8001602:	f7fe fe05 	bl	8000210 <__aeabi_uidivmod>
 8001606:	9a01      	ldr	r2, [sp, #4]
 8001608:	040b      	lsls	r3, r1, #16
 800160a:	4342      	muls	r2, r0
 800160c:	0c31      	lsrs	r1, r6, #16
 800160e:	0005      	movs	r5, r0
 8001610:	4319      	orrs	r1, r3
 8001612:	428a      	cmp	r2, r1
 8001614:	d900      	bls.n	8001618 <__aeabi_ddiv+0x1f8>
 8001616:	e16c      	b.n	80018f2 <__aeabi_ddiv+0x4d2>
 8001618:	1a88      	subs	r0, r1, r2
 800161a:	4649      	mov	r1, r9
 800161c:	f7fe fdf8 	bl	8000210 <__aeabi_uidivmod>
 8001620:	9a01      	ldr	r2, [sp, #4]
 8001622:	0436      	lsls	r6, r6, #16
 8001624:	4342      	muls	r2, r0
 8001626:	0409      	lsls	r1, r1, #16
 8001628:	0c36      	lsrs	r6, r6, #16
 800162a:	0003      	movs	r3, r0
 800162c:	430e      	orrs	r6, r1
 800162e:	42b2      	cmp	r2, r6
 8001630:	d900      	bls.n	8001634 <__aeabi_ddiv+0x214>
 8001632:	e153      	b.n	80018dc <__aeabi_ddiv+0x4bc>
 8001634:	9803      	ldr	r0, [sp, #12]
 8001636:	1ab6      	subs	r6, r6, r2
 8001638:	0002      	movs	r2, r0
 800163a:	042d      	lsls	r5, r5, #16
 800163c:	431d      	orrs	r5, r3
 800163e:	9f02      	ldr	r7, [sp, #8]
 8001640:	042b      	lsls	r3, r5, #16
 8001642:	0c1b      	lsrs	r3, r3, #16
 8001644:	435a      	muls	r2, r3
 8001646:	437b      	muls	r3, r7
 8001648:	469c      	mov	ip, r3
 800164a:	0c29      	lsrs	r1, r5, #16
 800164c:	4348      	muls	r0, r1
 800164e:	0c13      	lsrs	r3, r2, #16
 8001650:	4484      	add	ip, r0
 8001652:	4463      	add	r3, ip
 8001654:	4379      	muls	r1, r7
 8001656:	4298      	cmp	r0, r3
 8001658:	d903      	bls.n	8001662 <__aeabi_ddiv+0x242>
 800165a:	2080      	movs	r0, #128	; 0x80
 800165c:	0240      	lsls	r0, r0, #9
 800165e:	4684      	mov	ip, r0
 8001660:	4461      	add	r1, ip
 8001662:	0c18      	lsrs	r0, r3, #16
 8001664:	0412      	lsls	r2, r2, #16
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	0c12      	lsrs	r2, r2, #16
 800166a:	1841      	adds	r1, r0, r1
 800166c:	189b      	adds	r3, r3, r2
 800166e:	428e      	cmp	r6, r1
 8001670:	d200      	bcs.n	8001674 <__aeabi_ddiv+0x254>
 8001672:	e0ff      	b.n	8001874 <__aeabi_ddiv+0x454>
 8001674:	d100      	bne.n	8001678 <__aeabi_ddiv+0x258>
 8001676:	e0fa      	b.n	800186e <__aeabi_ddiv+0x44e>
 8001678:	2301      	movs	r3, #1
 800167a:	431d      	orrs	r5, r3
 800167c:	4a49      	ldr	r2, [pc, #292]	; (80017a4 <__aeabi_ddiv+0x384>)
 800167e:	445a      	add	r2, fp
 8001680:	2a00      	cmp	r2, #0
 8001682:	dc00      	bgt.n	8001686 <__aeabi_ddiv+0x266>
 8001684:	e0aa      	b.n	80017dc <__aeabi_ddiv+0x3bc>
 8001686:	076b      	lsls	r3, r5, #29
 8001688:	d000      	beq.n	800168c <__aeabi_ddiv+0x26c>
 800168a:	e13d      	b.n	8001908 <__aeabi_ddiv+0x4e8>
 800168c:	08ed      	lsrs	r5, r5, #3
 800168e:	4643      	mov	r3, r8
 8001690:	01db      	lsls	r3, r3, #7
 8001692:	d506      	bpl.n	80016a2 <__aeabi_ddiv+0x282>
 8001694:	4642      	mov	r2, r8
 8001696:	4b44      	ldr	r3, [pc, #272]	; (80017a8 <__aeabi_ddiv+0x388>)
 8001698:	401a      	ands	r2, r3
 800169a:	4690      	mov	r8, r2
 800169c:	2280      	movs	r2, #128	; 0x80
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	445a      	add	r2, fp
 80016a2:	4b42      	ldr	r3, [pc, #264]	; (80017ac <__aeabi_ddiv+0x38c>)
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dd00      	ble.n	80016aa <__aeabi_ddiv+0x28a>
 80016a8:	e71f      	b.n	80014ea <__aeabi_ddiv+0xca>
 80016aa:	4643      	mov	r3, r8
 80016ac:	075b      	lsls	r3, r3, #29
 80016ae:	431d      	orrs	r5, r3
 80016b0:	4643      	mov	r3, r8
 80016b2:	0552      	lsls	r2, r2, #21
 80016b4:	025c      	lsls	r4, r3, #9
 80016b6:	0b24      	lsrs	r4, r4, #12
 80016b8:	0d53      	lsrs	r3, r2, #21
 80016ba:	e708      	b.n	80014ce <__aeabi_ddiv+0xae>
 80016bc:	4652      	mov	r2, sl
 80016be:	4322      	orrs	r2, r4
 80016c0:	d100      	bne.n	80016c4 <__aeabi_ddiv+0x2a4>
 80016c2:	e07b      	b.n	80017bc <__aeabi_ddiv+0x39c>
 80016c4:	2c00      	cmp	r4, #0
 80016c6:	d100      	bne.n	80016ca <__aeabi_ddiv+0x2aa>
 80016c8:	e0fa      	b.n	80018c0 <__aeabi_ddiv+0x4a0>
 80016ca:	0020      	movs	r0, r4
 80016cc:	f001 f99e 	bl	8002a0c <__clzsi2>
 80016d0:	0002      	movs	r2, r0
 80016d2:	3a0b      	subs	r2, #11
 80016d4:	231d      	movs	r3, #29
 80016d6:	0001      	movs	r1, r0
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	4652      	mov	r2, sl
 80016dc:	3908      	subs	r1, #8
 80016de:	40da      	lsrs	r2, r3
 80016e0:	408c      	lsls	r4, r1
 80016e2:	4314      	orrs	r4, r2
 80016e4:	4652      	mov	r2, sl
 80016e6:	408a      	lsls	r2, r1
 80016e8:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <__aeabi_ddiv+0x390>)
 80016ea:	4458      	add	r0, fp
 80016ec:	469b      	mov	fp, r3
 80016ee:	4483      	add	fp, r0
 80016f0:	2000      	movs	r0, #0
 80016f2:	e6d5      	b.n	80014a0 <__aeabi_ddiv+0x80>
 80016f4:	464b      	mov	r3, r9
 80016f6:	4323      	orrs	r3, r4
 80016f8:	4698      	mov	r8, r3
 80016fa:	d044      	beq.n	8001786 <__aeabi_ddiv+0x366>
 80016fc:	2c00      	cmp	r4, #0
 80016fe:	d100      	bne.n	8001702 <__aeabi_ddiv+0x2e2>
 8001700:	e0ce      	b.n	80018a0 <__aeabi_ddiv+0x480>
 8001702:	0020      	movs	r0, r4
 8001704:	f001 f982 	bl	8002a0c <__clzsi2>
 8001708:	0001      	movs	r1, r0
 800170a:	0002      	movs	r2, r0
 800170c:	390b      	subs	r1, #11
 800170e:	231d      	movs	r3, #29
 8001710:	1a5b      	subs	r3, r3, r1
 8001712:	4649      	mov	r1, r9
 8001714:	0010      	movs	r0, r2
 8001716:	40d9      	lsrs	r1, r3
 8001718:	3808      	subs	r0, #8
 800171a:	4084      	lsls	r4, r0
 800171c:	000b      	movs	r3, r1
 800171e:	464d      	mov	r5, r9
 8001720:	4323      	orrs	r3, r4
 8001722:	4698      	mov	r8, r3
 8001724:	4085      	lsls	r5, r0
 8001726:	4823      	ldr	r0, [pc, #140]	; (80017b4 <__aeabi_ddiv+0x394>)
 8001728:	1a83      	subs	r3, r0, r2
 800172a:	469b      	mov	fp, r3
 800172c:	2300      	movs	r3, #0
 800172e:	4699      	mov	r9, r3
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	e69a      	b.n	800146a <__aeabi_ddiv+0x4a>
 8001734:	464b      	mov	r3, r9
 8001736:	4323      	orrs	r3, r4
 8001738:	4698      	mov	r8, r3
 800173a:	d11d      	bne.n	8001778 <__aeabi_ddiv+0x358>
 800173c:	2308      	movs	r3, #8
 800173e:	4699      	mov	r9, r3
 8001740:	3b06      	subs	r3, #6
 8001742:	2500      	movs	r5, #0
 8001744:	4683      	mov	fp, r0
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	e68f      	b.n	800146a <__aeabi_ddiv+0x4a>
 800174a:	4652      	mov	r2, sl
 800174c:	4322      	orrs	r2, r4
 800174e:	d109      	bne.n	8001764 <__aeabi_ddiv+0x344>
 8001750:	2302      	movs	r3, #2
 8001752:	4649      	mov	r1, r9
 8001754:	4319      	orrs	r1, r3
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <__aeabi_ddiv+0x398>)
 8001758:	4689      	mov	r9, r1
 800175a:	469c      	mov	ip, r3
 800175c:	2400      	movs	r4, #0
 800175e:	2002      	movs	r0, #2
 8001760:	44e3      	add	fp, ip
 8001762:	e69d      	b.n	80014a0 <__aeabi_ddiv+0x80>
 8001764:	2303      	movs	r3, #3
 8001766:	464a      	mov	r2, r9
 8001768:	431a      	orrs	r2, r3
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <__aeabi_ddiv+0x398>)
 800176c:	4691      	mov	r9, r2
 800176e:	469c      	mov	ip, r3
 8001770:	4652      	mov	r2, sl
 8001772:	2003      	movs	r0, #3
 8001774:	44e3      	add	fp, ip
 8001776:	e693      	b.n	80014a0 <__aeabi_ddiv+0x80>
 8001778:	230c      	movs	r3, #12
 800177a:	4699      	mov	r9, r3
 800177c:	3b09      	subs	r3, #9
 800177e:	46a0      	mov	r8, r4
 8001780:	4683      	mov	fp, r0
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	e671      	b.n	800146a <__aeabi_ddiv+0x4a>
 8001786:	2304      	movs	r3, #4
 8001788:	4699      	mov	r9, r3
 800178a:	2300      	movs	r3, #0
 800178c:	469b      	mov	fp, r3
 800178e:	3301      	adds	r3, #1
 8001790:	2500      	movs	r5, #0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	e669      	b.n	800146a <__aeabi_ddiv+0x4a>
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	000007ff 	.word	0x000007ff
 800179c:	fffffc01 	.word	0xfffffc01
 80017a0:	080080d8 	.word	0x080080d8
 80017a4:	000003ff 	.word	0x000003ff
 80017a8:	feffffff 	.word	0xfeffffff
 80017ac:	000007fe 	.word	0x000007fe
 80017b0:	000003f3 	.word	0x000003f3
 80017b4:	fffffc0d 	.word	0xfffffc0d
 80017b8:	fffff801 	.word	0xfffff801
 80017bc:	4649      	mov	r1, r9
 80017be:	2301      	movs	r3, #1
 80017c0:	4319      	orrs	r1, r3
 80017c2:	4689      	mov	r9, r1
 80017c4:	2400      	movs	r4, #0
 80017c6:	2001      	movs	r0, #1
 80017c8:	e66a      	b.n	80014a0 <__aeabi_ddiv+0x80>
 80017ca:	2300      	movs	r3, #0
 80017cc:	2480      	movs	r4, #128	; 0x80
 80017ce:	469a      	mov	sl, r3
 80017d0:	2500      	movs	r5, #0
 80017d2:	4b8a      	ldr	r3, [pc, #552]	; (80019fc <__aeabi_ddiv+0x5dc>)
 80017d4:	0324      	lsls	r4, r4, #12
 80017d6:	e67a      	b.n	80014ce <__aeabi_ddiv+0xae>
 80017d8:	2501      	movs	r5, #1
 80017da:	426d      	negs	r5, r5
 80017dc:	2301      	movs	r3, #1
 80017de:	1a9b      	subs	r3, r3, r2
 80017e0:	2b38      	cmp	r3, #56	; 0x38
 80017e2:	dd00      	ble.n	80017e6 <__aeabi_ddiv+0x3c6>
 80017e4:	e670      	b.n	80014c8 <__aeabi_ddiv+0xa8>
 80017e6:	2b1f      	cmp	r3, #31
 80017e8:	dc00      	bgt.n	80017ec <__aeabi_ddiv+0x3cc>
 80017ea:	e0bf      	b.n	800196c <__aeabi_ddiv+0x54c>
 80017ec:	211f      	movs	r1, #31
 80017ee:	4249      	negs	r1, r1
 80017f0:	1a8a      	subs	r2, r1, r2
 80017f2:	4641      	mov	r1, r8
 80017f4:	40d1      	lsrs	r1, r2
 80017f6:	000a      	movs	r2, r1
 80017f8:	2b20      	cmp	r3, #32
 80017fa:	d004      	beq.n	8001806 <__aeabi_ddiv+0x3e6>
 80017fc:	4641      	mov	r1, r8
 80017fe:	4b80      	ldr	r3, [pc, #512]	; (8001a00 <__aeabi_ddiv+0x5e0>)
 8001800:	445b      	add	r3, fp
 8001802:	4099      	lsls	r1, r3
 8001804:	430d      	orrs	r5, r1
 8001806:	1e6b      	subs	r3, r5, #1
 8001808:	419d      	sbcs	r5, r3
 800180a:	2307      	movs	r3, #7
 800180c:	432a      	orrs	r2, r5
 800180e:	001d      	movs	r5, r3
 8001810:	2400      	movs	r4, #0
 8001812:	4015      	ands	r5, r2
 8001814:	4213      	tst	r3, r2
 8001816:	d100      	bne.n	800181a <__aeabi_ddiv+0x3fa>
 8001818:	e0d4      	b.n	80019c4 <__aeabi_ddiv+0x5a4>
 800181a:	210f      	movs	r1, #15
 800181c:	2300      	movs	r3, #0
 800181e:	4011      	ands	r1, r2
 8001820:	2904      	cmp	r1, #4
 8001822:	d100      	bne.n	8001826 <__aeabi_ddiv+0x406>
 8001824:	e0cb      	b.n	80019be <__aeabi_ddiv+0x59e>
 8001826:	1d11      	adds	r1, r2, #4
 8001828:	4291      	cmp	r1, r2
 800182a:	4192      	sbcs	r2, r2
 800182c:	4252      	negs	r2, r2
 800182e:	189b      	adds	r3, r3, r2
 8001830:	000a      	movs	r2, r1
 8001832:	0219      	lsls	r1, r3, #8
 8001834:	d400      	bmi.n	8001838 <__aeabi_ddiv+0x418>
 8001836:	e0c2      	b.n	80019be <__aeabi_ddiv+0x59e>
 8001838:	2301      	movs	r3, #1
 800183a:	2400      	movs	r4, #0
 800183c:	2500      	movs	r5, #0
 800183e:	e646      	b.n	80014ce <__aeabi_ddiv+0xae>
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	4641      	mov	r1, r8
 8001844:	031b      	lsls	r3, r3, #12
 8001846:	4219      	tst	r1, r3
 8001848:	d008      	beq.n	800185c <__aeabi_ddiv+0x43c>
 800184a:	421c      	tst	r4, r3
 800184c:	d106      	bne.n	800185c <__aeabi_ddiv+0x43c>
 800184e:	431c      	orrs	r4, r3
 8001850:	0324      	lsls	r4, r4, #12
 8001852:	46ba      	mov	sl, r7
 8001854:	0015      	movs	r5, r2
 8001856:	4b69      	ldr	r3, [pc, #420]	; (80019fc <__aeabi_ddiv+0x5dc>)
 8001858:	0b24      	lsrs	r4, r4, #12
 800185a:	e638      	b.n	80014ce <__aeabi_ddiv+0xae>
 800185c:	2480      	movs	r4, #128	; 0x80
 800185e:	4643      	mov	r3, r8
 8001860:	0324      	lsls	r4, r4, #12
 8001862:	431c      	orrs	r4, r3
 8001864:	0324      	lsls	r4, r4, #12
 8001866:	46b2      	mov	sl, r6
 8001868:	4b64      	ldr	r3, [pc, #400]	; (80019fc <__aeabi_ddiv+0x5dc>)
 800186a:	0b24      	lsrs	r4, r4, #12
 800186c:	e62f      	b.n	80014ce <__aeabi_ddiv+0xae>
 800186e:	2b00      	cmp	r3, #0
 8001870:	d100      	bne.n	8001874 <__aeabi_ddiv+0x454>
 8001872:	e703      	b.n	800167c <__aeabi_ddiv+0x25c>
 8001874:	19a6      	adds	r6, r4, r6
 8001876:	1e68      	subs	r0, r5, #1
 8001878:	42a6      	cmp	r6, r4
 800187a:	d200      	bcs.n	800187e <__aeabi_ddiv+0x45e>
 800187c:	e08d      	b.n	800199a <__aeabi_ddiv+0x57a>
 800187e:	428e      	cmp	r6, r1
 8001880:	d200      	bcs.n	8001884 <__aeabi_ddiv+0x464>
 8001882:	e0a3      	b.n	80019cc <__aeabi_ddiv+0x5ac>
 8001884:	d100      	bne.n	8001888 <__aeabi_ddiv+0x468>
 8001886:	e0b3      	b.n	80019f0 <__aeabi_ddiv+0x5d0>
 8001888:	0005      	movs	r5, r0
 800188a:	e6f5      	b.n	8001678 <__aeabi_ddiv+0x258>
 800188c:	42aa      	cmp	r2, r5
 800188e:	d900      	bls.n	8001892 <__aeabi_ddiv+0x472>
 8001890:	e639      	b.n	8001506 <__aeabi_ddiv+0xe6>
 8001892:	4643      	mov	r3, r8
 8001894:	07de      	lsls	r6, r3, #31
 8001896:	0858      	lsrs	r0, r3, #1
 8001898:	086b      	lsrs	r3, r5, #1
 800189a:	431e      	orrs	r6, r3
 800189c:	07ed      	lsls	r5, r5, #31
 800189e:	e639      	b.n	8001514 <__aeabi_ddiv+0xf4>
 80018a0:	4648      	mov	r0, r9
 80018a2:	f001 f8b3 	bl	8002a0c <__clzsi2>
 80018a6:	0001      	movs	r1, r0
 80018a8:	0002      	movs	r2, r0
 80018aa:	3115      	adds	r1, #21
 80018ac:	3220      	adds	r2, #32
 80018ae:	291c      	cmp	r1, #28
 80018b0:	dc00      	bgt.n	80018b4 <__aeabi_ddiv+0x494>
 80018b2:	e72c      	b.n	800170e <__aeabi_ddiv+0x2ee>
 80018b4:	464b      	mov	r3, r9
 80018b6:	3808      	subs	r0, #8
 80018b8:	4083      	lsls	r3, r0
 80018ba:	2500      	movs	r5, #0
 80018bc:	4698      	mov	r8, r3
 80018be:	e732      	b.n	8001726 <__aeabi_ddiv+0x306>
 80018c0:	f001 f8a4 	bl	8002a0c <__clzsi2>
 80018c4:	0003      	movs	r3, r0
 80018c6:	001a      	movs	r2, r3
 80018c8:	3215      	adds	r2, #21
 80018ca:	3020      	adds	r0, #32
 80018cc:	2a1c      	cmp	r2, #28
 80018ce:	dc00      	bgt.n	80018d2 <__aeabi_ddiv+0x4b2>
 80018d0:	e700      	b.n	80016d4 <__aeabi_ddiv+0x2b4>
 80018d2:	4654      	mov	r4, sl
 80018d4:	3b08      	subs	r3, #8
 80018d6:	2200      	movs	r2, #0
 80018d8:	409c      	lsls	r4, r3
 80018da:	e705      	b.n	80016e8 <__aeabi_ddiv+0x2c8>
 80018dc:	1936      	adds	r6, r6, r4
 80018de:	3b01      	subs	r3, #1
 80018e0:	42b4      	cmp	r4, r6
 80018e2:	d900      	bls.n	80018e6 <__aeabi_ddiv+0x4c6>
 80018e4:	e6a6      	b.n	8001634 <__aeabi_ddiv+0x214>
 80018e6:	42b2      	cmp	r2, r6
 80018e8:	d800      	bhi.n	80018ec <__aeabi_ddiv+0x4cc>
 80018ea:	e6a3      	b.n	8001634 <__aeabi_ddiv+0x214>
 80018ec:	1e83      	subs	r3, r0, #2
 80018ee:	1936      	adds	r6, r6, r4
 80018f0:	e6a0      	b.n	8001634 <__aeabi_ddiv+0x214>
 80018f2:	1909      	adds	r1, r1, r4
 80018f4:	3d01      	subs	r5, #1
 80018f6:	428c      	cmp	r4, r1
 80018f8:	d900      	bls.n	80018fc <__aeabi_ddiv+0x4dc>
 80018fa:	e68d      	b.n	8001618 <__aeabi_ddiv+0x1f8>
 80018fc:	428a      	cmp	r2, r1
 80018fe:	d800      	bhi.n	8001902 <__aeabi_ddiv+0x4e2>
 8001900:	e68a      	b.n	8001618 <__aeabi_ddiv+0x1f8>
 8001902:	1e85      	subs	r5, r0, #2
 8001904:	1909      	adds	r1, r1, r4
 8001906:	e687      	b.n	8001618 <__aeabi_ddiv+0x1f8>
 8001908:	230f      	movs	r3, #15
 800190a:	402b      	ands	r3, r5
 800190c:	2b04      	cmp	r3, #4
 800190e:	d100      	bne.n	8001912 <__aeabi_ddiv+0x4f2>
 8001910:	e6bc      	b.n	800168c <__aeabi_ddiv+0x26c>
 8001912:	2305      	movs	r3, #5
 8001914:	425b      	negs	r3, r3
 8001916:	42ab      	cmp	r3, r5
 8001918:	419b      	sbcs	r3, r3
 800191a:	3504      	adds	r5, #4
 800191c:	425b      	negs	r3, r3
 800191e:	08ed      	lsrs	r5, r5, #3
 8001920:	4498      	add	r8, r3
 8001922:	e6b4      	b.n	800168e <__aeabi_ddiv+0x26e>
 8001924:	42af      	cmp	r7, r5
 8001926:	d900      	bls.n	800192a <__aeabi_ddiv+0x50a>
 8001928:	e660      	b.n	80015ec <__aeabi_ddiv+0x1cc>
 800192a:	4282      	cmp	r2, r0
 800192c:	d804      	bhi.n	8001938 <__aeabi_ddiv+0x518>
 800192e:	d000      	beq.n	8001932 <__aeabi_ddiv+0x512>
 8001930:	e65c      	b.n	80015ec <__aeabi_ddiv+0x1cc>
 8001932:	42ae      	cmp	r6, r5
 8001934:	d800      	bhi.n	8001938 <__aeabi_ddiv+0x518>
 8001936:	e659      	b.n	80015ec <__aeabi_ddiv+0x1cc>
 8001938:	2302      	movs	r3, #2
 800193a:	425b      	negs	r3, r3
 800193c:	469c      	mov	ip, r3
 800193e:	9b00      	ldr	r3, [sp, #0]
 8001940:	44e0      	add	r8, ip
 8001942:	469c      	mov	ip, r3
 8001944:	4465      	add	r5, ip
 8001946:	429d      	cmp	r5, r3
 8001948:	419b      	sbcs	r3, r3
 800194a:	425b      	negs	r3, r3
 800194c:	191b      	adds	r3, r3, r4
 800194e:	18c0      	adds	r0, r0, r3
 8001950:	e64d      	b.n	80015ee <__aeabi_ddiv+0x1ce>
 8001952:	428a      	cmp	r2, r1
 8001954:	d800      	bhi.n	8001958 <__aeabi_ddiv+0x538>
 8001956:	e60e      	b.n	8001576 <__aeabi_ddiv+0x156>
 8001958:	1e83      	subs	r3, r0, #2
 800195a:	1909      	adds	r1, r1, r4
 800195c:	e60b      	b.n	8001576 <__aeabi_ddiv+0x156>
 800195e:	428a      	cmp	r2, r1
 8001960:	d800      	bhi.n	8001964 <__aeabi_ddiv+0x544>
 8001962:	e5f4      	b.n	800154e <__aeabi_ddiv+0x12e>
 8001964:	1e83      	subs	r3, r0, #2
 8001966:	4698      	mov	r8, r3
 8001968:	1909      	adds	r1, r1, r4
 800196a:	e5f0      	b.n	800154e <__aeabi_ddiv+0x12e>
 800196c:	4925      	ldr	r1, [pc, #148]	; (8001a04 <__aeabi_ddiv+0x5e4>)
 800196e:	0028      	movs	r0, r5
 8001970:	4459      	add	r1, fp
 8001972:	408d      	lsls	r5, r1
 8001974:	4642      	mov	r2, r8
 8001976:	408a      	lsls	r2, r1
 8001978:	1e69      	subs	r1, r5, #1
 800197a:	418d      	sbcs	r5, r1
 800197c:	4641      	mov	r1, r8
 800197e:	40d8      	lsrs	r0, r3
 8001980:	40d9      	lsrs	r1, r3
 8001982:	4302      	orrs	r2, r0
 8001984:	432a      	orrs	r2, r5
 8001986:	000b      	movs	r3, r1
 8001988:	0751      	lsls	r1, r2, #29
 800198a:	d100      	bne.n	800198e <__aeabi_ddiv+0x56e>
 800198c:	e751      	b.n	8001832 <__aeabi_ddiv+0x412>
 800198e:	210f      	movs	r1, #15
 8001990:	4011      	ands	r1, r2
 8001992:	2904      	cmp	r1, #4
 8001994:	d000      	beq.n	8001998 <__aeabi_ddiv+0x578>
 8001996:	e746      	b.n	8001826 <__aeabi_ddiv+0x406>
 8001998:	e74b      	b.n	8001832 <__aeabi_ddiv+0x412>
 800199a:	0005      	movs	r5, r0
 800199c:	428e      	cmp	r6, r1
 800199e:	d000      	beq.n	80019a2 <__aeabi_ddiv+0x582>
 80019a0:	e66a      	b.n	8001678 <__aeabi_ddiv+0x258>
 80019a2:	9a00      	ldr	r2, [sp, #0]
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d000      	beq.n	80019aa <__aeabi_ddiv+0x58a>
 80019a8:	e666      	b.n	8001678 <__aeabi_ddiv+0x258>
 80019aa:	e667      	b.n	800167c <__aeabi_ddiv+0x25c>
 80019ac:	4a16      	ldr	r2, [pc, #88]	; (8001a08 <__aeabi_ddiv+0x5e8>)
 80019ae:	445a      	add	r2, fp
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	dc00      	bgt.n	80019b6 <__aeabi_ddiv+0x596>
 80019b4:	e710      	b.n	80017d8 <__aeabi_ddiv+0x3b8>
 80019b6:	2301      	movs	r3, #1
 80019b8:	2500      	movs	r5, #0
 80019ba:	4498      	add	r8, r3
 80019bc:	e667      	b.n	800168e <__aeabi_ddiv+0x26e>
 80019be:	075d      	lsls	r5, r3, #29
 80019c0:	025b      	lsls	r3, r3, #9
 80019c2:	0b1c      	lsrs	r4, r3, #12
 80019c4:	08d2      	lsrs	r2, r2, #3
 80019c6:	2300      	movs	r3, #0
 80019c8:	4315      	orrs	r5, r2
 80019ca:	e580      	b.n	80014ce <__aeabi_ddiv+0xae>
 80019cc:	9800      	ldr	r0, [sp, #0]
 80019ce:	3d02      	subs	r5, #2
 80019d0:	0042      	lsls	r2, r0, #1
 80019d2:	4282      	cmp	r2, r0
 80019d4:	41bf      	sbcs	r7, r7
 80019d6:	427f      	negs	r7, r7
 80019d8:	193c      	adds	r4, r7, r4
 80019da:	1936      	adds	r6, r6, r4
 80019dc:	9200      	str	r2, [sp, #0]
 80019de:	e7dd      	b.n	800199c <__aeabi_ddiv+0x57c>
 80019e0:	2480      	movs	r4, #128	; 0x80
 80019e2:	4643      	mov	r3, r8
 80019e4:	0324      	lsls	r4, r4, #12
 80019e6:	431c      	orrs	r4, r3
 80019e8:	0324      	lsls	r4, r4, #12
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <__aeabi_ddiv+0x5dc>)
 80019ec:	0b24      	lsrs	r4, r4, #12
 80019ee:	e56e      	b.n	80014ce <__aeabi_ddiv+0xae>
 80019f0:	9a00      	ldr	r2, [sp, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d3ea      	bcc.n	80019cc <__aeabi_ddiv+0x5ac>
 80019f6:	0005      	movs	r5, r0
 80019f8:	e7d3      	b.n	80019a2 <__aeabi_ddiv+0x582>
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	000007ff 	.word	0x000007ff
 8001a00:	0000043e 	.word	0x0000043e
 8001a04:	0000041e 	.word	0x0000041e
 8001a08:	000003ff 	.word	0x000003ff

08001a0c <__eqdf2>:
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	464e      	mov	r6, r9
 8001a10:	4645      	mov	r5, r8
 8001a12:	46de      	mov	lr, fp
 8001a14:	4657      	mov	r7, sl
 8001a16:	4690      	mov	r8, r2
 8001a18:	b5e0      	push	{r5, r6, r7, lr}
 8001a1a:	0017      	movs	r7, r2
 8001a1c:	031a      	lsls	r2, r3, #12
 8001a1e:	0b12      	lsrs	r2, r2, #12
 8001a20:	0005      	movs	r5, r0
 8001a22:	4684      	mov	ip, r0
 8001a24:	4819      	ldr	r0, [pc, #100]	; (8001a8c <__eqdf2+0x80>)
 8001a26:	030e      	lsls	r6, r1, #12
 8001a28:	004c      	lsls	r4, r1, #1
 8001a2a:	4691      	mov	r9, r2
 8001a2c:	005a      	lsls	r2, r3, #1
 8001a2e:	0fdb      	lsrs	r3, r3, #31
 8001a30:	469b      	mov	fp, r3
 8001a32:	0b36      	lsrs	r6, r6, #12
 8001a34:	0d64      	lsrs	r4, r4, #21
 8001a36:	0fc9      	lsrs	r1, r1, #31
 8001a38:	0d52      	lsrs	r2, r2, #21
 8001a3a:	4284      	cmp	r4, r0
 8001a3c:	d019      	beq.n	8001a72 <__eqdf2+0x66>
 8001a3e:	4282      	cmp	r2, r0
 8001a40:	d010      	beq.n	8001a64 <__eqdf2+0x58>
 8001a42:	2001      	movs	r0, #1
 8001a44:	4294      	cmp	r4, r2
 8001a46:	d10e      	bne.n	8001a66 <__eqdf2+0x5a>
 8001a48:	454e      	cmp	r6, r9
 8001a4a:	d10c      	bne.n	8001a66 <__eqdf2+0x5a>
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	45c4      	cmp	ip, r8
 8001a50:	d109      	bne.n	8001a66 <__eqdf2+0x5a>
 8001a52:	4559      	cmp	r1, fp
 8001a54:	d017      	beq.n	8001a86 <__eqdf2+0x7a>
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d105      	bne.n	8001a66 <__eqdf2+0x5a>
 8001a5a:	0030      	movs	r0, r6
 8001a5c:	4328      	orrs	r0, r5
 8001a5e:	1e43      	subs	r3, r0, #1
 8001a60:	4198      	sbcs	r0, r3
 8001a62:	e000      	b.n	8001a66 <__eqdf2+0x5a>
 8001a64:	2001      	movs	r0, #1
 8001a66:	bcf0      	pop	{r4, r5, r6, r7}
 8001a68:	46bb      	mov	fp, r7
 8001a6a:	46b2      	mov	sl, r6
 8001a6c:	46a9      	mov	r9, r5
 8001a6e:	46a0      	mov	r8, r4
 8001a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a72:	0033      	movs	r3, r6
 8001a74:	2001      	movs	r0, #1
 8001a76:	432b      	orrs	r3, r5
 8001a78:	d1f5      	bne.n	8001a66 <__eqdf2+0x5a>
 8001a7a:	42a2      	cmp	r2, r4
 8001a7c:	d1f3      	bne.n	8001a66 <__eqdf2+0x5a>
 8001a7e:	464b      	mov	r3, r9
 8001a80:	433b      	orrs	r3, r7
 8001a82:	d1f0      	bne.n	8001a66 <__eqdf2+0x5a>
 8001a84:	e7e2      	b.n	8001a4c <__eqdf2+0x40>
 8001a86:	2000      	movs	r0, #0
 8001a88:	e7ed      	b.n	8001a66 <__eqdf2+0x5a>
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	000007ff 	.word	0x000007ff

08001a90 <__gedf2>:
 8001a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a92:	4647      	mov	r7, r8
 8001a94:	46ce      	mov	lr, r9
 8001a96:	0004      	movs	r4, r0
 8001a98:	0018      	movs	r0, r3
 8001a9a:	0016      	movs	r6, r2
 8001a9c:	031b      	lsls	r3, r3, #12
 8001a9e:	0b1b      	lsrs	r3, r3, #12
 8001aa0:	4d2d      	ldr	r5, [pc, #180]	; (8001b58 <__gedf2+0xc8>)
 8001aa2:	004a      	lsls	r2, r1, #1
 8001aa4:	4699      	mov	r9, r3
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	0043      	lsls	r3, r0, #1
 8001aaa:	030f      	lsls	r7, r1, #12
 8001aac:	46a4      	mov	ip, r4
 8001aae:	46b0      	mov	r8, r6
 8001ab0:	0b3f      	lsrs	r7, r7, #12
 8001ab2:	0d52      	lsrs	r2, r2, #21
 8001ab4:	0fc9      	lsrs	r1, r1, #31
 8001ab6:	0d5b      	lsrs	r3, r3, #21
 8001ab8:	0fc0      	lsrs	r0, r0, #31
 8001aba:	42aa      	cmp	r2, r5
 8001abc:	d021      	beq.n	8001b02 <__gedf2+0x72>
 8001abe:	42ab      	cmp	r3, r5
 8001ac0:	d013      	beq.n	8001aea <__gedf2+0x5a>
 8001ac2:	2a00      	cmp	r2, #0
 8001ac4:	d122      	bne.n	8001b0c <__gedf2+0x7c>
 8001ac6:	433c      	orrs	r4, r7
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <__gedf2+0x42>
 8001acc:	464d      	mov	r5, r9
 8001ace:	432e      	orrs	r6, r5
 8001ad0:	d022      	beq.n	8001b18 <__gedf2+0x88>
 8001ad2:	2c00      	cmp	r4, #0
 8001ad4:	d010      	beq.n	8001af8 <__gedf2+0x68>
 8001ad6:	4281      	cmp	r1, r0
 8001ad8:	d022      	beq.n	8001b20 <__gedf2+0x90>
 8001ada:	2002      	movs	r0, #2
 8001adc:	3901      	subs	r1, #1
 8001ade:	4008      	ands	r0, r1
 8001ae0:	3801      	subs	r0, #1
 8001ae2:	bcc0      	pop	{r6, r7}
 8001ae4:	46b9      	mov	r9, r7
 8001ae6:	46b0      	mov	r8, r6
 8001ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aea:	464d      	mov	r5, r9
 8001aec:	432e      	orrs	r6, r5
 8001aee:	d129      	bne.n	8001b44 <__gedf2+0xb4>
 8001af0:	2a00      	cmp	r2, #0
 8001af2:	d1f0      	bne.n	8001ad6 <__gedf2+0x46>
 8001af4:	433c      	orrs	r4, r7
 8001af6:	d1ee      	bne.n	8001ad6 <__gedf2+0x46>
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d1f2      	bne.n	8001ae2 <__gedf2+0x52>
 8001afc:	2001      	movs	r0, #1
 8001afe:	4240      	negs	r0, r0
 8001b00:	e7ef      	b.n	8001ae2 <__gedf2+0x52>
 8001b02:	003d      	movs	r5, r7
 8001b04:	4325      	orrs	r5, r4
 8001b06:	d11d      	bne.n	8001b44 <__gedf2+0xb4>
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d0ee      	beq.n	8001aea <__gedf2+0x5a>
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1e2      	bne.n	8001ad6 <__gedf2+0x46>
 8001b10:	464c      	mov	r4, r9
 8001b12:	4326      	orrs	r6, r4
 8001b14:	d1df      	bne.n	8001ad6 <__gedf2+0x46>
 8001b16:	e7e0      	b.n	8001ada <__gedf2+0x4a>
 8001b18:	2000      	movs	r0, #0
 8001b1a:	2c00      	cmp	r4, #0
 8001b1c:	d0e1      	beq.n	8001ae2 <__gedf2+0x52>
 8001b1e:	e7dc      	b.n	8001ada <__gedf2+0x4a>
 8001b20:	429a      	cmp	r2, r3
 8001b22:	dc0a      	bgt.n	8001b3a <__gedf2+0xaa>
 8001b24:	dbe8      	blt.n	8001af8 <__gedf2+0x68>
 8001b26:	454f      	cmp	r7, r9
 8001b28:	d8d7      	bhi.n	8001ada <__gedf2+0x4a>
 8001b2a:	d00e      	beq.n	8001b4a <__gedf2+0xba>
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	454f      	cmp	r7, r9
 8001b30:	d2d7      	bcs.n	8001ae2 <__gedf2+0x52>
 8001b32:	2900      	cmp	r1, #0
 8001b34:	d0e2      	beq.n	8001afc <__gedf2+0x6c>
 8001b36:	0008      	movs	r0, r1
 8001b38:	e7d3      	b.n	8001ae2 <__gedf2+0x52>
 8001b3a:	4243      	negs	r3, r0
 8001b3c:	4158      	adcs	r0, r3
 8001b3e:	0040      	lsls	r0, r0, #1
 8001b40:	3801      	subs	r0, #1
 8001b42:	e7ce      	b.n	8001ae2 <__gedf2+0x52>
 8001b44:	2002      	movs	r0, #2
 8001b46:	4240      	negs	r0, r0
 8001b48:	e7cb      	b.n	8001ae2 <__gedf2+0x52>
 8001b4a:	45c4      	cmp	ip, r8
 8001b4c:	d8c5      	bhi.n	8001ada <__gedf2+0x4a>
 8001b4e:	2000      	movs	r0, #0
 8001b50:	45c4      	cmp	ip, r8
 8001b52:	d2c6      	bcs.n	8001ae2 <__gedf2+0x52>
 8001b54:	e7ed      	b.n	8001b32 <__gedf2+0xa2>
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	000007ff 	.word	0x000007ff

08001b5c <__ledf2>:
 8001b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5e:	4647      	mov	r7, r8
 8001b60:	46ce      	mov	lr, r9
 8001b62:	0004      	movs	r4, r0
 8001b64:	0018      	movs	r0, r3
 8001b66:	0016      	movs	r6, r2
 8001b68:	031b      	lsls	r3, r3, #12
 8001b6a:	0b1b      	lsrs	r3, r3, #12
 8001b6c:	4d2c      	ldr	r5, [pc, #176]	; (8001c20 <__ledf2+0xc4>)
 8001b6e:	004a      	lsls	r2, r1, #1
 8001b70:	4699      	mov	r9, r3
 8001b72:	b580      	push	{r7, lr}
 8001b74:	0043      	lsls	r3, r0, #1
 8001b76:	030f      	lsls	r7, r1, #12
 8001b78:	46a4      	mov	ip, r4
 8001b7a:	46b0      	mov	r8, r6
 8001b7c:	0b3f      	lsrs	r7, r7, #12
 8001b7e:	0d52      	lsrs	r2, r2, #21
 8001b80:	0fc9      	lsrs	r1, r1, #31
 8001b82:	0d5b      	lsrs	r3, r3, #21
 8001b84:	0fc0      	lsrs	r0, r0, #31
 8001b86:	42aa      	cmp	r2, r5
 8001b88:	d00d      	beq.n	8001ba6 <__ledf2+0x4a>
 8001b8a:	42ab      	cmp	r3, r5
 8001b8c:	d010      	beq.n	8001bb0 <__ledf2+0x54>
 8001b8e:	2a00      	cmp	r2, #0
 8001b90:	d127      	bne.n	8001be2 <__ledf2+0x86>
 8001b92:	433c      	orrs	r4, r7
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d111      	bne.n	8001bbc <__ledf2+0x60>
 8001b98:	464d      	mov	r5, r9
 8001b9a:	432e      	orrs	r6, r5
 8001b9c:	d10e      	bne.n	8001bbc <__ledf2+0x60>
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	2c00      	cmp	r4, #0
 8001ba2:	d015      	beq.n	8001bd0 <__ledf2+0x74>
 8001ba4:	e00e      	b.n	8001bc4 <__ledf2+0x68>
 8001ba6:	003d      	movs	r5, r7
 8001ba8:	4325      	orrs	r5, r4
 8001baa:	d110      	bne.n	8001bce <__ledf2+0x72>
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d118      	bne.n	8001be2 <__ledf2+0x86>
 8001bb0:	464d      	mov	r5, r9
 8001bb2:	432e      	orrs	r6, r5
 8001bb4:	d10b      	bne.n	8001bce <__ledf2+0x72>
 8001bb6:	2a00      	cmp	r2, #0
 8001bb8:	d102      	bne.n	8001bc0 <__ledf2+0x64>
 8001bba:	433c      	orrs	r4, r7
 8001bbc:	2c00      	cmp	r4, #0
 8001bbe:	d00b      	beq.n	8001bd8 <__ledf2+0x7c>
 8001bc0:	4281      	cmp	r1, r0
 8001bc2:	d014      	beq.n	8001bee <__ledf2+0x92>
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	3901      	subs	r1, #1
 8001bc8:	4008      	ands	r0, r1
 8001bca:	3801      	subs	r0, #1
 8001bcc:	e000      	b.n	8001bd0 <__ledf2+0x74>
 8001bce:	2002      	movs	r0, #2
 8001bd0:	bcc0      	pop	{r6, r7}
 8001bd2:	46b9      	mov	r9, r7
 8001bd4:	46b0      	mov	r8, r6
 8001bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	d1f9      	bne.n	8001bd0 <__ledf2+0x74>
 8001bdc:	2001      	movs	r0, #1
 8001bde:	4240      	negs	r0, r0
 8001be0:	e7f6      	b.n	8001bd0 <__ledf2+0x74>
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ec      	bne.n	8001bc0 <__ledf2+0x64>
 8001be6:	464c      	mov	r4, r9
 8001be8:	4326      	orrs	r6, r4
 8001bea:	d1e9      	bne.n	8001bc0 <__ledf2+0x64>
 8001bec:	e7ea      	b.n	8001bc4 <__ledf2+0x68>
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	dd04      	ble.n	8001bfc <__ledf2+0xa0>
 8001bf2:	4243      	negs	r3, r0
 8001bf4:	4158      	adcs	r0, r3
 8001bf6:	0040      	lsls	r0, r0, #1
 8001bf8:	3801      	subs	r0, #1
 8001bfa:	e7e9      	b.n	8001bd0 <__ledf2+0x74>
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbeb      	blt.n	8001bd8 <__ledf2+0x7c>
 8001c00:	454f      	cmp	r7, r9
 8001c02:	d8df      	bhi.n	8001bc4 <__ledf2+0x68>
 8001c04:	d006      	beq.n	8001c14 <__ledf2+0xb8>
 8001c06:	2000      	movs	r0, #0
 8001c08:	454f      	cmp	r7, r9
 8001c0a:	d2e1      	bcs.n	8001bd0 <__ledf2+0x74>
 8001c0c:	2900      	cmp	r1, #0
 8001c0e:	d0e5      	beq.n	8001bdc <__ledf2+0x80>
 8001c10:	0008      	movs	r0, r1
 8001c12:	e7dd      	b.n	8001bd0 <__ledf2+0x74>
 8001c14:	45c4      	cmp	ip, r8
 8001c16:	d8d5      	bhi.n	8001bc4 <__ledf2+0x68>
 8001c18:	2000      	movs	r0, #0
 8001c1a:	45c4      	cmp	ip, r8
 8001c1c:	d2d8      	bcs.n	8001bd0 <__ledf2+0x74>
 8001c1e:	e7f5      	b.n	8001c0c <__ledf2+0xb0>
 8001c20:	000007ff 	.word	0x000007ff

08001c24 <__aeabi_dmul>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	4657      	mov	r7, sl
 8001c28:	464e      	mov	r6, r9
 8001c2a:	4645      	mov	r5, r8
 8001c2c:	46de      	mov	lr, fp
 8001c2e:	b5e0      	push	{r5, r6, r7, lr}
 8001c30:	4698      	mov	r8, r3
 8001c32:	030c      	lsls	r4, r1, #12
 8001c34:	004b      	lsls	r3, r1, #1
 8001c36:	0006      	movs	r6, r0
 8001c38:	4692      	mov	sl, r2
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	0b24      	lsrs	r4, r4, #12
 8001c3e:	0d5b      	lsrs	r3, r3, #21
 8001c40:	0fcf      	lsrs	r7, r1, #31
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d100      	bne.n	8001c48 <__aeabi_dmul+0x24>
 8001c46:	e15c      	b.n	8001f02 <__aeabi_dmul+0x2de>
 8001c48:	4ad9      	ldr	r2, [pc, #868]	; (8001fb0 <__aeabi_dmul+0x38c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_dmul+0x2c>
 8001c4e:	e175      	b.n	8001f3c <__aeabi_dmul+0x318>
 8001c50:	0f42      	lsrs	r2, r0, #29
 8001c52:	00e4      	lsls	r4, r4, #3
 8001c54:	4314      	orrs	r4, r2
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	0412      	lsls	r2, r2, #16
 8001c5a:	4314      	orrs	r4, r2
 8001c5c:	4ad5      	ldr	r2, [pc, #852]	; (8001fb4 <__aeabi_dmul+0x390>)
 8001c5e:	00c5      	lsls	r5, r0, #3
 8001c60:	4694      	mov	ip, r2
 8001c62:	4463      	add	r3, ip
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2300      	movs	r3, #0
 8001c68:	4699      	mov	r9, r3
 8001c6a:	469b      	mov	fp, r3
 8001c6c:	4643      	mov	r3, r8
 8001c6e:	4642      	mov	r2, r8
 8001c70:	031e      	lsls	r6, r3, #12
 8001c72:	0fd2      	lsrs	r2, r2, #31
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4650      	mov	r0, sl
 8001c78:	4690      	mov	r8, r2
 8001c7a:	0b36      	lsrs	r6, r6, #12
 8001c7c:	0d5b      	lsrs	r3, r3, #21
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dmul+0x5e>
 8001c80:	e120      	b.n	8001ec4 <__aeabi_dmul+0x2a0>
 8001c82:	4acb      	ldr	r2, [pc, #812]	; (8001fb0 <__aeabi_dmul+0x38c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dmul+0x66>
 8001c88:	e162      	b.n	8001f50 <__aeabi_dmul+0x32c>
 8001c8a:	49ca      	ldr	r1, [pc, #808]	; (8001fb4 <__aeabi_dmul+0x390>)
 8001c8c:	0f42      	lsrs	r2, r0, #29
 8001c8e:	468c      	mov	ip, r1
 8001c90:	9900      	ldr	r1, [sp, #0]
 8001c92:	4463      	add	r3, ip
 8001c94:	00f6      	lsls	r6, r6, #3
 8001c96:	468c      	mov	ip, r1
 8001c98:	4316      	orrs	r6, r2
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	449c      	add	ip, r3
 8001c9e:	0412      	lsls	r2, r2, #16
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	4316      	orrs	r6, r2
 8001ca4:	00c2      	lsls	r2, r0, #3
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	9900      	ldr	r1, [sp, #0]
 8001cac:	4643      	mov	r3, r8
 8001cae:	3101      	adds	r1, #1
 8001cb0:	468c      	mov	ip, r1
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	407b      	eors	r3, r7
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	290f      	cmp	r1, #15
 8001cba:	d826      	bhi.n	8001d0a <__aeabi_dmul+0xe6>
 8001cbc:	4bbe      	ldr	r3, [pc, #760]	; (8001fb8 <__aeabi_dmul+0x394>)
 8001cbe:	0089      	lsls	r1, r1, #2
 8001cc0:	5859      	ldr	r1, [r3, r1]
 8001cc2:	468f      	mov	pc, r1
 8001cc4:	4643      	mov	r3, r8
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	0034      	movs	r4, r6
 8001cca:	0015      	movs	r5, r2
 8001ccc:	4683      	mov	fp, r0
 8001cce:	465b      	mov	r3, fp
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d016      	beq.n	8001d02 <__aeabi_dmul+0xde>
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d100      	bne.n	8001cda <__aeabi_dmul+0xb6>
 8001cd8:	e203      	b.n	80020e2 <__aeabi_dmul+0x4be>
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d000      	beq.n	8001ce0 <__aeabi_dmul+0xbc>
 8001cde:	e0cd      	b.n	8001e7c <__aeabi_dmul+0x258>
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2400      	movs	r4, #0
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	9b01      	ldr	r3, [sp, #4]
 8001ce8:	0512      	lsls	r2, r2, #20
 8001cea:	4322      	orrs	r2, r4
 8001cec:	07db      	lsls	r3, r3, #31
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	0028      	movs	r0, r5
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	b007      	add	sp, #28
 8001cf6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cf8:	46bb      	mov	fp, r7
 8001cfa:	46b2      	mov	sl, r6
 8001cfc:	46a9      	mov	r9, r5
 8001cfe:	46a0      	mov	r8, r4
 8001d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d02:	2400      	movs	r4, #0
 8001d04:	2500      	movs	r5, #0
 8001d06:	4aaa      	ldr	r2, [pc, #680]	; (8001fb0 <__aeabi_dmul+0x38c>)
 8001d08:	e7ed      	b.n	8001ce6 <__aeabi_dmul+0xc2>
 8001d0a:	0c28      	lsrs	r0, r5, #16
 8001d0c:	042d      	lsls	r5, r5, #16
 8001d0e:	0c2d      	lsrs	r5, r5, #16
 8001d10:	002b      	movs	r3, r5
 8001d12:	0c11      	lsrs	r1, r2, #16
 8001d14:	0412      	lsls	r2, r2, #16
 8001d16:	0c12      	lsrs	r2, r2, #16
 8001d18:	4353      	muls	r3, r2
 8001d1a:	4698      	mov	r8, r3
 8001d1c:	0013      	movs	r3, r2
 8001d1e:	002f      	movs	r7, r5
 8001d20:	4343      	muls	r3, r0
 8001d22:	4699      	mov	r9, r3
 8001d24:	434f      	muls	r7, r1
 8001d26:	444f      	add	r7, r9
 8001d28:	46bb      	mov	fp, r7
 8001d2a:	4647      	mov	r7, r8
 8001d2c:	000b      	movs	r3, r1
 8001d2e:	0c3f      	lsrs	r7, r7, #16
 8001d30:	46ba      	mov	sl, r7
 8001d32:	4343      	muls	r3, r0
 8001d34:	44da      	add	sl, fp
 8001d36:	9302      	str	r3, [sp, #8]
 8001d38:	45d1      	cmp	r9, sl
 8001d3a:	d904      	bls.n	8001d46 <__aeabi_dmul+0x122>
 8001d3c:	2780      	movs	r7, #128	; 0x80
 8001d3e:	027f      	lsls	r7, r7, #9
 8001d40:	46b9      	mov	r9, r7
 8001d42:	444b      	add	r3, r9
 8001d44:	9302      	str	r3, [sp, #8]
 8001d46:	4653      	mov	r3, sl
 8001d48:	0c1b      	lsrs	r3, r3, #16
 8001d4a:	469b      	mov	fp, r3
 8001d4c:	4653      	mov	r3, sl
 8001d4e:	041f      	lsls	r7, r3, #16
 8001d50:	4643      	mov	r3, r8
 8001d52:	041b      	lsls	r3, r3, #16
 8001d54:	0c1b      	lsrs	r3, r3, #16
 8001d56:	4698      	mov	r8, r3
 8001d58:	003b      	movs	r3, r7
 8001d5a:	4443      	add	r3, r8
 8001d5c:	9304      	str	r3, [sp, #16]
 8001d5e:	0c33      	lsrs	r3, r6, #16
 8001d60:	0436      	lsls	r6, r6, #16
 8001d62:	0c36      	lsrs	r6, r6, #16
 8001d64:	4698      	mov	r8, r3
 8001d66:	0033      	movs	r3, r6
 8001d68:	4343      	muls	r3, r0
 8001d6a:	4699      	mov	r9, r3
 8001d6c:	4643      	mov	r3, r8
 8001d6e:	4343      	muls	r3, r0
 8001d70:	002f      	movs	r7, r5
 8001d72:	469a      	mov	sl, r3
 8001d74:	4643      	mov	r3, r8
 8001d76:	4377      	muls	r7, r6
 8001d78:	435d      	muls	r5, r3
 8001d7a:	0c38      	lsrs	r0, r7, #16
 8001d7c:	444d      	add	r5, r9
 8001d7e:	1945      	adds	r5, r0, r5
 8001d80:	45a9      	cmp	r9, r5
 8001d82:	d903      	bls.n	8001d8c <__aeabi_dmul+0x168>
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	025b      	lsls	r3, r3, #9
 8001d88:	4699      	mov	r9, r3
 8001d8a:	44ca      	add	sl, r9
 8001d8c:	043f      	lsls	r7, r7, #16
 8001d8e:	0c28      	lsrs	r0, r5, #16
 8001d90:	0c3f      	lsrs	r7, r7, #16
 8001d92:	042d      	lsls	r5, r5, #16
 8001d94:	19ed      	adds	r5, r5, r7
 8001d96:	0c27      	lsrs	r7, r4, #16
 8001d98:	0424      	lsls	r4, r4, #16
 8001d9a:	0c24      	lsrs	r4, r4, #16
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	0020      	movs	r0, r4
 8001da0:	4350      	muls	r0, r2
 8001da2:	437a      	muls	r2, r7
 8001da4:	4691      	mov	r9, r2
 8001da6:	003a      	movs	r2, r7
 8001da8:	4453      	add	r3, sl
 8001daa:	9305      	str	r3, [sp, #20]
 8001dac:	0c03      	lsrs	r3, r0, #16
 8001dae:	469a      	mov	sl, r3
 8001db0:	434a      	muls	r2, r1
 8001db2:	4361      	muls	r1, r4
 8001db4:	4449      	add	r1, r9
 8001db6:	4451      	add	r1, sl
 8001db8:	44ab      	add	fp, r5
 8001dba:	4589      	cmp	r9, r1
 8001dbc:	d903      	bls.n	8001dc6 <__aeabi_dmul+0x1a2>
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	025b      	lsls	r3, r3, #9
 8001dc2:	4699      	mov	r9, r3
 8001dc4:	444a      	add	r2, r9
 8001dc6:	0400      	lsls	r0, r0, #16
 8001dc8:	0c0b      	lsrs	r3, r1, #16
 8001dca:	0c00      	lsrs	r0, r0, #16
 8001dcc:	0409      	lsls	r1, r1, #16
 8001dce:	1809      	adds	r1, r1, r0
 8001dd0:	0020      	movs	r0, r4
 8001dd2:	4699      	mov	r9, r3
 8001dd4:	4643      	mov	r3, r8
 8001dd6:	4370      	muls	r0, r6
 8001dd8:	435c      	muls	r4, r3
 8001dda:	437e      	muls	r6, r7
 8001ddc:	435f      	muls	r7, r3
 8001dde:	0c03      	lsrs	r3, r0, #16
 8001de0:	4698      	mov	r8, r3
 8001de2:	19a4      	adds	r4, r4, r6
 8001de4:	4444      	add	r4, r8
 8001de6:	444a      	add	r2, r9
 8001de8:	9703      	str	r7, [sp, #12]
 8001dea:	42a6      	cmp	r6, r4
 8001dec:	d904      	bls.n	8001df8 <__aeabi_dmul+0x1d4>
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	025b      	lsls	r3, r3, #9
 8001df2:	4698      	mov	r8, r3
 8001df4:	4447      	add	r7, r8
 8001df6:	9703      	str	r7, [sp, #12]
 8001df8:	0423      	lsls	r3, r4, #16
 8001dfa:	9e02      	ldr	r6, [sp, #8]
 8001dfc:	469a      	mov	sl, r3
 8001dfe:	9b05      	ldr	r3, [sp, #20]
 8001e00:	445e      	add	r6, fp
 8001e02:	4698      	mov	r8, r3
 8001e04:	42ae      	cmp	r6, r5
 8001e06:	41ad      	sbcs	r5, r5
 8001e08:	1876      	adds	r6, r6, r1
 8001e0a:	428e      	cmp	r6, r1
 8001e0c:	4189      	sbcs	r1, r1
 8001e0e:	0400      	lsls	r0, r0, #16
 8001e10:	0c00      	lsrs	r0, r0, #16
 8001e12:	4450      	add	r0, sl
 8001e14:	4440      	add	r0, r8
 8001e16:	426d      	negs	r5, r5
 8001e18:	1947      	adds	r7, r0, r5
 8001e1a:	46b8      	mov	r8, r7
 8001e1c:	4693      	mov	fp, r2
 8001e1e:	4249      	negs	r1, r1
 8001e20:	4689      	mov	r9, r1
 8001e22:	44c3      	add	fp, r8
 8001e24:	44d9      	add	r9, fp
 8001e26:	4298      	cmp	r0, r3
 8001e28:	4180      	sbcs	r0, r0
 8001e2a:	45a8      	cmp	r8, r5
 8001e2c:	41ad      	sbcs	r5, r5
 8001e2e:	4593      	cmp	fp, r2
 8001e30:	4192      	sbcs	r2, r2
 8001e32:	4589      	cmp	r9, r1
 8001e34:	4189      	sbcs	r1, r1
 8001e36:	426d      	negs	r5, r5
 8001e38:	4240      	negs	r0, r0
 8001e3a:	4328      	orrs	r0, r5
 8001e3c:	0c24      	lsrs	r4, r4, #16
 8001e3e:	4252      	negs	r2, r2
 8001e40:	4249      	negs	r1, r1
 8001e42:	430a      	orrs	r2, r1
 8001e44:	9b03      	ldr	r3, [sp, #12]
 8001e46:	1900      	adds	r0, r0, r4
 8001e48:	1880      	adds	r0, r0, r2
 8001e4a:	18c7      	adds	r7, r0, r3
 8001e4c:	464b      	mov	r3, r9
 8001e4e:	0ddc      	lsrs	r4, r3, #23
 8001e50:	9b04      	ldr	r3, [sp, #16]
 8001e52:	0275      	lsls	r5, r6, #9
 8001e54:	431d      	orrs	r5, r3
 8001e56:	1e6a      	subs	r2, r5, #1
 8001e58:	4195      	sbcs	r5, r2
 8001e5a:	464b      	mov	r3, r9
 8001e5c:	0df6      	lsrs	r6, r6, #23
 8001e5e:	027f      	lsls	r7, r7, #9
 8001e60:	4335      	orrs	r5, r6
 8001e62:	025a      	lsls	r2, r3, #9
 8001e64:	433c      	orrs	r4, r7
 8001e66:	4315      	orrs	r5, r2
 8001e68:	01fb      	lsls	r3, r7, #7
 8001e6a:	d400      	bmi.n	8001e6e <__aeabi_dmul+0x24a>
 8001e6c:	e11c      	b.n	80020a8 <__aeabi_dmul+0x484>
 8001e6e:	2101      	movs	r1, #1
 8001e70:	086a      	lsrs	r2, r5, #1
 8001e72:	400d      	ands	r5, r1
 8001e74:	4315      	orrs	r5, r2
 8001e76:	07e2      	lsls	r2, r4, #31
 8001e78:	4315      	orrs	r5, r2
 8001e7a:	0864      	lsrs	r4, r4, #1
 8001e7c:	494f      	ldr	r1, [pc, #316]	; (8001fbc <__aeabi_dmul+0x398>)
 8001e7e:	4461      	add	r1, ip
 8001e80:	2900      	cmp	r1, #0
 8001e82:	dc00      	bgt.n	8001e86 <__aeabi_dmul+0x262>
 8001e84:	e0b0      	b.n	8001fe8 <__aeabi_dmul+0x3c4>
 8001e86:	076b      	lsls	r3, r5, #29
 8001e88:	d009      	beq.n	8001e9e <__aeabi_dmul+0x27a>
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	402a      	ands	r2, r5
 8001e8e:	2a04      	cmp	r2, #4
 8001e90:	d005      	beq.n	8001e9e <__aeabi_dmul+0x27a>
 8001e92:	1d2a      	adds	r2, r5, #4
 8001e94:	42aa      	cmp	r2, r5
 8001e96:	41ad      	sbcs	r5, r5
 8001e98:	426d      	negs	r5, r5
 8001e9a:	1964      	adds	r4, r4, r5
 8001e9c:	0015      	movs	r5, r2
 8001e9e:	01e3      	lsls	r3, r4, #7
 8001ea0:	d504      	bpl.n	8001eac <__aeabi_dmul+0x288>
 8001ea2:	2180      	movs	r1, #128	; 0x80
 8001ea4:	4a46      	ldr	r2, [pc, #280]	; (8001fc0 <__aeabi_dmul+0x39c>)
 8001ea6:	00c9      	lsls	r1, r1, #3
 8001ea8:	4014      	ands	r4, r2
 8001eaa:	4461      	add	r1, ip
 8001eac:	4a45      	ldr	r2, [pc, #276]	; (8001fc4 <__aeabi_dmul+0x3a0>)
 8001eae:	4291      	cmp	r1, r2
 8001eb0:	dd00      	ble.n	8001eb4 <__aeabi_dmul+0x290>
 8001eb2:	e726      	b.n	8001d02 <__aeabi_dmul+0xde>
 8001eb4:	0762      	lsls	r2, r4, #29
 8001eb6:	08ed      	lsrs	r5, r5, #3
 8001eb8:	0264      	lsls	r4, r4, #9
 8001eba:	0549      	lsls	r1, r1, #21
 8001ebc:	4315      	orrs	r5, r2
 8001ebe:	0b24      	lsrs	r4, r4, #12
 8001ec0:	0d4a      	lsrs	r2, r1, #21
 8001ec2:	e710      	b.n	8001ce6 <__aeabi_dmul+0xc2>
 8001ec4:	4652      	mov	r2, sl
 8001ec6:	4332      	orrs	r2, r6
 8001ec8:	d100      	bne.n	8001ecc <__aeabi_dmul+0x2a8>
 8001eca:	e07f      	b.n	8001fcc <__aeabi_dmul+0x3a8>
 8001ecc:	2e00      	cmp	r6, #0
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dmul+0x2ae>
 8001ed0:	e0dc      	b.n	800208c <__aeabi_dmul+0x468>
 8001ed2:	0030      	movs	r0, r6
 8001ed4:	f000 fd9a 	bl	8002a0c <__clzsi2>
 8001ed8:	0002      	movs	r2, r0
 8001eda:	3a0b      	subs	r2, #11
 8001edc:	231d      	movs	r3, #29
 8001ede:	0001      	movs	r1, r0
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	4652      	mov	r2, sl
 8001ee4:	3908      	subs	r1, #8
 8001ee6:	40da      	lsrs	r2, r3
 8001ee8:	408e      	lsls	r6, r1
 8001eea:	4316      	orrs	r6, r2
 8001eec:	4652      	mov	r2, sl
 8001eee:	408a      	lsls	r2, r1
 8001ef0:	9b00      	ldr	r3, [sp, #0]
 8001ef2:	4935      	ldr	r1, [pc, #212]	; (8001fc8 <__aeabi_dmul+0x3a4>)
 8001ef4:	1a18      	subs	r0, r3, r0
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	468c      	mov	ip, r1
 8001efa:	4463      	add	r3, ip
 8001efc:	2000      	movs	r0, #0
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	e6d3      	b.n	8001caa <__aeabi_dmul+0x86>
 8001f02:	0025      	movs	r5, r4
 8001f04:	4305      	orrs	r5, r0
 8001f06:	d04a      	beq.n	8001f9e <__aeabi_dmul+0x37a>
 8001f08:	2c00      	cmp	r4, #0
 8001f0a:	d100      	bne.n	8001f0e <__aeabi_dmul+0x2ea>
 8001f0c:	e0b0      	b.n	8002070 <__aeabi_dmul+0x44c>
 8001f0e:	0020      	movs	r0, r4
 8001f10:	f000 fd7c 	bl	8002a0c <__clzsi2>
 8001f14:	0001      	movs	r1, r0
 8001f16:	0002      	movs	r2, r0
 8001f18:	390b      	subs	r1, #11
 8001f1a:	231d      	movs	r3, #29
 8001f1c:	0010      	movs	r0, r2
 8001f1e:	1a5b      	subs	r3, r3, r1
 8001f20:	0031      	movs	r1, r6
 8001f22:	0035      	movs	r5, r6
 8001f24:	3808      	subs	r0, #8
 8001f26:	4084      	lsls	r4, r0
 8001f28:	40d9      	lsrs	r1, r3
 8001f2a:	4085      	lsls	r5, r0
 8001f2c:	430c      	orrs	r4, r1
 8001f2e:	4826      	ldr	r0, [pc, #152]	; (8001fc8 <__aeabi_dmul+0x3a4>)
 8001f30:	1a83      	subs	r3, r0, r2
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2300      	movs	r3, #0
 8001f36:	4699      	mov	r9, r3
 8001f38:	469b      	mov	fp, r3
 8001f3a:	e697      	b.n	8001c6c <__aeabi_dmul+0x48>
 8001f3c:	0005      	movs	r5, r0
 8001f3e:	4325      	orrs	r5, r4
 8001f40:	d126      	bne.n	8001f90 <__aeabi_dmul+0x36c>
 8001f42:	2208      	movs	r2, #8
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2302      	movs	r3, #2
 8001f48:	2400      	movs	r4, #0
 8001f4a:	4691      	mov	r9, r2
 8001f4c:	469b      	mov	fp, r3
 8001f4e:	e68d      	b.n	8001c6c <__aeabi_dmul+0x48>
 8001f50:	4652      	mov	r2, sl
 8001f52:	9b00      	ldr	r3, [sp, #0]
 8001f54:	4332      	orrs	r2, r6
 8001f56:	d110      	bne.n	8001f7a <__aeabi_dmul+0x356>
 8001f58:	4915      	ldr	r1, [pc, #84]	; (8001fb0 <__aeabi_dmul+0x38c>)
 8001f5a:	2600      	movs	r6, #0
 8001f5c:	468c      	mov	ip, r1
 8001f5e:	4463      	add	r3, ip
 8001f60:	4649      	mov	r1, r9
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2302      	movs	r3, #2
 8001f66:	4319      	orrs	r1, r3
 8001f68:	4689      	mov	r9, r1
 8001f6a:	2002      	movs	r0, #2
 8001f6c:	e69d      	b.n	8001caa <__aeabi_dmul+0x86>
 8001f6e:	465b      	mov	r3, fp
 8001f70:	9701      	str	r7, [sp, #4]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d000      	beq.n	8001f78 <__aeabi_dmul+0x354>
 8001f76:	e6ad      	b.n	8001cd4 <__aeabi_dmul+0xb0>
 8001f78:	e6c3      	b.n	8001d02 <__aeabi_dmul+0xde>
 8001f7a:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <__aeabi_dmul+0x38c>)
 8001f7c:	2003      	movs	r0, #3
 8001f7e:	4694      	mov	ip, r2
 8001f80:	4463      	add	r3, ip
 8001f82:	464a      	mov	r2, r9
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2303      	movs	r3, #3
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	4691      	mov	r9, r2
 8001f8c:	4652      	mov	r2, sl
 8001f8e:	e68c      	b.n	8001caa <__aeabi_dmul+0x86>
 8001f90:	220c      	movs	r2, #12
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2303      	movs	r3, #3
 8001f96:	0005      	movs	r5, r0
 8001f98:	4691      	mov	r9, r2
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	e666      	b.n	8001c6c <__aeabi_dmul+0x48>
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	4699      	mov	r9, r3
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	2400      	movs	r4, #0
 8001faa:	469b      	mov	fp, r3
 8001fac:	e65e      	b.n	8001c6c <__aeabi_dmul+0x48>
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	000007ff 	.word	0x000007ff
 8001fb4:	fffffc01 	.word	0xfffffc01
 8001fb8:	08008118 	.word	0x08008118
 8001fbc:	000003ff 	.word	0x000003ff
 8001fc0:	feffffff 	.word	0xfeffffff
 8001fc4:	000007fe 	.word	0x000007fe
 8001fc8:	fffffc0d 	.word	0xfffffc0d
 8001fcc:	4649      	mov	r1, r9
 8001fce:	2301      	movs	r3, #1
 8001fd0:	4319      	orrs	r1, r3
 8001fd2:	4689      	mov	r9, r1
 8001fd4:	2600      	movs	r6, #0
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	e667      	b.n	8001caa <__aeabi_dmul+0x86>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2480      	movs	r4, #128	; 0x80
 8001fde:	2500      	movs	r5, #0
 8001fe0:	4a43      	ldr	r2, [pc, #268]	; (80020f0 <__aeabi_dmul+0x4cc>)
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	0324      	lsls	r4, r4, #12
 8001fe6:	e67e      	b.n	8001ce6 <__aeabi_dmul+0xc2>
 8001fe8:	2001      	movs	r0, #1
 8001fea:	1a40      	subs	r0, r0, r1
 8001fec:	2838      	cmp	r0, #56	; 0x38
 8001fee:	dd00      	ble.n	8001ff2 <__aeabi_dmul+0x3ce>
 8001ff0:	e676      	b.n	8001ce0 <__aeabi_dmul+0xbc>
 8001ff2:	281f      	cmp	r0, #31
 8001ff4:	dd5b      	ble.n	80020ae <__aeabi_dmul+0x48a>
 8001ff6:	221f      	movs	r2, #31
 8001ff8:	0023      	movs	r3, r4
 8001ffa:	4252      	negs	r2, r2
 8001ffc:	1a51      	subs	r1, r2, r1
 8001ffe:	40cb      	lsrs	r3, r1
 8002000:	0019      	movs	r1, r3
 8002002:	2820      	cmp	r0, #32
 8002004:	d003      	beq.n	800200e <__aeabi_dmul+0x3ea>
 8002006:	4a3b      	ldr	r2, [pc, #236]	; (80020f4 <__aeabi_dmul+0x4d0>)
 8002008:	4462      	add	r2, ip
 800200a:	4094      	lsls	r4, r2
 800200c:	4325      	orrs	r5, r4
 800200e:	1e6a      	subs	r2, r5, #1
 8002010:	4195      	sbcs	r5, r2
 8002012:	002a      	movs	r2, r5
 8002014:	430a      	orrs	r2, r1
 8002016:	2107      	movs	r1, #7
 8002018:	000d      	movs	r5, r1
 800201a:	2400      	movs	r4, #0
 800201c:	4015      	ands	r5, r2
 800201e:	4211      	tst	r1, r2
 8002020:	d05b      	beq.n	80020da <__aeabi_dmul+0x4b6>
 8002022:	210f      	movs	r1, #15
 8002024:	2400      	movs	r4, #0
 8002026:	4011      	ands	r1, r2
 8002028:	2904      	cmp	r1, #4
 800202a:	d053      	beq.n	80020d4 <__aeabi_dmul+0x4b0>
 800202c:	1d11      	adds	r1, r2, #4
 800202e:	4291      	cmp	r1, r2
 8002030:	4192      	sbcs	r2, r2
 8002032:	4252      	negs	r2, r2
 8002034:	18a4      	adds	r4, r4, r2
 8002036:	000a      	movs	r2, r1
 8002038:	0223      	lsls	r3, r4, #8
 800203a:	d54b      	bpl.n	80020d4 <__aeabi_dmul+0x4b0>
 800203c:	2201      	movs	r2, #1
 800203e:	2400      	movs	r4, #0
 8002040:	2500      	movs	r5, #0
 8002042:	e650      	b.n	8001ce6 <__aeabi_dmul+0xc2>
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	031b      	lsls	r3, r3, #12
 8002048:	421c      	tst	r4, r3
 800204a:	d009      	beq.n	8002060 <__aeabi_dmul+0x43c>
 800204c:	421e      	tst	r6, r3
 800204e:	d107      	bne.n	8002060 <__aeabi_dmul+0x43c>
 8002050:	4333      	orrs	r3, r6
 8002052:	031c      	lsls	r4, r3, #12
 8002054:	4643      	mov	r3, r8
 8002056:	0015      	movs	r5, r2
 8002058:	0b24      	lsrs	r4, r4, #12
 800205a:	4a25      	ldr	r2, [pc, #148]	; (80020f0 <__aeabi_dmul+0x4cc>)
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	e642      	b.n	8001ce6 <__aeabi_dmul+0xc2>
 8002060:	2280      	movs	r2, #128	; 0x80
 8002062:	0312      	lsls	r2, r2, #12
 8002064:	4314      	orrs	r4, r2
 8002066:	0324      	lsls	r4, r4, #12
 8002068:	4a21      	ldr	r2, [pc, #132]	; (80020f0 <__aeabi_dmul+0x4cc>)
 800206a:	0b24      	lsrs	r4, r4, #12
 800206c:	9701      	str	r7, [sp, #4]
 800206e:	e63a      	b.n	8001ce6 <__aeabi_dmul+0xc2>
 8002070:	f000 fccc 	bl	8002a0c <__clzsi2>
 8002074:	0001      	movs	r1, r0
 8002076:	0002      	movs	r2, r0
 8002078:	3115      	adds	r1, #21
 800207a:	3220      	adds	r2, #32
 800207c:	291c      	cmp	r1, #28
 800207e:	dc00      	bgt.n	8002082 <__aeabi_dmul+0x45e>
 8002080:	e74b      	b.n	8001f1a <__aeabi_dmul+0x2f6>
 8002082:	0034      	movs	r4, r6
 8002084:	3808      	subs	r0, #8
 8002086:	2500      	movs	r5, #0
 8002088:	4084      	lsls	r4, r0
 800208a:	e750      	b.n	8001f2e <__aeabi_dmul+0x30a>
 800208c:	f000 fcbe 	bl	8002a0c <__clzsi2>
 8002090:	0003      	movs	r3, r0
 8002092:	001a      	movs	r2, r3
 8002094:	3215      	adds	r2, #21
 8002096:	3020      	adds	r0, #32
 8002098:	2a1c      	cmp	r2, #28
 800209a:	dc00      	bgt.n	800209e <__aeabi_dmul+0x47a>
 800209c:	e71e      	b.n	8001edc <__aeabi_dmul+0x2b8>
 800209e:	4656      	mov	r6, sl
 80020a0:	3b08      	subs	r3, #8
 80020a2:	2200      	movs	r2, #0
 80020a4:	409e      	lsls	r6, r3
 80020a6:	e723      	b.n	8001ef0 <__aeabi_dmul+0x2cc>
 80020a8:	9b00      	ldr	r3, [sp, #0]
 80020aa:	469c      	mov	ip, r3
 80020ac:	e6e6      	b.n	8001e7c <__aeabi_dmul+0x258>
 80020ae:	4912      	ldr	r1, [pc, #72]	; (80020f8 <__aeabi_dmul+0x4d4>)
 80020b0:	0022      	movs	r2, r4
 80020b2:	4461      	add	r1, ip
 80020b4:	002e      	movs	r6, r5
 80020b6:	408d      	lsls	r5, r1
 80020b8:	408a      	lsls	r2, r1
 80020ba:	40c6      	lsrs	r6, r0
 80020bc:	1e69      	subs	r1, r5, #1
 80020be:	418d      	sbcs	r5, r1
 80020c0:	4332      	orrs	r2, r6
 80020c2:	432a      	orrs	r2, r5
 80020c4:	40c4      	lsrs	r4, r0
 80020c6:	0753      	lsls	r3, r2, #29
 80020c8:	d0b6      	beq.n	8002038 <__aeabi_dmul+0x414>
 80020ca:	210f      	movs	r1, #15
 80020cc:	4011      	ands	r1, r2
 80020ce:	2904      	cmp	r1, #4
 80020d0:	d1ac      	bne.n	800202c <__aeabi_dmul+0x408>
 80020d2:	e7b1      	b.n	8002038 <__aeabi_dmul+0x414>
 80020d4:	0765      	lsls	r5, r4, #29
 80020d6:	0264      	lsls	r4, r4, #9
 80020d8:	0b24      	lsrs	r4, r4, #12
 80020da:	08d2      	lsrs	r2, r2, #3
 80020dc:	4315      	orrs	r5, r2
 80020de:	2200      	movs	r2, #0
 80020e0:	e601      	b.n	8001ce6 <__aeabi_dmul+0xc2>
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	0312      	lsls	r2, r2, #12
 80020e6:	4314      	orrs	r4, r2
 80020e8:	0324      	lsls	r4, r4, #12
 80020ea:	4a01      	ldr	r2, [pc, #4]	; (80020f0 <__aeabi_dmul+0x4cc>)
 80020ec:	0b24      	lsrs	r4, r4, #12
 80020ee:	e5fa      	b.n	8001ce6 <__aeabi_dmul+0xc2>
 80020f0:	000007ff 	.word	0x000007ff
 80020f4:	0000043e 	.word	0x0000043e
 80020f8:	0000041e 	.word	0x0000041e

080020fc <__aeabi_dsub>:
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	4657      	mov	r7, sl
 8002100:	464e      	mov	r6, r9
 8002102:	4645      	mov	r5, r8
 8002104:	46de      	mov	lr, fp
 8002106:	b5e0      	push	{r5, r6, r7, lr}
 8002108:	001e      	movs	r6, r3
 800210a:	0017      	movs	r7, r2
 800210c:	004a      	lsls	r2, r1, #1
 800210e:	030b      	lsls	r3, r1, #12
 8002110:	0d52      	lsrs	r2, r2, #21
 8002112:	0a5b      	lsrs	r3, r3, #9
 8002114:	4690      	mov	r8, r2
 8002116:	0f42      	lsrs	r2, r0, #29
 8002118:	431a      	orrs	r2, r3
 800211a:	0fcd      	lsrs	r5, r1, #31
 800211c:	4ccd      	ldr	r4, [pc, #820]	; (8002454 <__aeabi_dsub+0x358>)
 800211e:	0331      	lsls	r1, r6, #12
 8002120:	00c3      	lsls	r3, r0, #3
 8002122:	4694      	mov	ip, r2
 8002124:	0070      	lsls	r0, r6, #1
 8002126:	0f7a      	lsrs	r2, r7, #29
 8002128:	0a49      	lsrs	r1, r1, #9
 800212a:	00ff      	lsls	r7, r7, #3
 800212c:	469a      	mov	sl, r3
 800212e:	46b9      	mov	r9, r7
 8002130:	0d40      	lsrs	r0, r0, #21
 8002132:	0ff6      	lsrs	r6, r6, #31
 8002134:	4311      	orrs	r1, r2
 8002136:	42a0      	cmp	r0, r4
 8002138:	d100      	bne.n	800213c <__aeabi_dsub+0x40>
 800213a:	e0b1      	b.n	80022a0 <__aeabi_dsub+0x1a4>
 800213c:	2201      	movs	r2, #1
 800213e:	4056      	eors	r6, r2
 8002140:	46b3      	mov	fp, r6
 8002142:	42b5      	cmp	r5, r6
 8002144:	d100      	bne.n	8002148 <__aeabi_dsub+0x4c>
 8002146:	e088      	b.n	800225a <__aeabi_dsub+0x15e>
 8002148:	4642      	mov	r2, r8
 800214a:	1a12      	subs	r2, r2, r0
 800214c:	2a00      	cmp	r2, #0
 800214e:	dc00      	bgt.n	8002152 <__aeabi_dsub+0x56>
 8002150:	e0ae      	b.n	80022b0 <__aeabi_dsub+0x1b4>
 8002152:	2800      	cmp	r0, #0
 8002154:	d100      	bne.n	8002158 <__aeabi_dsub+0x5c>
 8002156:	e0c1      	b.n	80022dc <__aeabi_dsub+0x1e0>
 8002158:	48be      	ldr	r0, [pc, #760]	; (8002454 <__aeabi_dsub+0x358>)
 800215a:	4580      	cmp	r8, r0
 800215c:	d100      	bne.n	8002160 <__aeabi_dsub+0x64>
 800215e:	e151      	b.n	8002404 <__aeabi_dsub+0x308>
 8002160:	2080      	movs	r0, #128	; 0x80
 8002162:	0400      	lsls	r0, r0, #16
 8002164:	4301      	orrs	r1, r0
 8002166:	2a38      	cmp	r2, #56	; 0x38
 8002168:	dd00      	ble.n	800216c <__aeabi_dsub+0x70>
 800216a:	e17b      	b.n	8002464 <__aeabi_dsub+0x368>
 800216c:	2a1f      	cmp	r2, #31
 800216e:	dd00      	ble.n	8002172 <__aeabi_dsub+0x76>
 8002170:	e1ee      	b.n	8002550 <__aeabi_dsub+0x454>
 8002172:	2020      	movs	r0, #32
 8002174:	003e      	movs	r6, r7
 8002176:	1a80      	subs	r0, r0, r2
 8002178:	000c      	movs	r4, r1
 800217a:	40d6      	lsrs	r6, r2
 800217c:	40d1      	lsrs	r1, r2
 800217e:	4087      	lsls	r7, r0
 8002180:	4662      	mov	r2, ip
 8002182:	4084      	lsls	r4, r0
 8002184:	1a52      	subs	r2, r2, r1
 8002186:	1e78      	subs	r0, r7, #1
 8002188:	4187      	sbcs	r7, r0
 800218a:	4694      	mov	ip, r2
 800218c:	4334      	orrs	r4, r6
 800218e:	4327      	orrs	r7, r4
 8002190:	1bdc      	subs	r4, r3, r7
 8002192:	42a3      	cmp	r3, r4
 8002194:	419b      	sbcs	r3, r3
 8002196:	4662      	mov	r2, ip
 8002198:	425b      	negs	r3, r3
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	4699      	mov	r9, r3
 800219e:	464b      	mov	r3, r9
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	d400      	bmi.n	80021a6 <__aeabi_dsub+0xaa>
 80021a4:	e118      	b.n	80023d8 <__aeabi_dsub+0x2dc>
 80021a6:	464b      	mov	r3, r9
 80021a8:	0258      	lsls	r0, r3, #9
 80021aa:	0a43      	lsrs	r3, r0, #9
 80021ac:	4699      	mov	r9, r3
 80021ae:	464b      	mov	r3, r9
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dsub+0xba>
 80021b4:	e137      	b.n	8002426 <__aeabi_dsub+0x32a>
 80021b6:	4648      	mov	r0, r9
 80021b8:	f000 fc28 	bl	8002a0c <__clzsi2>
 80021bc:	0001      	movs	r1, r0
 80021be:	3908      	subs	r1, #8
 80021c0:	2320      	movs	r3, #32
 80021c2:	0022      	movs	r2, r4
 80021c4:	4648      	mov	r0, r9
 80021c6:	1a5b      	subs	r3, r3, r1
 80021c8:	40da      	lsrs	r2, r3
 80021ca:	4088      	lsls	r0, r1
 80021cc:	408c      	lsls	r4, r1
 80021ce:	4643      	mov	r3, r8
 80021d0:	4310      	orrs	r0, r2
 80021d2:	4588      	cmp	r8, r1
 80021d4:	dd00      	ble.n	80021d8 <__aeabi_dsub+0xdc>
 80021d6:	e136      	b.n	8002446 <__aeabi_dsub+0x34a>
 80021d8:	1ac9      	subs	r1, r1, r3
 80021da:	1c4b      	adds	r3, r1, #1
 80021dc:	2b1f      	cmp	r3, #31
 80021de:	dd00      	ble.n	80021e2 <__aeabi_dsub+0xe6>
 80021e0:	e0ea      	b.n	80023b8 <__aeabi_dsub+0x2bc>
 80021e2:	2220      	movs	r2, #32
 80021e4:	0026      	movs	r6, r4
 80021e6:	1ad2      	subs	r2, r2, r3
 80021e8:	0001      	movs	r1, r0
 80021ea:	4094      	lsls	r4, r2
 80021ec:	40de      	lsrs	r6, r3
 80021ee:	40d8      	lsrs	r0, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	4091      	lsls	r1, r2
 80021f4:	1e62      	subs	r2, r4, #1
 80021f6:	4194      	sbcs	r4, r2
 80021f8:	4681      	mov	r9, r0
 80021fa:	4698      	mov	r8, r3
 80021fc:	4331      	orrs	r1, r6
 80021fe:	430c      	orrs	r4, r1
 8002200:	0763      	lsls	r3, r4, #29
 8002202:	d009      	beq.n	8002218 <__aeabi_dsub+0x11c>
 8002204:	230f      	movs	r3, #15
 8002206:	4023      	ands	r3, r4
 8002208:	2b04      	cmp	r3, #4
 800220a:	d005      	beq.n	8002218 <__aeabi_dsub+0x11c>
 800220c:	1d23      	adds	r3, r4, #4
 800220e:	42a3      	cmp	r3, r4
 8002210:	41a4      	sbcs	r4, r4
 8002212:	4264      	negs	r4, r4
 8002214:	44a1      	add	r9, r4
 8002216:	001c      	movs	r4, r3
 8002218:	464b      	mov	r3, r9
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	d400      	bmi.n	8002220 <__aeabi_dsub+0x124>
 800221e:	e0de      	b.n	80023de <__aeabi_dsub+0x2e2>
 8002220:	4641      	mov	r1, r8
 8002222:	4b8c      	ldr	r3, [pc, #560]	; (8002454 <__aeabi_dsub+0x358>)
 8002224:	3101      	adds	r1, #1
 8002226:	4299      	cmp	r1, r3
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x130>
 800222a:	e0e7      	b.n	80023fc <__aeabi_dsub+0x300>
 800222c:	464b      	mov	r3, r9
 800222e:	488a      	ldr	r0, [pc, #552]	; (8002458 <__aeabi_dsub+0x35c>)
 8002230:	08e4      	lsrs	r4, r4, #3
 8002232:	4003      	ands	r3, r0
 8002234:	0018      	movs	r0, r3
 8002236:	0549      	lsls	r1, r1, #21
 8002238:	075b      	lsls	r3, r3, #29
 800223a:	0240      	lsls	r0, r0, #9
 800223c:	4323      	orrs	r3, r4
 800223e:	0d4a      	lsrs	r2, r1, #21
 8002240:	0b04      	lsrs	r4, r0, #12
 8002242:	0512      	lsls	r2, r2, #20
 8002244:	07ed      	lsls	r5, r5, #31
 8002246:	4322      	orrs	r2, r4
 8002248:	432a      	orrs	r2, r5
 800224a:	0018      	movs	r0, r3
 800224c:	0011      	movs	r1, r2
 800224e:	bcf0      	pop	{r4, r5, r6, r7}
 8002250:	46bb      	mov	fp, r7
 8002252:	46b2      	mov	sl, r6
 8002254:	46a9      	mov	r9, r5
 8002256:	46a0      	mov	r8, r4
 8002258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800225a:	4642      	mov	r2, r8
 800225c:	1a12      	subs	r2, r2, r0
 800225e:	2a00      	cmp	r2, #0
 8002260:	dd52      	ble.n	8002308 <__aeabi_dsub+0x20c>
 8002262:	2800      	cmp	r0, #0
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x16c>
 8002266:	e09c      	b.n	80023a2 <__aeabi_dsub+0x2a6>
 8002268:	45a0      	cmp	r8, r4
 800226a:	d100      	bne.n	800226e <__aeabi_dsub+0x172>
 800226c:	e0ca      	b.n	8002404 <__aeabi_dsub+0x308>
 800226e:	2080      	movs	r0, #128	; 0x80
 8002270:	0400      	lsls	r0, r0, #16
 8002272:	4301      	orrs	r1, r0
 8002274:	2a38      	cmp	r2, #56	; 0x38
 8002276:	dd00      	ble.n	800227a <__aeabi_dsub+0x17e>
 8002278:	e149      	b.n	800250e <__aeabi_dsub+0x412>
 800227a:	2a1f      	cmp	r2, #31
 800227c:	dc00      	bgt.n	8002280 <__aeabi_dsub+0x184>
 800227e:	e197      	b.n	80025b0 <__aeabi_dsub+0x4b4>
 8002280:	0010      	movs	r0, r2
 8002282:	000e      	movs	r6, r1
 8002284:	3820      	subs	r0, #32
 8002286:	40c6      	lsrs	r6, r0
 8002288:	2a20      	cmp	r2, #32
 800228a:	d004      	beq.n	8002296 <__aeabi_dsub+0x19a>
 800228c:	2040      	movs	r0, #64	; 0x40
 800228e:	1a82      	subs	r2, r0, r2
 8002290:	4091      	lsls	r1, r2
 8002292:	430f      	orrs	r7, r1
 8002294:	46b9      	mov	r9, r7
 8002296:	464c      	mov	r4, r9
 8002298:	1e62      	subs	r2, r4, #1
 800229a:	4194      	sbcs	r4, r2
 800229c:	4334      	orrs	r4, r6
 800229e:	e13a      	b.n	8002516 <__aeabi_dsub+0x41a>
 80022a0:	000a      	movs	r2, r1
 80022a2:	433a      	orrs	r2, r7
 80022a4:	d028      	beq.n	80022f8 <__aeabi_dsub+0x1fc>
 80022a6:	46b3      	mov	fp, r6
 80022a8:	42b5      	cmp	r5, r6
 80022aa:	d02b      	beq.n	8002304 <__aeabi_dsub+0x208>
 80022ac:	4a6b      	ldr	r2, [pc, #428]	; (800245c <__aeabi_dsub+0x360>)
 80022ae:	4442      	add	r2, r8
 80022b0:	2a00      	cmp	r2, #0
 80022b2:	d05d      	beq.n	8002370 <__aeabi_dsub+0x274>
 80022b4:	4642      	mov	r2, r8
 80022b6:	4644      	mov	r4, r8
 80022b8:	1a82      	subs	r2, r0, r2
 80022ba:	2c00      	cmp	r4, #0
 80022bc:	d000      	beq.n	80022c0 <__aeabi_dsub+0x1c4>
 80022be:	e0f5      	b.n	80024ac <__aeabi_dsub+0x3b0>
 80022c0:	4665      	mov	r5, ip
 80022c2:	431d      	orrs	r5, r3
 80022c4:	d100      	bne.n	80022c8 <__aeabi_dsub+0x1cc>
 80022c6:	e19c      	b.n	8002602 <__aeabi_dsub+0x506>
 80022c8:	1e55      	subs	r5, r2, #1
 80022ca:	2a01      	cmp	r2, #1
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dsub+0x1d4>
 80022ce:	e1fb      	b.n	80026c8 <__aeabi_dsub+0x5cc>
 80022d0:	4c60      	ldr	r4, [pc, #384]	; (8002454 <__aeabi_dsub+0x358>)
 80022d2:	42a2      	cmp	r2, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x1dc>
 80022d6:	e1bd      	b.n	8002654 <__aeabi_dsub+0x558>
 80022d8:	002a      	movs	r2, r5
 80022da:	e0f0      	b.n	80024be <__aeabi_dsub+0x3c2>
 80022dc:	0008      	movs	r0, r1
 80022de:	4338      	orrs	r0, r7
 80022e0:	d100      	bne.n	80022e4 <__aeabi_dsub+0x1e8>
 80022e2:	e0c3      	b.n	800246c <__aeabi_dsub+0x370>
 80022e4:	1e50      	subs	r0, r2, #1
 80022e6:	2a01      	cmp	r2, #1
 80022e8:	d100      	bne.n	80022ec <__aeabi_dsub+0x1f0>
 80022ea:	e1a8      	b.n	800263e <__aeabi_dsub+0x542>
 80022ec:	4c59      	ldr	r4, [pc, #356]	; (8002454 <__aeabi_dsub+0x358>)
 80022ee:	42a2      	cmp	r2, r4
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x1f8>
 80022f2:	e087      	b.n	8002404 <__aeabi_dsub+0x308>
 80022f4:	0002      	movs	r2, r0
 80022f6:	e736      	b.n	8002166 <__aeabi_dsub+0x6a>
 80022f8:	2201      	movs	r2, #1
 80022fa:	4056      	eors	r6, r2
 80022fc:	46b3      	mov	fp, r6
 80022fe:	42b5      	cmp	r5, r6
 8002300:	d000      	beq.n	8002304 <__aeabi_dsub+0x208>
 8002302:	e721      	b.n	8002148 <__aeabi_dsub+0x4c>
 8002304:	4a55      	ldr	r2, [pc, #340]	; (800245c <__aeabi_dsub+0x360>)
 8002306:	4442      	add	r2, r8
 8002308:	2a00      	cmp	r2, #0
 800230a:	d100      	bne.n	800230e <__aeabi_dsub+0x212>
 800230c:	e0b5      	b.n	800247a <__aeabi_dsub+0x37e>
 800230e:	4642      	mov	r2, r8
 8002310:	4644      	mov	r4, r8
 8002312:	1a82      	subs	r2, r0, r2
 8002314:	2c00      	cmp	r4, #0
 8002316:	d100      	bne.n	800231a <__aeabi_dsub+0x21e>
 8002318:	e138      	b.n	800258c <__aeabi_dsub+0x490>
 800231a:	4e4e      	ldr	r6, [pc, #312]	; (8002454 <__aeabi_dsub+0x358>)
 800231c:	42b0      	cmp	r0, r6
 800231e:	d100      	bne.n	8002322 <__aeabi_dsub+0x226>
 8002320:	e1de      	b.n	80026e0 <__aeabi_dsub+0x5e4>
 8002322:	2680      	movs	r6, #128	; 0x80
 8002324:	4664      	mov	r4, ip
 8002326:	0436      	lsls	r6, r6, #16
 8002328:	4334      	orrs	r4, r6
 800232a:	46a4      	mov	ip, r4
 800232c:	2a38      	cmp	r2, #56	; 0x38
 800232e:	dd00      	ble.n	8002332 <__aeabi_dsub+0x236>
 8002330:	e196      	b.n	8002660 <__aeabi_dsub+0x564>
 8002332:	2a1f      	cmp	r2, #31
 8002334:	dd00      	ble.n	8002338 <__aeabi_dsub+0x23c>
 8002336:	e224      	b.n	8002782 <__aeabi_dsub+0x686>
 8002338:	2620      	movs	r6, #32
 800233a:	1ab4      	subs	r4, r6, r2
 800233c:	46a2      	mov	sl, r4
 800233e:	4664      	mov	r4, ip
 8002340:	4656      	mov	r6, sl
 8002342:	40b4      	lsls	r4, r6
 8002344:	46a1      	mov	r9, r4
 8002346:	001c      	movs	r4, r3
 8002348:	464e      	mov	r6, r9
 800234a:	40d4      	lsrs	r4, r2
 800234c:	4326      	orrs	r6, r4
 800234e:	0034      	movs	r4, r6
 8002350:	4656      	mov	r6, sl
 8002352:	40b3      	lsls	r3, r6
 8002354:	1e5e      	subs	r6, r3, #1
 8002356:	41b3      	sbcs	r3, r6
 8002358:	431c      	orrs	r4, r3
 800235a:	4663      	mov	r3, ip
 800235c:	40d3      	lsrs	r3, r2
 800235e:	18c9      	adds	r1, r1, r3
 8002360:	19e4      	adds	r4, r4, r7
 8002362:	42bc      	cmp	r4, r7
 8002364:	41bf      	sbcs	r7, r7
 8002366:	427f      	negs	r7, r7
 8002368:	46b9      	mov	r9, r7
 800236a:	4680      	mov	r8, r0
 800236c:	4489      	add	r9, r1
 800236e:	e0d8      	b.n	8002522 <__aeabi_dsub+0x426>
 8002370:	4640      	mov	r0, r8
 8002372:	4c3b      	ldr	r4, [pc, #236]	; (8002460 <__aeabi_dsub+0x364>)
 8002374:	3001      	adds	r0, #1
 8002376:	4220      	tst	r0, r4
 8002378:	d000      	beq.n	800237c <__aeabi_dsub+0x280>
 800237a:	e0b4      	b.n	80024e6 <__aeabi_dsub+0x3ea>
 800237c:	4640      	mov	r0, r8
 800237e:	2800      	cmp	r0, #0
 8002380:	d000      	beq.n	8002384 <__aeabi_dsub+0x288>
 8002382:	e144      	b.n	800260e <__aeabi_dsub+0x512>
 8002384:	4660      	mov	r0, ip
 8002386:	4318      	orrs	r0, r3
 8002388:	d100      	bne.n	800238c <__aeabi_dsub+0x290>
 800238a:	e190      	b.n	80026ae <__aeabi_dsub+0x5b2>
 800238c:	0008      	movs	r0, r1
 800238e:	4338      	orrs	r0, r7
 8002390:	d000      	beq.n	8002394 <__aeabi_dsub+0x298>
 8002392:	e1aa      	b.n	80026ea <__aeabi_dsub+0x5ee>
 8002394:	4661      	mov	r1, ip
 8002396:	08db      	lsrs	r3, r3, #3
 8002398:	0749      	lsls	r1, r1, #29
 800239a:	430b      	orrs	r3, r1
 800239c:	4661      	mov	r1, ip
 800239e:	08cc      	lsrs	r4, r1, #3
 80023a0:	e027      	b.n	80023f2 <__aeabi_dsub+0x2f6>
 80023a2:	0008      	movs	r0, r1
 80023a4:	4338      	orrs	r0, r7
 80023a6:	d061      	beq.n	800246c <__aeabi_dsub+0x370>
 80023a8:	1e50      	subs	r0, r2, #1
 80023aa:	2a01      	cmp	r2, #1
 80023ac:	d100      	bne.n	80023b0 <__aeabi_dsub+0x2b4>
 80023ae:	e139      	b.n	8002624 <__aeabi_dsub+0x528>
 80023b0:	42a2      	cmp	r2, r4
 80023b2:	d027      	beq.n	8002404 <__aeabi_dsub+0x308>
 80023b4:	0002      	movs	r2, r0
 80023b6:	e75d      	b.n	8002274 <__aeabi_dsub+0x178>
 80023b8:	0002      	movs	r2, r0
 80023ba:	391f      	subs	r1, #31
 80023bc:	40ca      	lsrs	r2, r1
 80023be:	0011      	movs	r1, r2
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d003      	beq.n	80023cc <__aeabi_dsub+0x2d0>
 80023c4:	2240      	movs	r2, #64	; 0x40
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	4098      	lsls	r0, r3
 80023ca:	4304      	orrs	r4, r0
 80023cc:	1e63      	subs	r3, r4, #1
 80023ce:	419c      	sbcs	r4, r3
 80023d0:	2300      	movs	r3, #0
 80023d2:	4699      	mov	r9, r3
 80023d4:	4698      	mov	r8, r3
 80023d6:	430c      	orrs	r4, r1
 80023d8:	0763      	lsls	r3, r4, #29
 80023da:	d000      	beq.n	80023de <__aeabi_dsub+0x2e2>
 80023dc:	e712      	b.n	8002204 <__aeabi_dsub+0x108>
 80023de:	464b      	mov	r3, r9
 80023e0:	464a      	mov	r2, r9
 80023e2:	08e4      	lsrs	r4, r4, #3
 80023e4:	075b      	lsls	r3, r3, #29
 80023e6:	4323      	orrs	r3, r4
 80023e8:	08d4      	lsrs	r4, r2, #3
 80023ea:	4642      	mov	r2, r8
 80023ec:	4919      	ldr	r1, [pc, #100]	; (8002454 <__aeabi_dsub+0x358>)
 80023ee:	428a      	cmp	r2, r1
 80023f0:	d00e      	beq.n	8002410 <__aeabi_dsub+0x314>
 80023f2:	0324      	lsls	r4, r4, #12
 80023f4:	0552      	lsls	r2, r2, #21
 80023f6:	0b24      	lsrs	r4, r4, #12
 80023f8:	0d52      	lsrs	r2, r2, #21
 80023fa:	e722      	b.n	8002242 <__aeabi_dsub+0x146>
 80023fc:	000a      	movs	r2, r1
 80023fe:	2400      	movs	r4, #0
 8002400:	2300      	movs	r3, #0
 8002402:	e71e      	b.n	8002242 <__aeabi_dsub+0x146>
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	4662      	mov	r2, ip
 8002408:	0752      	lsls	r2, r2, #29
 800240a:	4313      	orrs	r3, r2
 800240c:	4662      	mov	r2, ip
 800240e:	08d4      	lsrs	r4, r2, #3
 8002410:	001a      	movs	r2, r3
 8002412:	4322      	orrs	r2, r4
 8002414:	d100      	bne.n	8002418 <__aeabi_dsub+0x31c>
 8002416:	e1fc      	b.n	8002812 <__aeabi_dsub+0x716>
 8002418:	2280      	movs	r2, #128	; 0x80
 800241a:	0312      	lsls	r2, r2, #12
 800241c:	4314      	orrs	r4, r2
 800241e:	0324      	lsls	r4, r4, #12
 8002420:	4a0c      	ldr	r2, [pc, #48]	; (8002454 <__aeabi_dsub+0x358>)
 8002422:	0b24      	lsrs	r4, r4, #12
 8002424:	e70d      	b.n	8002242 <__aeabi_dsub+0x146>
 8002426:	0020      	movs	r0, r4
 8002428:	f000 faf0 	bl	8002a0c <__clzsi2>
 800242c:	0001      	movs	r1, r0
 800242e:	3118      	adds	r1, #24
 8002430:	291f      	cmp	r1, #31
 8002432:	dc00      	bgt.n	8002436 <__aeabi_dsub+0x33a>
 8002434:	e6c4      	b.n	80021c0 <__aeabi_dsub+0xc4>
 8002436:	3808      	subs	r0, #8
 8002438:	4084      	lsls	r4, r0
 800243a:	4643      	mov	r3, r8
 800243c:	0020      	movs	r0, r4
 800243e:	2400      	movs	r4, #0
 8002440:	4588      	cmp	r8, r1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x34a>
 8002444:	e6c8      	b.n	80021d8 <__aeabi_dsub+0xdc>
 8002446:	4a04      	ldr	r2, [pc, #16]	; (8002458 <__aeabi_dsub+0x35c>)
 8002448:	1a5b      	subs	r3, r3, r1
 800244a:	4010      	ands	r0, r2
 800244c:	4698      	mov	r8, r3
 800244e:	4681      	mov	r9, r0
 8002450:	e6d6      	b.n	8002200 <__aeabi_dsub+0x104>
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	000007ff 	.word	0x000007ff
 8002458:	ff7fffff 	.word	0xff7fffff
 800245c:	fffff801 	.word	0xfffff801
 8002460:	000007fe 	.word	0x000007fe
 8002464:	430f      	orrs	r7, r1
 8002466:	1e7a      	subs	r2, r7, #1
 8002468:	4197      	sbcs	r7, r2
 800246a:	e691      	b.n	8002190 <__aeabi_dsub+0x94>
 800246c:	4661      	mov	r1, ip
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	0749      	lsls	r1, r1, #29
 8002472:	430b      	orrs	r3, r1
 8002474:	4661      	mov	r1, ip
 8002476:	08cc      	lsrs	r4, r1, #3
 8002478:	e7b8      	b.n	80023ec <__aeabi_dsub+0x2f0>
 800247a:	4640      	mov	r0, r8
 800247c:	4cd3      	ldr	r4, [pc, #844]	; (80027cc <__aeabi_dsub+0x6d0>)
 800247e:	3001      	adds	r0, #1
 8002480:	4220      	tst	r0, r4
 8002482:	d000      	beq.n	8002486 <__aeabi_dsub+0x38a>
 8002484:	e0a2      	b.n	80025cc <__aeabi_dsub+0x4d0>
 8002486:	4640      	mov	r0, r8
 8002488:	2800      	cmp	r0, #0
 800248a:	d000      	beq.n	800248e <__aeabi_dsub+0x392>
 800248c:	e101      	b.n	8002692 <__aeabi_dsub+0x596>
 800248e:	4660      	mov	r0, ip
 8002490:	4318      	orrs	r0, r3
 8002492:	d100      	bne.n	8002496 <__aeabi_dsub+0x39a>
 8002494:	e15e      	b.n	8002754 <__aeabi_dsub+0x658>
 8002496:	0008      	movs	r0, r1
 8002498:	4338      	orrs	r0, r7
 800249a:	d000      	beq.n	800249e <__aeabi_dsub+0x3a2>
 800249c:	e15f      	b.n	800275e <__aeabi_dsub+0x662>
 800249e:	4661      	mov	r1, ip
 80024a0:	08db      	lsrs	r3, r3, #3
 80024a2:	0749      	lsls	r1, r1, #29
 80024a4:	430b      	orrs	r3, r1
 80024a6:	4661      	mov	r1, ip
 80024a8:	08cc      	lsrs	r4, r1, #3
 80024aa:	e7a2      	b.n	80023f2 <__aeabi_dsub+0x2f6>
 80024ac:	4dc8      	ldr	r5, [pc, #800]	; (80027d0 <__aeabi_dsub+0x6d4>)
 80024ae:	42a8      	cmp	r0, r5
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x3b8>
 80024b2:	e0cf      	b.n	8002654 <__aeabi_dsub+0x558>
 80024b4:	2580      	movs	r5, #128	; 0x80
 80024b6:	4664      	mov	r4, ip
 80024b8:	042d      	lsls	r5, r5, #16
 80024ba:	432c      	orrs	r4, r5
 80024bc:	46a4      	mov	ip, r4
 80024be:	2a38      	cmp	r2, #56	; 0x38
 80024c0:	dc56      	bgt.n	8002570 <__aeabi_dsub+0x474>
 80024c2:	2a1f      	cmp	r2, #31
 80024c4:	dd00      	ble.n	80024c8 <__aeabi_dsub+0x3cc>
 80024c6:	e0d1      	b.n	800266c <__aeabi_dsub+0x570>
 80024c8:	2520      	movs	r5, #32
 80024ca:	001e      	movs	r6, r3
 80024cc:	1aad      	subs	r5, r5, r2
 80024ce:	4664      	mov	r4, ip
 80024d0:	40ab      	lsls	r3, r5
 80024d2:	40ac      	lsls	r4, r5
 80024d4:	40d6      	lsrs	r6, r2
 80024d6:	1e5d      	subs	r5, r3, #1
 80024d8:	41ab      	sbcs	r3, r5
 80024da:	4334      	orrs	r4, r6
 80024dc:	4323      	orrs	r3, r4
 80024de:	4664      	mov	r4, ip
 80024e0:	40d4      	lsrs	r4, r2
 80024e2:	1b09      	subs	r1, r1, r4
 80024e4:	e049      	b.n	800257a <__aeabi_dsub+0x47e>
 80024e6:	4660      	mov	r0, ip
 80024e8:	1bdc      	subs	r4, r3, r7
 80024ea:	1a46      	subs	r6, r0, r1
 80024ec:	42a3      	cmp	r3, r4
 80024ee:	4180      	sbcs	r0, r0
 80024f0:	4240      	negs	r0, r0
 80024f2:	4681      	mov	r9, r0
 80024f4:	0030      	movs	r0, r6
 80024f6:	464e      	mov	r6, r9
 80024f8:	1b80      	subs	r0, r0, r6
 80024fa:	4681      	mov	r9, r0
 80024fc:	0200      	lsls	r0, r0, #8
 80024fe:	d476      	bmi.n	80025ee <__aeabi_dsub+0x4f2>
 8002500:	464b      	mov	r3, r9
 8002502:	4323      	orrs	r3, r4
 8002504:	d000      	beq.n	8002508 <__aeabi_dsub+0x40c>
 8002506:	e652      	b.n	80021ae <__aeabi_dsub+0xb2>
 8002508:	2400      	movs	r4, #0
 800250a:	2500      	movs	r5, #0
 800250c:	e771      	b.n	80023f2 <__aeabi_dsub+0x2f6>
 800250e:	4339      	orrs	r1, r7
 8002510:	000c      	movs	r4, r1
 8002512:	1e62      	subs	r2, r4, #1
 8002514:	4194      	sbcs	r4, r2
 8002516:	18e4      	adds	r4, r4, r3
 8002518:	429c      	cmp	r4, r3
 800251a:	419b      	sbcs	r3, r3
 800251c:	425b      	negs	r3, r3
 800251e:	4463      	add	r3, ip
 8002520:	4699      	mov	r9, r3
 8002522:	464b      	mov	r3, r9
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	d400      	bmi.n	800252a <__aeabi_dsub+0x42e>
 8002528:	e756      	b.n	80023d8 <__aeabi_dsub+0x2dc>
 800252a:	2301      	movs	r3, #1
 800252c:	469c      	mov	ip, r3
 800252e:	4ba8      	ldr	r3, [pc, #672]	; (80027d0 <__aeabi_dsub+0x6d4>)
 8002530:	44e0      	add	r8, ip
 8002532:	4598      	cmp	r8, r3
 8002534:	d038      	beq.n	80025a8 <__aeabi_dsub+0x4ac>
 8002536:	464b      	mov	r3, r9
 8002538:	48a6      	ldr	r0, [pc, #664]	; (80027d4 <__aeabi_dsub+0x6d8>)
 800253a:	2201      	movs	r2, #1
 800253c:	4003      	ands	r3, r0
 800253e:	0018      	movs	r0, r3
 8002540:	0863      	lsrs	r3, r4, #1
 8002542:	4014      	ands	r4, r2
 8002544:	431c      	orrs	r4, r3
 8002546:	07c3      	lsls	r3, r0, #31
 8002548:	431c      	orrs	r4, r3
 800254a:	0843      	lsrs	r3, r0, #1
 800254c:	4699      	mov	r9, r3
 800254e:	e657      	b.n	8002200 <__aeabi_dsub+0x104>
 8002550:	0010      	movs	r0, r2
 8002552:	000e      	movs	r6, r1
 8002554:	3820      	subs	r0, #32
 8002556:	40c6      	lsrs	r6, r0
 8002558:	2a20      	cmp	r2, #32
 800255a:	d004      	beq.n	8002566 <__aeabi_dsub+0x46a>
 800255c:	2040      	movs	r0, #64	; 0x40
 800255e:	1a82      	subs	r2, r0, r2
 8002560:	4091      	lsls	r1, r2
 8002562:	430f      	orrs	r7, r1
 8002564:	46b9      	mov	r9, r7
 8002566:	464f      	mov	r7, r9
 8002568:	1e7a      	subs	r2, r7, #1
 800256a:	4197      	sbcs	r7, r2
 800256c:	4337      	orrs	r7, r6
 800256e:	e60f      	b.n	8002190 <__aeabi_dsub+0x94>
 8002570:	4662      	mov	r2, ip
 8002572:	431a      	orrs	r2, r3
 8002574:	0013      	movs	r3, r2
 8002576:	1e5a      	subs	r2, r3, #1
 8002578:	4193      	sbcs	r3, r2
 800257a:	1afc      	subs	r4, r7, r3
 800257c:	42a7      	cmp	r7, r4
 800257e:	41bf      	sbcs	r7, r7
 8002580:	427f      	negs	r7, r7
 8002582:	1bcb      	subs	r3, r1, r7
 8002584:	4699      	mov	r9, r3
 8002586:	465d      	mov	r5, fp
 8002588:	4680      	mov	r8, r0
 800258a:	e608      	b.n	800219e <__aeabi_dsub+0xa2>
 800258c:	4666      	mov	r6, ip
 800258e:	431e      	orrs	r6, r3
 8002590:	d100      	bne.n	8002594 <__aeabi_dsub+0x498>
 8002592:	e0be      	b.n	8002712 <__aeabi_dsub+0x616>
 8002594:	1e56      	subs	r6, r2, #1
 8002596:	2a01      	cmp	r2, #1
 8002598:	d100      	bne.n	800259c <__aeabi_dsub+0x4a0>
 800259a:	e109      	b.n	80027b0 <__aeabi_dsub+0x6b4>
 800259c:	4c8c      	ldr	r4, [pc, #560]	; (80027d0 <__aeabi_dsub+0x6d4>)
 800259e:	42a2      	cmp	r2, r4
 80025a0:	d100      	bne.n	80025a4 <__aeabi_dsub+0x4a8>
 80025a2:	e119      	b.n	80027d8 <__aeabi_dsub+0x6dc>
 80025a4:	0032      	movs	r2, r6
 80025a6:	e6c1      	b.n	800232c <__aeabi_dsub+0x230>
 80025a8:	4642      	mov	r2, r8
 80025aa:	2400      	movs	r4, #0
 80025ac:	2300      	movs	r3, #0
 80025ae:	e648      	b.n	8002242 <__aeabi_dsub+0x146>
 80025b0:	2020      	movs	r0, #32
 80025b2:	000c      	movs	r4, r1
 80025b4:	1a80      	subs	r0, r0, r2
 80025b6:	003e      	movs	r6, r7
 80025b8:	4087      	lsls	r7, r0
 80025ba:	4084      	lsls	r4, r0
 80025bc:	40d6      	lsrs	r6, r2
 80025be:	1e78      	subs	r0, r7, #1
 80025c0:	4187      	sbcs	r7, r0
 80025c2:	40d1      	lsrs	r1, r2
 80025c4:	4334      	orrs	r4, r6
 80025c6:	433c      	orrs	r4, r7
 80025c8:	448c      	add	ip, r1
 80025ca:	e7a4      	b.n	8002516 <__aeabi_dsub+0x41a>
 80025cc:	4a80      	ldr	r2, [pc, #512]	; (80027d0 <__aeabi_dsub+0x6d4>)
 80025ce:	4290      	cmp	r0, r2
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x4d8>
 80025d2:	e0e9      	b.n	80027a8 <__aeabi_dsub+0x6ac>
 80025d4:	19df      	adds	r7, r3, r7
 80025d6:	429f      	cmp	r7, r3
 80025d8:	419b      	sbcs	r3, r3
 80025da:	4461      	add	r1, ip
 80025dc:	425b      	negs	r3, r3
 80025de:	18c9      	adds	r1, r1, r3
 80025e0:	07cc      	lsls	r4, r1, #31
 80025e2:	087f      	lsrs	r7, r7, #1
 80025e4:	084b      	lsrs	r3, r1, #1
 80025e6:	4699      	mov	r9, r3
 80025e8:	4680      	mov	r8, r0
 80025ea:	433c      	orrs	r4, r7
 80025ec:	e6f4      	b.n	80023d8 <__aeabi_dsub+0x2dc>
 80025ee:	1afc      	subs	r4, r7, r3
 80025f0:	42a7      	cmp	r7, r4
 80025f2:	41bf      	sbcs	r7, r7
 80025f4:	4663      	mov	r3, ip
 80025f6:	427f      	negs	r7, r7
 80025f8:	1ac9      	subs	r1, r1, r3
 80025fa:	1bcb      	subs	r3, r1, r7
 80025fc:	4699      	mov	r9, r3
 80025fe:	465d      	mov	r5, fp
 8002600:	e5d5      	b.n	80021ae <__aeabi_dsub+0xb2>
 8002602:	08ff      	lsrs	r7, r7, #3
 8002604:	074b      	lsls	r3, r1, #29
 8002606:	465d      	mov	r5, fp
 8002608:	433b      	orrs	r3, r7
 800260a:	08cc      	lsrs	r4, r1, #3
 800260c:	e6ee      	b.n	80023ec <__aeabi_dsub+0x2f0>
 800260e:	4662      	mov	r2, ip
 8002610:	431a      	orrs	r2, r3
 8002612:	d000      	beq.n	8002616 <__aeabi_dsub+0x51a>
 8002614:	e082      	b.n	800271c <__aeabi_dsub+0x620>
 8002616:	000b      	movs	r3, r1
 8002618:	433b      	orrs	r3, r7
 800261a:	d11b      	bne.n	8002654 <__aeabi_dsub+0x558>
 800261c:	2480      	movs	r4, #128	; 0x80
 800261e:	2500      	movs	r5, #0
 8002620:	0324      	lsls	r4, r4, #12
 8002622:	e6f9      	b.n	8002418 <__aeabi_dsub+0x31c>
 8002624:	19dc      	adds	r4, r3, r7
 8002626:	429c      	cmp	r4, r3
 8002628:	419b      	sbcs	r3, r3
 800262a:	4461      	add	r1, ip
 800262c:	4689      	mov	r9, r1
 800262e:	425b      	negs	r3, r3
 8002630:	4499      	add	r9, r3
 8002632:	464b      	mov	r3, r9
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	d444      	bmi.n	80026c2 <__aeabi_dsub+0x5c6>
 8002638:	2301      	movs	r3, #1
 800263a:	4698      	mov	r8, r3
 800263c:	e6cc      	b.n	80023d8 <__aeabi_dsub+0x2dc>
 800263e:	1bdc      	subs	r4, r3, r7
 8002640:	4662      	mov	r2, ip
 8002642:	42a3      	cmp	r3, r4
 8002644:	419b      	sbcs	r3, r3
 8002646:	1a51      	subs	r1, r2, r1
 8002648:	425b      	negs	r3, r3
 800264a:	1acb      	subs	r3, r1, r3
 800264c:	4699      	mov	r9, r3
 800264e:	2301      	movs	r3, #1
 8002650:	4698      	mov	r8, r3
 8002652:	e5a4      	b.n	800219e <__aeabi_dsub+0xa2>
 8002654:	08ff      	lsrs	r7, r7, #3
 8002656:	074b      	lsls	r3, r1, #29
 8002658:	465d      	mov	r5, fp
 800265a:	433b      	orrs	r3, r7
 800265c:	08cc      	lsrs	r4, r1, #3
 800265e:	e6d7      	b.n	8002410 <__aeabi_dsub+0x314>
 8002660:	4662      	mov	r2, ip
 8002662:	431a      	orrs	r2, r3
 8002664:	0014      	movs	r4, r2
 8002666:	1e63      	subs	r3, r4, #1
 8002668:	419c      	sbcs	r4, r3
 800266a:	e679      	b.n	8002360 <__aeabi_dsub+0x264>
 800266c:	0015      	movs	r5, r2
 800266e:	4664      	mov	r4, ip
 8002670:	3d20      	subs	r5, #32
 8002672:	40ec      	lsrs	r4, r5
 8002674:	46a0      	mov	r8, r4
 8002676:	2a20      	cmp	r2, #32
 8002678:	d005      	beq.n	8002686 <__aeabi_dsub+0x58a>
 800267a:	2540      	movs	r5, #64	; 0x40
 800267c:	4664      	mov	r4, ip
 800267e:	1aaa      	subs	r2, r5, r2
 8002680:	4094      	lsls	r4, r2
 8002682:	4323      	orrs	r3, r4
 8002684:	469a      	mov	sl, r3
 8002686:	4654      	mov	r4, sl
 8002688:	1e63      	subs	r3, r4, #1
 800268a:	419c      	sbcs	r4, r3
 800268c:	4643      	mov	r3, r8
 800268e:	4323      	orrs	r3, r4
 8002690:	e773      	b.n	800257a <__aeabi_dsub+0x47e>
 8002692:	4662      	mov	r2, ip
 8002694:	431a      	orrs	r2, r3
 8002696:	d023      	beq.n	80026e0 <__aeabi_dsub+0x5e4>
 8002698:	000a      	movs	r2, r1
 800269a:	433a      	orrs	r2, r7
 800269c:	d000      	beq.n	80026a0 <__aeabi_dsub+0x5a4>
 800269e:	e0a0      	b.n	80027e2 <__aeabi_dsub+0x6e6>
 80026a0:	4662      	mov	r2, ip
 80026a2:	08db      	lsrs	r3, r3, #3
 80026a4:	0752      	lsls	r2, r2, #29
 80026a6:	4313      	orrs	r3, r2
 80026a8:	4662      	mov	r2, ip
 80026aa:	08d4      	lsrs	r4, r2, #3
 80026ac:	e6b0      	b.n	8002410 <__aeabi_dsub+0x314>
 80026ae:	000b      	movs	r3, r1
 80026b0:	433b      	orrs	r3, r7
 80026b2:	d100      	bne.n	80026b6 <__aeabi_dsub+0x5ba>
 80026b4:	e728      	b.n	8002508 <__aeabi_dsub+0x40c>
 80026b6:	08ff      	lsrs	r7, r7, #3
 80026b8:	074b      	lsls	r3, r1, #29
 80026ba:	465d      	mov	r5, fp
 80026bc:	433b      	orrs	r3, r7
 80026be:	08cc      	lsrs	r4, r1, #3
 80026c0:	e697      	b.n	80023f2 <__aeabi_dsub+0x2f6>
 80026c2:	2302      	movs	r3, #2
 80026c4:	4698      	mov	r8, r3
 80026c6:	e736      	b.n	8002536 <__aeabi_dsub+0x43a>
 80026c8:	1afc      	subs	r4, r7, r3
 80026ca:	42a7      	cmp	r7, r4
 80026cc:	41bf      	sbcs	r7, r7
 80026ce:	4663      	mov	r3, ip
 80026d0:	427f      	negs	r7, r7
 80026d2:	1ac9      	subs	r1, r1, r3
 80026d4:	1bcb      	subs	r3, r1, r7
 80026d6:	4699      	mov	r9, r3
 80026d8:	2301      	movs	r3, #1
 80026da:	465d      	mov	r5, fp
 80026dc:	4698      	mov	r8, r3
 80026de:	e55e      	b.n	800219e <__aeabi_dsub+0xa2>
 80026e0:	074b      	lsls	r3, r1, #29
 80026e2:	08ff      	lsrs	r7, r7, #3
 80026e4:	433b      	orrs	r3, r7
 80026e6:	08cc      	lsrs	r4, r1, #3
 80026e8:	e692      	b.n	8002410 <__aeabi_dsub+0x314>
 80026ea:	1bdc      	subs	r4, r3, r7
 80026ec:	4660      	mov	r0, ip
 80026ee:	42a3      	cmp	r3, r4
 80026f0:	41b6      	sbcs	r6, r6
 80026f2:	1a40      	subs	r0, r0, r1
 80026f4:	4276      	negs	r6, r6
 80026f6:	1b80      	subs	r0, r0, r6
 80026f8:	4681      	mov	r9, r0
 80026fa:	0200      	lsls	r0, r0, #8
 80026fc:	d560      	bpl.n	80027c0 <__aeabi_dsub+0x6c4>
 80026fe:	1afc      	subs	r4, r7, r3
 8002700:	42a7      	cmp	r7, r4
 8002702:	41bf      	sbcs	r7, r7
 8002704:	4663      	mov	r3, ip
 8002706:	427f      	negs	r7, r7
 8002708:	1ac9      	subs	r1, r1, r3
 800270a:	1bcb      	subs	r3, r1, r7
 800270c:	4699      	mov	r9, r3
 800270e:	465d      	mov	r5, fp
 8002710:	e576      	b.n	8002200 <__aeabi_dsub+0x104>
 8002712:	08ff      	lsrs	r7, r7, #3
 8002714:	074b      	lsls	r3, r1, #29
 8002716:	433b      	orrs	r3, r7
 8002718:	08cc      	lsrs	r4, r1, #3
 800271a:	e667      	b.n	80023ec <__aeabi_dsub+0x2f0>
 800271c:	000a      	movs	r2, r1
 800271e:	08db      	lsrs	r3, r3, #3
 8002720:	433a      	orrs	r2, r7
 8002722:	d100      	bne.n	8002726 <__aeabi_dsub+0x62a>
 8002724:	e66f      	b.n	8002406 <__aeabi_dsub+0x30a>
 8002726:	4662      	mov	r2, ip
 8002728:	0752      	lsls	r2, r2, #29
 800272a:	4313      	orrs	r3, r2
 800272c:	4662      	mov	r2, ip
 800272e:	08d4      	lsrs	r4, r2, #3
 8002730:	2280      	movs	r2, #128	; 0x80
 8002732:	0312      	lsls	r2, r2, #12
 8002734:	4214      	tst	r4, r2
 8002736:	d007      	beq.n	8002748 <__aeabi_dsub+0x64c>
 8002738:	08c8      	lsrs	r0, r1, #3
 800273a:	4210      	tst	r0, r2
 800273c:	d104      	bne.n	8002748 <__aeabi_dsub+0x64c>
 800273e:	465d      	mov	r5, fp
 8002740:	0004      	movs	r4, r0
 8002742:	08fb      	lsrs	r3, r7, #3
 8002744:	0749      	lsls	r1, r1, #29
 8002746:	430b      	orrs	r3, r1
 8002748:	0f5a      	lsrs	r2, r3, #29
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	08db      	lsrs	r3, r3, #3
 800274e:	0752      	lsls	r2, r2, #29
 8002750:	4313      	orrs	r3, r2
 8002752:	e65d      	b.n	8002410 <__aeabi_dsub+0x314>
 8002754:	074b      	lsls	r3, r1, #29
 8002756:	08ff      	lsrs	r7, r7, #3
 8002758:	433b      	orrs	r3, r7
 800275a:	08cc      	lsrs	r4, r1, #3
 800275c:	e649      	b.n	80023f2 <__aeabi_dsub+0x2f6>
 800275e:	19dc      	adds	r4, r3, r7
 8002760:	429c      	cmp	r4, r3
 8002762:	419b      	sbcs	r3, r3
 8002764:	4461      	add	r1, ip
 8002766:	4689      	mov	r9, r1
 8002768:	425b      	negs	r3, r3
 800276a:	4499      	add	r9, r3
 800276c:	464b      	mov	r3, r9
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	d400      	bmi.n	8002774 <__aeabi_dsub+0x678>
 8002772:	e631      	b.n	80023d8 <__aeabi_dsub+0x2dc>
 8002774:	464a      	mov	r2, r9
 8002776:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <__aeabi_dsub+0x6d8>)
 8002778:	401a      	ands	r2, r3
 800277a:	2301      	movs	r3, #1
 800277c:	4691      	mov	r9, r2
 800277e:	4698      	mov	r8, r3
 8002780:	e62a      	b.n	80023d8 <__aeabi_dsub+0x2dc>
 8002782:	0016      	movs	r6, r2
 8002784:	4664      	mov	r4, ip
 8002786:	3e20      	subs	r6, #32
 8002788:	40f4      	lsrs	r4, r6
 800278a:	46a0      	mov	r8, r4
 800278c:	2a20      	cmp	r2, #32
 800278e:	d005      	beq.n	800279c <__aeabi_dsub+0x6a0>
 8002790:	2640      	movs	r6, #64	; 0x40
 8002792:	4664      	mov	r4, ip
 8002794:	1ab2      	subs	r2, r6, r2
 8002796:	4094      	lsls	r4, r2
 8002798:	4323      	orrs	r3, r4
 800279a:	469a      	mov	sl, r3
 800279c:	4654      	mov	r4, sl
 800279e:	1e63      	subs	r3, r4, #1
 80027a0:	419c      	sbcs	r4, r3
 80027a2:	4643      	mov	r3, r8
 80027a4:	431c      	orrs	r4, r3
 80027a6:	e5db      	b.n	8002360 <__aeabi_dsub+0x264>
 80027a8:	0002      	movs	r2, r0
 80027aa:	2400      	movs	r4, #0
 80027ac:	2300      	movs	r3, #0
 80027ae:	e548      	b.n	8002242 <__aeabi_dsub+0x146>
 80027b0:	19dc      	adds	r4, r3, r7
 80027b2:	42bc      	cmp	r4, r7
 80027b4:	41bf      	sbcs	r7, r7
 80027b6:	4461      	add	r1, ip
 80027b8:	4689      	mov	r9, r1
 80027ba:	427f      	negs	r7, r7
 80027bc:	44b9      	add	r9, r7
 80027be:	e738      	b.n	8002632 <__aeabi_dsub+0x536>
 80027c0:	464b      	mov	r3, r9
 80027c2:	4323      	orrs	r3, r4
 80027c4:	d100      	bne.n	80027c8 <__aeabi_dsub+0x6cc>
 80027c6:	e69f      	b.n	8002508 <__aeabi_dsub+0x40c>
 80027c8:	e606      	b.n	80023d8 <__aeabi_dsub+0x2dc>
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	000007fe 	.word	0x000007fe
 80027d0:	000007ff 	.word	0x000007ff
 80027d4:	ff7fffff 	.word	0xff7fffff
 80027d8:	08ff      	lsrs	r7, r7, #3
 80027da:	074b      	lsls	r3, r1, #29
 80027dc:	433b      	orrs	r3, r7
 80027de:	08cc      	lsrs	r4, r1, #3
 80027e0:	e616      	b.n	8002410 <__aeabi_dsub+0x314>
 80027e2:	4662      	mov	r2, ip
 80027e4:	08db      	lsrs	r3, r3, #3
 80027e6:	0752      	lsls	r2, r2, #29
 80027e8:	4313      	orrs	r3, r2
 80027ea:	4662      	mov	r2, ip
 80027ec:	08d4      	lsrs	r4, r2, #3
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	0312      	lsls	r2, r2, #12
 80027f2:	4214      	tst	r4, r2
 80027f4:	d007      	beq.n	8002806 <__aeabi_dsub+0x70a>
 80027f6:	08c8      	lsrs	r0, r1, #3
 80027f8:	4210      	tst	r0, r2
 80027fa:	d104      	bne.n	8002806 <__aeabi_dsub+0x70a>
 80027fc:	465d      	mov	r5, fp
 80027fe:	0004      	movs	r4, r0
 8002800:	08fb      	lsrs	r3, r7, #3
 8002802:	0749      	lsls	r1, r1, #29
 8002804:	430b      	orrs	r3, r1
 8002806:	0f5a      	lsrs	r2, r3, #29
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	0752      	lsls	r2, r2, #29
 800280c:	08db      	lsrs	r3, r3, #3
 800280e:	4313      	orrs	r3, r2
 8002810:	e5fe      	b.n	8002410 <__aeabi_dsub+0x314>
 8002812:	2300      	movs	r3, #0
 8002814:	4a01      	ldr	r2, [pc, #4]	; (800281c <__aeabi_dsub+0x720>)
 8002816:	001c      	movs	r4, r3
 8002818:	e513      	b.n	8002242 <__aeabi_dsub+0x146>
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	000007ff 	.word	0x000007ff

08002820 <__aeabi_ui2d>:
 8002820:	b510      	push	{r4, lr}
 8002822:	1e04      	subs	r4, r0, #0
 8002824:	d010      	beq.n	8002848 <__aeabi_ui2d+0x28>
 8002826:	f000 f8f1 	bl	8002a0c <__clzsi2>
 800282a:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <__aeabi_ui2d+0x48>)
 800282c:	1a1b      	subs	r3, r3, r0
 800282e:	280a      	cmp	r0, #10
 8002830:	dc11      	bgt.n	8002856 <__aeabi_ui2d+0x36>
 8002832:	220b      	movs	r2, #11
 8002834:	0021      	movs	r1, r4
 8002836:	1a12      	subs	r2, r2, r0
 8002838:	40d1      	lsrs	r1, r2
 800283a:	3015      	adds	r0, #21
 800283c:	030a      	lsls	r2, r1, #12
 800283e:	055b      	lsls	r3, r3, #21
 8002840:	4084      	lsls	r4, r0
 8002842:	0b12      	lsrs	r2, r2, #12
 8002844:	0d5b      	lsrs	r3, r3, #21
 8002846:	e001      	b.n	800284c <__aeabi_ui2d+0x2c>
 8002848:	2300      	movs	r3, #0
 800284a:	2200      	movs	r2, #0
 800284c:	051b      	lsls	r3, r3, #20
 800284e:	4313      	orrs	r3, r2
 8002850:	0020      	movs	r0, r4
 8002852:	0019      	movs	r1, r3
 8002854:	bd10      	pop	{r4, pc}
 8002856:	0022      	movs	r2, r4
 8002858:	380b      	subs	r0, #11
 800285a:	4082      	lsls	r2, r0
 800285c:	055b      	lsls	r3, r3, #21
 800285e:	0312      	lsls	r2, r2, #12
 8002860:	2400      	movs	r4, #0
 8002862:	0b12      	lsrs	r2, r2, #12
 8002864:	0d5b      	lsrs	r3, r3, #21
 8002866:	e7f1      	b.n	800284c <__aeabi_ui2d+0x2c>
 8002868:	0000041e 	.word	0x0000041e

0800286c <__aeabi_f2d>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	0043      	lsls	r3, r0, #1
 8002870:	0246      	lsls	r6, r0, #9
 8002872:	0fc4      	lsrs	r4, r0, #31
 8002874:	20fe      	movs	r0, #254	; 0xfe
 8002876:	0e1b      	lsrs	r3, r3, #24
 8002878:	1c59      	adds	r1, r3, #1
 800287a:	0a75      	lsrs	r5, r6, #9
 800287c:	4208      	tst	r0, r1
 800287e:	d00c      	beq.n	800289a <__aeabi_f2d+0x2e>
 8002880:	22e0      	movs	r2, #224	; 0xe0
 8002882:	0092      	lsls	r2, r2, #2
 8002884:	4694      	mov	ip, r2
 8002886:	076d      	lsls	r5, r5, #29
 8002888:	0b36      	lsrs	r6, r6, #12
 800288a:	4463      	add	r3, ip
 800288c:	051b      	lsls	r3, r3, #20
 800288e:	4333      	orrs	r3, r6
 8002890:	07e4      	lsls	r4, r4, #31
 8002892:	4323      	orrs	r3, r4
 8002894:	0028      	movs	r0, r5
 8002896:	0019      	movs	r1, r3
 8002898:	bd70      	pop	{r4, r5, r6, pc}
 800289a:	2b00      	cmp	r3, #0
 800289c:	d114      	bne.n	80028c8 <__aeabi_f2d+0x5c>
 800289e:	2d00      	cmp	r5, #0
 80028a0:	d01b      	beq.n	80028da <__aeabi_f2d+0x6e>
 80028a2:	0028      	movs	r0, r5
 80028a4:	f000 f8b2 	bl	8002a0c <__clzsi2>
 80028a8:	280a      	cmp	r0, #10
 80028aa:	dc1c      	bgt.n	80028e6 <__aeabi_f2d+0x7a>
 80028ac:	230b      	movs	r3, #11
 80028ae:	002e      	movs	r6, r5
 80028b0:	1a1b      	subs	r3, r3, r0
 80028b2:	40de      	lsrs	r6, r3
 80028b4:	0003      	movs	r3, r0
 80028b6:	3315      	adds	r3, #21
 80028b8:	409d      	lsls	r5, r3
 80028ba:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <__aeabi_f2d+0x88>)
 80028bc:	0336      	lsls	r6, r6, #12
 80028be:	1a12      	subs	r2, r2, r0
 80028c0:	0552      	lsls	r2, r2, #21
 80028c2:	0b36      	lsrs	r6, r6, #12
 80028c4:	0d53      	lsrs	r3, r2, #21
 80028c6:	e7e1      	b.n	800288c <__aeabi_f2d+0x20>
 80028c8:	2d00      	cmp	r5, #0
 80028ca:	d009      	beq.n	80028e0 <__aeabi_f2d+0x74>
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	0b36      	lsrs	r6, r6, #12
 80028d0:	0312      	lsls	r2, r2, #12
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <__aeabi_f2d+0x8c>)
 80028d4:	076d      	lsls	r5, r5, #29
 80028d6:	4316      	orrs	r6, r2
 80028d8:	e7d8      	b.n	800288c <__aeabi_f2d+0x20>
 80028da:	2300      	movs	r3, #0
 80028dc:	2600      	movs	r6, #0
 80028de:	e7d5      	b.n	800288c <__aeabi_f2d+0x20>
 80028e0:	2600      	movs	r6, #0
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <__aeabi_f2d+0x8c>)
 80028e4:	e7d2      	b.n	800288c <__aeabi_f2d+0x20>
 80028e6:	0003      	movs	r3, r0
 80028e8:	3b0b      	subs	r3, #11
 80028ea:	409d      	lsls	r5, r3
 80028ec:	002e      	movs	r6, r5
 80028ee:	2500      	movs	r5, #0
 80028f0:	e7e3      	b.n	80028ba <__aeabi_f2d+0x4e>
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	00000389 	.word	0x00000389
 80028f8:	000007ff 	.word	0x000007ff

080028fc <__aeabi_d2f>:
 80028fc:	0002      	movs	r2, r0
 80028fe:	004b      	lsls	r3, r1, #1
 8002900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002902:	0d5b      	lsrs	r3, r3, #21
 8002904:	030c      	lsls	r4, r1, #12
 8002906:	4e3d      	ldr	r6, [pc, #244]	; (80029fc <__aeabi_d2f+0x100>)
 8002908:	0a64      	lsrs	r4, r4, #9
 800290a:	0f40      	lsrs	r0, r0, #29
 800290c:	1c5f      	adds	r7, r3, #1
 800290e:	0fc9      	lsrs	r1, r1, #31
 8002910:	4304      	orrs	r4, r0
 8002912:	00d5      	lsls	r5, r2, #3
 8002914:	4237      	tst	r7, r6
 8002916:	d00a      	beq.n	800292e <__aeabi_d2f+0x32>
 8002918:	4839      	ldr	r0, [pc, #228]	; (8002a00 <__aeabi_d2f+0x104>)
 800291a:	181e      	adds	r6, r3, r0
 800291c:	2efe      	cmp	r6, #254	; 0xfe
 800291e:	dd16      	ble.n	800294e <__aeabi_d2f+0x52>
 8002920:	20ff      	movs	r0, #255	; 0xff
 8002922:	2400      	movs	r4, #0
 8002924:	05c0      	lsls	r0, r0, #23
 8002926:	4320      	orrs	r0, r4
 8002928:	07c9      	lsls	r1, r1, #31
 800292a:	4308      	orrs	r0, r1
 800292c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <__aeabi_d2f+0x44>
 8002932:	432c      	orrs	r4, r5
 8002934:	d026      	beq.n	8002984 <__aeabi_d2f+0x88>
 8002936:	2205      	movs	r2, #5
 8002938:	0192      	lsls	r2, r2, #6
 800293a:	0a54      	lsrs	r4, r2, #9
 800293c:	b2d8      	uxtb	r0, r3
 800293e:	e7f1      	b.n	8002924 <__aeabi_d2f+0x28>
 8002940:	4325      	orrs	r5, r4
 8002942:	d0ed      	beq.n	8002920 <__aeabi_d2f+0x24>
 8002944:	2080      	movs	r0, #128	; 0x80
 8002946:	03c0      	lsls	r0, r0, #15
 8002948:	4304      	orrs	r4, r0
 800294a:	20ff      	movs	r0, #255	; 0xff
 800294c:	e7ea      	b.n	8002924 <__aeabi_d2f+0x28>
 800294e:	2e00      	cmp	r6, #0
 8002950:	dd1b      	ble.n	800298a <__aeabi_d2f+0x8e>
 8002952:	0192      	lsls	r2, r2, #6
 8002954:	1e53      	subs	r3, r2, #1
 8002956:	419a      	sbcs	r2, r3
 8002958:	00e4      	lsls	r4, r4, #3
 800295a:	0f6d      	lsrs	r5, r5, #29
 800295c:	4322      	orrs	r2, r4
 800295e:	432a      	orrs	r2, r5
 8002960:	0753      	lsls	r3, r2, #29
 8002962:	d048      	beq.n	80029f6 <__aeabi_d2f+0xfa>
 8002964:	230f      	movs	r3, #15
 8002966:	4013      	ands	r3, r2
 8002968:	2b04      	cmp	r3, #4
 800296a:	d000      	beq.n	800296e <__aeabi_d2f+0x72>
 800296c:	3204      	adds	r2, #4
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	04db      	lsls	r3, r3, #19
 8002972:	4013      	ands	r3, r2
 8002974:	d03f      	beq.n	80029f6 <__aeabi_d2f+0xfa>
 8002976:	1c70      	adds	r0, r6, #1
 8002978:	2efe      	cmp	r6, #254	; 0xfe
 800297a:	d0d1      	beq.n	8002920 <__aeabi_d2f+0x24>
 800297c:	0192      	lsls	r2, r2, #6
 800297e:	0a54      	lsrs	r4, r2, #9
 8002980:	b2c0      	uxtb	r0, r0
 8002982:	e7cf      	b.n	8002924 <__aeabi_d2f+0x28>
 8002984:	2000      	movs	r0, #0
 8002986:	2400      	movs	r4, #0
 8002988:	e7cc      	b.n	8002924 <__aeabi_d2f+0x28>
 800298a:	0032      	movs	r2, r6
 800298c:	3217      	adds	r2, #23
 800298e:	db22      	blt.n	80029d6 <__aeabi_d2f+0xda>
 8002990:	2080      	movs	r0, #128	; 0x80
 8002992:	0400      	lsls	r0, r0, #16
 8002994:	4320      	orrs	r0, r4
 8002996:	241e      	movs	r4, #30
 8002998:	1ba4      	subs	r4, r4, r6
 800299a:	2c1f      	cmp	r4, #31
 800299c:	dd1d      	ble.n	80029da <__aeabi_d2f+0xde>
 800299e:	2202      	movs	r2, #2
 80029a0:	4252      	negs	r2, r2
 80029a2:	1b96      	subs	r6, r2, r6
 80029a4:	0002      	movs	r2, r0
 80029a6:	40f2      	lsrs	r2, r6
 80029a8:	0016      	movs	r6, r2
 80029aa:	2c20      	cmp	r4, #32
 80029ac:	d004      	beq.n	80029b8 <__aeabi_d2f+0xbc>
 80029ae:	4a15      	ldr	r2, [pc, #84]	; (8002a04 <__aeabi_d2f+0x108>)
 80029b0:	4694      	mov	ip, r2
 80029b2:	4463      	add	r3, ip
 80029b4:	4098      	lsls	r0, r3
 80029b6:	4305      	orrs	r5, r0
 80029b8:	002a      	movs	r2, r5
 80029ba:	1e53      	subs	r3, r2, #1
 80029bc:	419a      	sbcs	r2, r3
 80029be:	4332      	orrs	r2, r6
 80029c0:	2600      	movs	r6, #0
 80029c2:	0753      	lsls	r3, r2, #29
 80029c4:	d1ce      	bne.n	8002964 <__aeabi_d2f+0x68>
 80029c6:	2480      	movs	r4, #128	; 0x80
 80029c8:	0013      	movs	r3, r2
 80029ca:	04e4      	lsls	r4, r4, #19
 80029cc:	2001      	movs	r0, #1
 80029ce:	4023      	ands	r3, r4
 80029d0:	4222      	tst	r2, r4
 80029d2:	d1d3      	bne.n	800297c <__aeabi_d2f+0x80>
 80029d4:	e7b0      	b.n	8002938 <__aeabi_d2f+0x3c>
 80029d6:	2300      	movs	r3, #0
 80029d8:	e7ad      	b.n	8002936 <__aeabi_d2f+0x3a>
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <__aeabi_d2f+0x10c>)
 80029dc:	4694      	mov	ip, r2
 80029de:	002a      	movs	r2, r5
 80029e0:	40e2      	lsrs	r2, r4
 80029e2:	0014      	movs	r4, r2
 80029e4:	002a      	movs	r2, r5
 80029e6:	4463      	add	r3, ip
 80029e8:	409a      	lsls	r2, r3
 80029ea:	4098      	lsls	r0, r3
 80029ec:	1e55      	subs	r5, r2, #1
 80029ee:	41aa      	sbcs	r2, r5
 80029f0:	4302      	orrs	r2, r0
 80029f2:	4322      	orrs	r2, r4
 80029f4:	e7e4      	b.n	80029c0 <__aeabi_d2f+0xc4>
 80029f6:	0033      	movs	r3, r6
 80029f8:	e79e      	b.n	8002938 <__aeabi_d2f+0x3c>
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	000007fe 	.word	0x000007fe
 8002a00:	fffffc80 	.word	0xfffffc80
 8002a04:	fffffca2 	.word	0xfffffca2
 8002a08:	fffffc82 	.word	0xfffffc82

08002a0c <__clzsi2>:
 8002a0c:	211c      	movs	r1, #28
 8002a0e:	2301      	movs	r3, #1
 8002a10:	041b      	lsls	r3, r3, #16
 8002a12:	4298      	cmp	r0, r3
 8002a14:	d301      	bcc.n	8002a1a <__clzsi2+0xe>
 8002a16:	0c00      	lsrs	r0, r0, #16
 8002a18:	3910      	subs	r1, #16
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	4298      	cmp	r0, r3
 8002a1e:	d301      	bcc.n	8002a24 <__clzsi2+0x18>
 8002a20:	0a00      	lsrs	r0, r0, #8
 8002a22:	3908      	subs	r1, #8
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	4298      	cmp	r0, r3
 8002a28:	d301      	bcc.n	8002a2e <__clzsi2+0x22>
 8002a2a:	0900      	lsrs	r0, r0, #4
 8002a2c:	3904      	subs	r1, #4
 8002a2e:	a202      	add	r2, pc, #8	; (adr r2, 8002a38 <__clzsi2+0x2c>)
 8002a30:	5c10      	ldrb	r0, [r2, r0]
 8002a32:	1840      	adds	r0, r0, r1
 8002a34:	4770      	bx	lr
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	02020304 	.word	0x02020304
 8002a3c:	01010101 	.word	0x01010101
	...

08002a48 <__clzdi2>:
 8002a48:	b510      	push	{r4, lr}
 8002a4a:	2900      	cmp	r1, #0
 8002a4c:	d103      	bne.n	8002a56 <__clzdi2+0xe>
 8002a4e:	f7ff ffdd 	bl	8002a0c <__clzsi2>
 8002a52:	3020      	adds	r0, #32
 8002a54:	e002      	b.n	8002a5c <__clzdi2+0x14>
 8002a56:	0008      	movs	r0, r1
 8002a58:	f7ff ffd8 	bl	8002a0c <__clzsi2>
 8002a5c:	bd10      	pop	{r4, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)

08002a60 <arm_up>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void arm_up(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	error2 = theta2_up - theta2;
 8002a64:	4bd0      	ldr	r3, [pc, #832]	; (8002da8 <arm_up+0x348>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	1c18      	adds	r0, r3, #0
 8002a6a:	f7ff feff 	bl	800286c <__aeabi_f2d>
 8002a6e:	0002      	movs	r2, r0
 8002a70:	000b      	movs	r3, r1
 8002a72:	48ce      	ldr	r0, [pc, #824]	; (8002dac <arm_up+0x34c>)
 8002a74:	49ce      	ldr	r1, [pc, #824]	; (8002db0 <arm_up+0x350>)
 8002a76:	f7ff fb41 	bl	80020fc <__aeabi_dsub>
 8002a7a:	0002      	movs	r2, r0
 8002a7c:	000b      	movs	r3, r1
 8002a7e:	0010      	movs	r0, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	f7ff ff3b 	bl	80028fc <__aeabi_d2f>
 8002a86:	1c02      	adds	r2, r0, #0
 8002a88:	4bca      	ldr	r3, [pc, #808]	; (8002db4 <arm_up+0x354>)
 8002a8a:	601a      	str	r2, [r3, #0]
	velocity_ref2 = P(error2,kp12);
 8002a8c:	4bc9      	ldr	r3, [pc, #804]	; (8002db4 <arm_up+0x354>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4ac9      	ldr	r2, [pc, #804]	; (8002db8 <arm_up+0x358>)
 8002a92:	1c11      	adds	r1, r2, #0
 8002a94:	1c18      	adds	r0, r3, #0
 8002a96:	f001 fe23 	bl	80046e0 <P>
 8002a9a:	1c02      	adds	r2, r0, #0
 8002a9c:	4bc7      	ldr	r3, [pc, #796]	; (8002dbc <arm_up+0x35c>)
 8002a9e:	601a      	str	r2, [r3, #0]
	if(velocity_ref2 != 0)
 8002aa0:	4bc6      	ldr	r3, [pc, #792]	; (8002dbc <arm_up+0x35c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	1c18      	adds	r0, r3, #0
 8002aa8:	f7fd fcec 	bl	8000484 <__aeabi_fcmpeq>
 8002aac:	1e03      	subs	r3, r0, #0
 8002aae:	d137      	bne.n	8002b20 <arm_up+0xc0>
	{
		out2 = PI(velocity_ref2 - velocity2, kp2, ki2, Ts);
 8002ab0:	4bc2      	ldr	r3, [pc, #776]	; (8002dbc <arm_up+0x35c>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4bc2      	ldr	r3, [pc, #776]	; (8002dc0 <arm_up+0x360>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	1c19      	adds	r1, r3, #0
 8002aba:	1c10      	adds	r0, r2, #0
 8002abc:	f7fe faa0 	bl	8001000 <__aeabi_fsub>
 8002ac0:	1c03      	adds	r3, r0, #0
 8002ac2:	1c18      	adds	r0, r3, #0
 8002ac4:	4bbf      	ldr	r3, [pc, #764]	; (8002dc4 <arm_up+0x364>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4abf      	ldr	r2, [pc, #764]	; (8002dc8 <arm_up+0x368>)
 8002aca:	49c0      	ldr	r1, [pc, #768]	; (8002dcc <arm_up+0x36c>)
 8002acc:	f001 fe54 	bl	8004778 <PI>
 8002ad0:	1c02      	adds	r2, r0, #0
 8002ad2:	4bbf      	ldr	r3, [pc, #764]	; (8002dd0 <arm_up+0x370>)
 8002ad4:	601a      	str	r2, [r3, #0]

	      if(out2 < 0)
 8002ad6:	4bbe      	ldr	r3, [pc, #760]	; (8002dd0 <arm_up+0x370>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2100      	movs	r1, #0
 8002adc:	1c18      	adds	r0, r3, #0
 8002ade:	f7fd fcd7 	bl	8000490 <__aeabi_fcmplt>
 8002ae2:	1e03      	subs	r3, r0, #0
 8002ae4:	d00f      	beq.n	8002b06 <arm_up+0xa6>
	      {
	    	  direc[1] = 'f';
 8002ae6:	4bbb      	ldr	r3, [pc, #748]	; (8002dd4 <arm_up+0x374>)
 8002ae8:	2266      	movs	r2, #102	; 0x66
 8002aea:	705a      	strb	r2, [r3, #1]
	    	  pwm2 = (uint8_t)(-out2);
 8002aec:	4bb8      	ldr	r3, [pc, #736]	; (8002dd0 <arm_up+0x370>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	0612      	lsls	r2, r2, #24
 8002af4:	4053      	eors	r3, r2
 8002af6:	1c18      	adds	r0, r3, #0
 8002af8:	f7fd fd12 	bl	8000520 <__aeabi_f2uiz>
 8002afc:	0003      	movs	r3, r0
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	4bb5      	ldr	r3, [pc, #724]	; (8002dd8 <arm_up+0x378>)
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e012      	b.n	8002b2c <arm_up+0xcc>
	      }
	      else
	      {
	    	  direc[1] = 'b';
 8002b06:	4bb3      	ldr	r3, [pc, #716]	; (8002dd4 <arm_up+0x374>)
 8002b08:	2262      	movs	r2, #98	; 0x62
 8002b0a:	705a      	strb	r2, [r3, #1]
	    	  pwm2 = (uint8_t)out2;
 8002b0c:	4bb0      	ldr	r3, [pc, #704]	; (8002dd0 <arm_up+0x370>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1c18      	adds	r0, r3, #0
 8002b12:	f7fd fd05 	bl	8000520 <__aeabi_f2uiz>
 8002b16:	0003      	movs	r3, r0
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4baf      	ldr	r3, [pc, #700]	; (8002dd8 <arm_up+0x378>)
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e005      	b.n	8002b2c <arm_up+0xcc>
	      }
	}
	else // velocity_ref2 = 0  (motor2 off)
	{
		//motor2 off
		direc[1] = 's';
 8002b20:	4bac      	ldr	r3, [pc, #688]	; (8002dd4 <arm_up+0x374>)
 8002b22:	2273      	movs	r2, #115	; 0x73
 8002b24:	705a      	strb	r2, [r3, #1]
		pwm2 = 0;
 8002b26:	4bac      	ldr	r3, [pc, #688]	; (8002dd8 <arm_up+0x378>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]


	}
	error3 = theta3_up - theta3;
 8002b2c:	4bab      	ldr	r3, [pc, #684]	; (8002ddc <arm_up+0x37c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	1c18      	adds	r0, r3, #0
 8002b32:	f7ff fe9b 	bl	800286c <__aeabi_f2d>
 8002b36:	0002      	movs	r2, r0
 8002b38:	000b      	movs	r3, r1
 8002b3a:	48a9      	ldr	r0, [pc, #676]	; (8002de0 <arm_up+0x380>)
 8002b3c:	49a9      	ldr	r1, [pc, #676]	; (8002de4 <arm_up+0x384>)
 8002b3e:	f7ff fadd 	bl	80020fc <__aeabi_dsub>
 8002b42:	0002      	movs	r2, r0
 8002b44:	000b      	movs	r3, r1
 8002b46:	0010      	movs	r0, r2
 8002b48:	0019      	movs	r1, r3
 8002b4a:	f7ff fed7 	bl	80028fc <__aeabi_d2f>
 8002b4e:	1c02      	adds	r2, r0, #0
 8002b50:	4ba5      	ldr	r3, [pc, #660]	; (8002de8 <arm_up+0x388>)
 8002b52:	601a      	str	r2, [r3, #0]
			error4 = theta4_up - theta4;
 8002b54:	4ba5      	ldr	r3, [pc, #660]	; (8002dec <arm_up+0x38c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	1c18      	adds	r0, r3, #0
 8002b5a:	f7ff fe87 	bl	800286c <__aeabi_f2d>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	000b      	movs	r3, r1
 8002b62:	48a3      	ldr	r0, [pc, #652]	; (8002df0 <arm_up+0x390>)
 8002b64:	49a3      	ldr	r1, [pc, #652]	; (8002df4 <arm_up+0x394>)
 8002b66:	f7ff fac9 	bl	80020fc <__aeabi_dsub>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	000b      	movs	r3, r1
 8002b6e:	0010      	movs	r0, r2
 8002b70:	0019      	movs	r1, r3
 8002b72:	f7ff fec3 	bl	80028fc <__aeabi_d2f>
 8002b76:	1c02      	adds	r2, r0, #0
 8002b78:	4b9f      	ldr	r3, [pc, #636]	; (8002df8 <arm_up+0x398>)
 8002b7a:	601a      	str	r2, [r3, #0]
			velocity_ref3 = P(error3, kp13);
 8002b7c:	4b9a      	ldr	r3, [pc, #616]	; (8002de8 <arm_up+0x388>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a9e      	ldr	r2, [pc, #632]	; (8002dfc <arm_up+0x39c>)
 8002b82:	1c11      	adds	r1, r2, #0
 8002b84:	1c18      	adds	r0, r3, #0
 8002b86:	f001 fdab 	bl	80046e0 <P>
 8002b8a:	1c02      	adds	r2, r0, #0
 8002b8c:	4b9c      	ldr	r3, [pc, #624]	; (8002e00 <arm_up+0x3a0>)
 8002b8e:	601a      	str	r2, [r3, #0]
			velocity_ref4 = P(error4, kp14);
 8002b90:	4b99      	ldr	r3, [pc, #612]	; (8002df8 <arm_up+0x398>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a88      	ldr	r2, [pc, #544]	; (8002db8 <arm_up+0x358>)
 8002b96:	1c11      	adds	r1, r2, #0
 8002b98:	1c18      	adds	r0, r3, #0
 8002b9a:	f001 fda1 	bl	80046e0 <P>
 8002b9e:	1c02      	adds	r2, r0, #0
 8002ba0:	4b98      	ldr	r3, [pc, #608]	; (8002e04 <arm_up+0x3a4>)
 8002ba2:	601a      	str	r2, [r3, #0]
			if(velocity_ref3 != 0)
 8002ba4:	4b96      	ldr	r3, [pc, #600]	; (8002e00 <arm_up+0x3a0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2100      	movs	r1, #0
 8002baa:	1c18      	adds	r0, r3, #0
 8002bac:	f7fd fc6a 	bl	8000484 <__aeabi_fcmpeq>
 8002bb0:	1e03      	subs	r3, r0, #0
 8002bb2:	d137      	bne.n	8002c24 <arm_up+0x1c4>
			{
				out3 = PI(velocity_ref3 - velocity3, kp3, ki3, Ts);
 8002bb4:	4b92      	ldr	r3, [pc, #584]	; (8002e00 <arm_up+0x3a0>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b93      	ldr	r3, [pc, #588]	; (8002e08 <arm_up+0x3a8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	1c19      	adds	r1, r3, #0
 8002bbe:	1c10      	adds	r0, r2, #0
 8002bc0:	f7fe fa1e 	bl	8001000 <__aeabi_fsub>
 8002bc4:	1c03      	adds	r3, r0, #0
 8002bc6:	1c18      	adds	r0, r3, #0
 8002bc8:	4b7e      	ldr	r3, [pc, #504]	; (8002dc4 <arm_up+0x364>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a7e      	ldr	r2, [pc, #504]	; (8002dc8 <arm_up+0x368>)
 8002bce:	497f      	ldr	r1, [pc, #508]	; (8002dcc <arm_up+0x36c>)
 8002bd0:	f001 fdd2 	bl	8004778 <PI>
 8002bd4:	1c02      	adds	r2, r0, #0
 8002bd6:	4b8d      	ldr	r3, [pc, #564]	; (8002e0c <arm_up+0x3ac>)
 8002bd8:	601a      	str	r2, [r3, #0]
			      if(out3 < 0)
 8002bda:	4b8c      	ldr	r3, [pc, #560]	; (8002e0c <arm_up+0x3ac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2100      	movs	r1, #0
 8002be0:	1c18      	adds	r0, r3, #0
 8002be2:	f7fd fc55 	bl	8000490 <__aeabi_fcmplt>
 8002be6:	1e03      	subs	r3, r0, #0
 8002be8:	d00f      	beq.n	8002c0a <arm_up+0x1aa>
			      {
			    	  direc[2] = 'f';
 8002bea:	4b7a      	ldr	r3, [pc, #488]	; (8002dd4 <arm_up+0x374>)
 8002bec:	2266      	movs	r2, #102	; 0x66
 8002bee:	709a      	strb	r2, [r3, #2]
			    	  pwm3 = (uint8_t)(-out3);
 8002bf0:	4b86      	ldr	r3, [pc, #536]	; (8002e0c <arm_up+0x3ac>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	0612      	lsls	r2, r2, #24
 8002bf8:	4053      	eors	r3, r2
 8002bfa:	1c18      	adds	r0, r3, #0
 8002bfc:	f7fd fc90 	bl	8000520 <__aeabi_f2uiz>
 8002c00:	0003      	movs	r3, r0
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	4b82      	ldr	r3, [pc, #520]	; (8002e10 <arm_up+0x3b0>)
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e012      	b.n	8002c30 <arm_up+0x1d0>
			      }
			      else
			      {
			    	  direc[2] = 'b';
 8002c0a:	4b72      	ldr	r3, [pc, #456]	; (8002dd4 <arm_up+0x374>)
 8002c0c:	2262      	movs	r2, #98	; 0x62
 8002c0e:	709a      	strb	r2, [r3, #2]
			    	  pwm3 = (uint8_t)out3;
 8002c10:	4b7e      	ldr	r3, [pc, #504]	; (8002e0c <arm_up+0x3ac>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1c18      	adds	r0, r3, #0
 8002c16:	f7fd fc83 	bl	8000520 <__aeabi_f2uiz>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4b7c      	ldr	r3, [pc, #496]	; (8002e10 <arm_up+0x3b0>)
 8002c20:	701a      	strb	r2, [r3, #0]
 8002c22:	e005      	b.n	8002c30 <arm_up+0x1d0>
			      }

			}
			else // velocity_ref3 = 0 (motor3 off)
			{
				direc[2] = 's';
 8002c24:	4b6b      	ldr	r3, [pc, #428]	; (8002dd4 <arm_up+0x374>)
 8002c26:	2273      	movs	r2, #115	; 0x73
 8002c28:	709a      	strb	r2, [r3, #2]
				pwm3 = 0;
 8002c2a:	4b79      	ldr	r3, [pc, #484]	; (8002e10 <arm_up+0x3b0>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
			}

			if(velocity_ref4 != 0)
 8002c30:	4b74      	ldr	r3, [pc, #464]	; (8002e04 <arm_up+0x3a4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2100      	movs	r1, #0
 8002c36:	1c18      	adds	r0, r3, #0
 8002c38:	f7fd fc24 	bl	8000484 <__aeabi_fcmpeq>
 8002c3c:	1e03      	subs	r3, r0, #0
 8002c3e:	d137      	bne.n	8002cb0 <arm_up+0x250>
			{
				 out4 = PI(velocity_ref4 - velocity4, kp4, ki4, Ts);
 8002c40:	4b70      	ldr	r3, [pc, #448]	; (8002e04 <arm_up+0x3a4>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b73      	ldr	r3, [pc, #460]	; (8002e14 <arm_up+0x3b4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	1c19      	adds	r1, r3, #0
 8002c4a:	1c10      	adds	r0, r2, #0
 8002c4c:	f7fe f9d8 	bl	8001000 <__aeabi_fsub>
 8002c50:	1c03      	adds	r3, r0, #0
 8002c52:	1c18      	adds	r0, r3, #0
 8002c54:	4b5b      	ldr	r3, [pc, #364]	; (8002dc4 <arm_up+0x364>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6f      	ldr	r2, [pc, #444]	; (8002e18 <arm_up+0x3b8>)
 8002c5a:	4970      	ldr	r1, [pc, #448]	; (8002e1c <arm_up+0x3bc>)
 8002c5c:	f001 fd8c 	bl	8004778 <PI>
 8002c60:	1c02      	adds	r2, r0, #0
 8002c62:	4b6f      	ldr	r3, [pc, #444]	; (8002e20 <arm_up+0x3c0>)
 8002c64:	601a      	str	r2, [r3, #0]
				  if(out4 < 0)
 8002c66:	4b6e      	ldr	r3, [pc, #440]	; (8002e20 <arm_up+0x3c0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	1c18      	adds	r0, r3, #0
 8002c6e:	f7fd fc0f 	bl	8000490 <__aeabi_fcmplt>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d00f      	beq.n	8002c96 <arm_up+0x236>
				  {
				      direc[3] = 'f';
 8002c76:	4b57      	ldr	r3, [pc, #348]	; (8002dd4 <arm_up+0x374>)
 8002c78:	2266      	movs	r2, #102	; 0x66
 8002c7a:	70da      	strb	r2, [r3, #3]
				      pwm4 = (uint8_t)(-out4);
 8002c7c:	4b68      	ldr	r3, [pc, #416]	; (8002e20 <arm_up+0x3c0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	0612      	lsls	r2, r2, #24
 8002c84:	4053      	eors	r3, r2
 8002c86:	1c18      	adds	r0, r3, #0
 8002c88:	f7fd fc4a 	bl	8000520 <__aeabi_f2uiz>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	4b64      	ldr	r3, [pc, #400]	; (8002e24 <arm_up+0x3c4>)
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e012      	b.n	8002cbc <arm_up+0x25c>
				  }
				  else
				  {
				      direc[3] = 'b';
 8002c96:	4b4f      	ldr	r3, [pc, #316]	; (8002dd4 <arm_up+0x374>)
 8002c98:	2262      	movs	r2, #98	; 0x62
 8002c9a:	70da      	strb	r2, [r3, #3]
				      pwm4 = (uint8_t)out4;
 8002c9c:	4b60      	ldr	r3, [pc, #384]	; (8002e20 <arm_up+0x3c0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	1c18      	adds	r0, r3, #0
 8002ca2:	f7fd fc3d 	bl	8000520 <__aeabi_f2uiz>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4b5e      	ldr	r3, [pc, #376]	; (8002e24 <arm_up+0x3c4>)
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e005      	b.n	8002cbc <arm_up+0x25c>
				  }
			}
			else // velocity_ref4 = 0 (motor4 off)
			{
				direc[3] = 's';
 8002cb0:	4b48      	ldr	r3, [pc, #288]	; (8002dd4 <arm_up+0x374>)
 8002cb2:	2273      	movs	r2, #115	; 0x73
 8002cb4:	70da      	strb	r2, [r3, #3]
				pwm4 = 0;
 8002cb6:	4b5b      	ldr	r3, [pc, #364]	; (8002e24 <arm_up+0x3c4>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
			}

			if(velocity_ref3 == 0 && velocity_ref4 == 0 && velocity_ref2 == 0)
 8002cbc:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <arm_up+0x3a0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	1c18      	adds	r0, r3, #0
 8002cc4:	f7fd fbde 	bl	8000484 <__aeabi_fcmpeq>
 8002cc8:	1e03      	subs	r3, r0, #0
 8002cca:	d012      	beq.n	8002cf2 <arm_up+0x292>
 8002ccc:	4b4d      	ldr	r3, [pc, #308]	; (8002e04 <arm_up+0x3a4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	1c18      	adds	r0, r3, #0
 8002cd4:	f7fd fbd6 	bl	8000484 <__aeabi_fcmpeq>
 8002cd8:	1e03      	subs	r3, r0, #0
 8002cda:	d00a      	beq.n	8002cf2 <arm_up+0x292>
 8002cdc:	4b37      	ldr	r3, [pc, #220]	; (8002dbc <arm_up+0x35c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	1c18      	adds	r0, r3, #0
 8002ce4:	f7fd fbce 	bl	8000484 <__aeabi_fcmpeq>
 8002ce8:	1e03      	subs	r3, r0, #0
 8002cea:	d002      	beq.n	8002cf2 <arm_up+0x292>
			{
				flag = arm_is_up;
 8002cec:	4b4e      	ldr	r3, [pc, #312]	; (8002e28 <arm_up+0x3c8>)
 8002cee:	2202      	movs	r2, #2
 8002cf0:	701a      	strb	r2, [r3, #0]
			}



	// saturation limits
	if(pwm2>100)
 8002cf2:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <arm_up+0x378>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d903      	bls.n	8002d02 <arm_up+0x2a2>
		pwm2=100;
 8002cfa:	4b37      	ldr	r3, [pc, #220]	; (8002dd8 <arm_up+0x378>)
 8002cfc:	2264      	movs	r2, #100	; 0x64
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	e029      	b.n	8002d56 <arm_up+0x2f6>
	else if(pwm2<15 && pwm2>2 && direc[1] == 'b')//up
 8002d02:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <arm_up+0x378>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b0e      	cmp	r3, #14
 8002d08:	d80b      	bhi.n	8002d22 <arm_up+0x2c2>
 8002d0a:	4b33      	ldr	r3, [pc, #204]	; (8002dd8 <arm_up+0x378>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d907      	bls.n	8002d22 <arm_up+0x2c2>
 8002d12:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <arm_up+0x374>)
 8002d14:	785b      	ldrb	r3, [r3, #1]
 8002d16:	2b62      	cmp	r3, #98	; 0x62
 8002d18:	d103      	bne.n	8002d22 <arm_up+0x2c2>
		pwm2=15;
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <arm_up+0x378>)
 8002d1c:	220f      	movs	r2, #15
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	e019      	b.n	8002d56 <arm_up+0x2f6>
	else if(pwm2<10 && pwm2>2 && direc[1] == 'f')// down
 8002d22:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <arm_up+0x378>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b09      	cmp	r3, #9
 8002d28:	d80b      	bhi.n	8002d42 <arm_up+0x2e2>
 8002d2a:	4b2b      	ldr	r3, [pc, #172]	; (8002dd8 <arm_up+0x378>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d907      	bls.n	8002d42 <arm_up+0x2e2>
 8002d32:	4b28      	ldr	r3, [pc, #160]	; (8002dd4 <arm_up+0x374>)
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	2b66      	cmp	r3, #102	; 0x66
 8002d38:	d103      	bne.n	8002d42 <arm_up+0x2e2>
		pwm2=5;
 8002d3a:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <arm_up+0x378>)
 8002d3c:	2205      	movs	r2, #5
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e009      	b.n	8002d56 <arm_up+0x2f6>
	else if(pwm2 <= 2) {
 8002d42:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <arm_up+0x378>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d805      	bhi.n	8002d56 <arm_up+0x2f6>
		direc[1] = 's';
 8002d4a:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <arm_up+0x374>)
 8002d4c:	2273      	movs	r2, #115	; 0x73
 8002d4e:	705a      	strb	r2, [r3, #1]
		pwm2=0;
 8002d50:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <arm_up+0x378>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
	}

	if(pwm3>50 && direc[2] == 'b'){
 8002d56:	4b2e      	ldr	r3, [pc, #184]	; (8002e10 <arm_up+0x3b0>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b32      	cmp	r3, #50	; 0x32
 8002d5c:	d907      	bls.n	8002d6e <arm_up+0x30e>
 8002d5e:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <arm_up+0x374>)
 8002d60:	789b      	ldrb	r3, [r3, #2]
 8002d62:	2b62      	cmp	r3, #98	; 0x62
 8002d64:	d103      	bne.n	8002d6e <arm_up+0x30e>
		pwm3=50;
 8002d66:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <arm_up+0x3b0>)
 8002d68:	2232      	movs	r2, #50	; 0x32
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	e078      	b.n	8002e60 <arm_up+0x400>
	}
	else if(pwm3 > 15 && direc[2] == 'f'){
 8002d6e:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <arm_up+0x3b0>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b0f      	cmp	r3, #15
 8002d74:	d907      	bls.n	8002d86 <arm_up+0x326>
 8002d76:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <arm_up+0x374>)
 8002d78:	789b      	ldrb	r3, [r3, #2]
 8002d7a:	2b66      	cmp	r3, #102	; 0x66
 8002d7c:	d103      	bne.n	8002d86 <arm_up+0x326>
		pwm3=5;
 8002d7e:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <arm_up+0x3b0>)
 8002d80:	2205      	movs	r2, #5
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e06c      	b.n	8002e60 <arm_up+0x400>
	}
	else if(pwm3<10 && pwm3>2 && direc[2] == 'f')
 8002d86:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <arm_up+0x3b0>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b09      	cmp	r3, #9
 8002d8c:	d84e      	bhi.n	8002e2c <arm_up+0x3cc>
 8002d8e:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <arm_up+0x3b0>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d94a      	bls.n	8002e2c <arm_up+0x3cc>
 8002d96:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <arm_up+0x374>)
 8002d98:	789b      	ldrb	r3, [r3, #2]
 8002d9a:	2b66      	cmp	r3, #102	; 0x66
 8002d9c:	d146      	bne.n	8002e2c <arm_up+0x3cc>
	{
		pwm3=5;
 8002d9e:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <arm_up+0x3b0>)
 8002da0:	2205      	movs	r2, #5
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	e05c      	b.n	8002e60 <arm_up+0x400>
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	20000090 	.word	0x20000090
 8002dac:	a3d70a3d 	.word	0xa3d70a3d
 8002db0:	40013d70 	.word	0x40013d70
 8002db4:	20000080 	.word	0x20000080
 8002db8:	40c00000 	.word	0x40c00000
 8002dbc:	200000b0 	.word	0x200000b0
 8002dc0:	200000a0 	.word	0x200000a0
 8002dc4:	20000058 	.word	0x20000058
 8002dc8:	40a00000 	.word	0x40a00000
 8002dcc:	41700000 	.word	0x41700000
 8002dd0:	20000060 	.word	0x20000060
 8002dd4:	200000bc 	.word	0x200000bc
 8002dd8:	2000004d 	.word	0x2000004d
 8002ddc:	20000094 	.word	0x20000094
 8002de0:	9999999a 	.word	0x9999999a
 8002de4:	40019999 	.word	0x40019999
 8002de8:	20000084 	.word	0x20000084
 8002dec:	20000098 	.word	0x20000098
 8002df0:	66666666 	.word	0x66666666
 8002df4:	3ff66666 	.word	0x3ff66666
 8002df8:	20000088 	.word	0x20000088
 8002dfc:	40d00000 	.word	0x40d00000
 8002e00:	200000b4 	.word	0x200000b4
 8002e04:	200000b8 	.word	0x200000b8
 8002e08:	200000a4 	.word	0x200000a4
 8002e0c:	20000064 	.word	0x20000064
 8002e10:	2000004e 	.word	0x2000004e
 8002e14:	200000a8 	.word	0x200000a8
 8002e18:	41a00000 	.word	0x41a00000
 8002e1c:	41200000 	.word	0x41200000
 8002e20:	20000068 	.word	0x20000068
 8002e24:	2000004f 	.word	0x2000004f
 8002e28:	2000002c 	.word	0x2000002c
	}
	else if(pwm3<18 && pwm3>2 && direc[2] == 'b')
 8002e2c:	4b2f      	ldr	r3, [pc, #188]	; (8002eec <arm_up+0x48c>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b11      	cmp	r3, #17
 8002e32:	d80b      	bhi.n	8002e4c <arm_up+0x3ec>
 8002e34:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <arm_up+0x48c>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d907      	bls.n	8002e4c <arm_up+0x3ec>
 8002e3c:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <arm_up+0x490>)
 8002e3e:	789b      	ldrb	r3, [r3, #2]
 8002e40:	2b62      	cmp	r3, #98	; 0x62
 8002e42:	d103      	bne.n	8002e4c <arm_up+0x3ec>
	{
		pwm3=18;
 8002e44:	4b29      	ldr	r3, [pc, #164]	; (8002eec <arm_up+0x48c>)
 8002e46:	2212      	movs	r2, #18
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	e009      	b.n	8002e60 <arm_up+0x400>
	}
	else if(pwm3 <= 2) {
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <arm_up+0x48c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d805      	bhi.n	8002e60 <arm_up+0x400>
		direc[2] = 's';
 8002e54:	4b26      	ldr	r3, [pc, #152]	; (8002ef0 <arm_up+0x490>)
 8002e56:	2273      	movs	r2, #115	; 0x73
 8002e58:	709a      	strb	r2, [r3, #2]
		pwm3=0;
 8002e5a:	4b24      	ldr	r3, [pc, #144]	; (8002eec <arm_up+0x48c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
	}

	if(pwm4>40 && direc[3] == 'b') // max speed up
 8002e60:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <arm_up+0x494>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b28      	cmp	r3, #40	; 0x28
 8002e66:	d906      	bls.n	8002e76 <arm_up+0x416>
 8002e68:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <arm_up+0x490>)
 8002e6a:	78db      	ldrb	r3, [r3, #3]
 8002e6c:	2b62      	cmp	r3, #98	; 0x62
 8002e6e:	d102      	bne.n	8002e76 <arm_up+0x416>
		pwm4=40;
 8002e70:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <arm_up+0x494>)
 8002e72:	2228      	movs	r2, #40	; 0x28
 8002e74:	701a      	strb	r2, [r3, #0]
	if(pwm4>10 && direc[3] == 'f')// max speed down
 8002e76:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <arm_up+0x494>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b0a      	cmp	r3, #10
 8002e7c:	d907      	bls.n	8002e8e <arm_up+0x42e>
 8002e7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ef0 <arm_up+0x490>)
 8002e80:	78db      	ldrb	r3, [r3, #3]
 8002e82:	2b66      	cmp	r3, #102	; 0x66
 8002e84:	d103      	bne.n	8002e8e <arm_up+0x42e>
		pwm4=10;
 8002e86:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <arm_up+0x494>)
 8002e88:	220a      	movs	r2, #10
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e02a      	b.n	8002ee4 <arm_up+0x484>
	else if(pwm4<18 && pwm4>3 && direc[3] == 'b')// min  speed up
 8002e8e:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <arm_up+0x494>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b11      	cmp	r3, #17
 8002e94:	d80b      	bhi.n	8002eae <arm_up+0x44e>
 8002e96:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <arm_up+0x494>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d907      	bls.n	8002eae <arm_up+0x44e>
 8002e9e:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <arm_up+0x490>)
 8002ea0:	78db      	ldrb	r3, [r3, #3]
 8002ea2:	2b62      	cmp	r3, #98	; 0x62
 8002ea4:	d103      	bne.n	8002eae <arm_up+0x44e>
		pwm4=18;
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <arm_up+0x494>)
 8002ea8:	2212      	movs	r2, #18
 8002eaa:	701a      	strb	r2, [r3, #0]
 8002eac:	e01a      	b.n	8002ee4 <arm_up+0x484>
	else if(pwm4<5 && pwm4>3 && direc[3] == 'f')// min speed down
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <arm_up+0x494>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d80b      	bhi.n	8002ece <arm_up+0x46e>
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <arm_up+0x494>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d907      	bls.n	8002ece <arm_up+0x46e>
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <arm_up+0x490>)
 8002ec0:	78db      	ldrb	r3, [r3, #3]
 8002ec2:	2b66      	cmp	r3, #102	; 0x66
 8002ec4:	d103      	bne.n	8002ece <arm_up+0x46e>
		pwm4=5;
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <arm_up+0x494>)
 8002ec8:	2205      	movs	r2, #5
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	e00a      	b.n	8002ee4 <arm_up+0x484>
	else if(pwm4 <= 3)
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <arm_up+0x494>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d806      	bhi.n	8002ee4 <arm_up+0x484>
	{
		direc[3] = 's';
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <arm_up+0x490>)
 8002ed8:	2273      	movs	r2, #115	; 0x73
 8002eda:	70da      	strb	r2, [r3, #3]
		pwm4=0;
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <arm_up+0x494>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
	}

}
 8002ee2:	e7ff      	b.n	8002ee4 <arm_up+0x484>
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	2000004e 	.word	0x2000004e
 8002ef0:	200000bc 	.word	0x200000bc
 8002ef4:	2000004f 	.word	0x2000004f

08002ef8 <arm_down>:


void arm_down(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
	error3 = theta3_down - theta3; // من اجل ارتياب قراءة الADC
 8002efc:	4bd3      	ldr	r3, [pc, #844]	; (800324c <arm_down+0x354>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	1c18      	adds	r0, r3, #0
 8002f02:	f7ff fcb3 	bl	800286c <__aeabi_f2d>
 8002f06:	0002      	movs	r2, r0
 8002f08:	000b      	movs	r3, r1
 8002f0a:	48d1      	ldr	r0, [pc, #836]	; (8003250 <arm_down+0x358>)
 8002f0c:	49d1      	ldr	r1, [pc, #836]	; (8003254 <arm_down+0x35c>)
 8002f0e:	f7ff f8f5 	bl	80020fc <__aeabi_dsub>
 8002f12:	0002      	movs	r2, r0
 8002f14:	000b      	movs	r3, r1
 8002f16:	0010      	movs	r0, r2
 8002f18:	0019      	movs	r1, r3
 8002f1a:	f7ff fcef 	bl	80028fc <__aeabi_d2f>
 8002f1e:	1c02      	adds	r2, r0, #0
 8002f20:	4bcd      	ldr	r3, [pc, #820]	; (8003258 <arm_down+0x360>)
 8002f22:	601a      	str	r2, [r3, #0]
	error4 = theta4_down - theta4 ;
 8002f24:	4bcd      	ldr	r3, [pc, #820]	; (800325c <arm_down+0x364>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	1c19      	adds	r1, r3, #0
 8002f2a:	2080      	movs	r0, #128	; 0x80
 8002f2c:	05c0      	lsls	r0, r0, #23
 8002f2e:	f7fe f867 	bl	8001000 <__aeabi_fsub>
 8002f32:	1c03      	adds	r3, r0, #0
 8002f34:	1c1a      	adds	r2, r3, #0
 8002f36:	4bca      	ldr	r3, [pc, #808]	; (8003260 <arm_down+0x368>)
 8002f38:	601a      	str	r2, [r3, #0]
	velocity_ref3 = P(error3, kp13);
 8002f3a:	4bc7      	ldr	r3, [pc, #796]	; (8003258 <arm_down+0x360>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4ac9      	ldr	r2, [pc, #804]	; (8003264 <arm_down+0x36c>)
 8002f40:	1c11      	adds	r1, r2, #0
 8002f42:	1c18      	adds	r0, r3, #0
 8002f44:	f001 fbcc 	bl	80046e0 <P>
 8002f48:	1c02      	adds	r2, r0, #0
 8002f4a:	4bc7      	ldr	r3, [pc, #796]	; (8003268 <arm_down+0x370>)
 8002f4c:	601a      	str	r2, [r3, #0]
	velocity_ref4 = P(error4, kp14);
 8002f4e:	4bc4      	ldr	r3, [pc, #784]	; (8003260 <arm_down+0x368>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4ac6      	ldr	r2, [pc, #792]	; (800326c <arm_down+0x374>)
 8002f54:	1c11      	adds	r1, r2, #0
 8002f56:	1c18      	adds	r0, r3, #0
 8002f58:	f001 fbc2 	bl	80046e0 <P>
 8002f5c:	1c02      	adds	r2, r0, #0
 8002f5e:	4bc4      	ldr	r3, [pc, #784]	; (8003270 <arm_down+0x378>)
 8002f60:	601a      	str	r2, [r3, #0]
	if(velocity_ref3 != 0)
 8002f62:	4bc1      	ldr	r3, [pc, #772]	; (8003268 <arm_down+0x370>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2100      	movs	r1, #0
 8002f68:	1c18      	adds	r0, r3, #0
 8002f6a:	f7fd fa8b 	bl	8000484 <__aeabi_fcmpeq>
 8002f6e:	1e03      	subs	r3, r0, #0
 8002f70:	d137      	bne.n	8002fe2 <arm_down+0xea>
	{
	    out3 = PI(velocity_ref3 - velocity3, kp3, ki3, Ts);
 8002f72:	4bbd      	ldr	r3, [pc, #756]	; (8003268 <arm_down+0x370>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4bbf      	ldr	r3, [pc, #764]	; (8003274 <arm_down+0x37c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	1c19      	adds	r1, r3, #0
 8002f7c:	1c10      	adds	r0, r2, #0
 8002f7e:	f7fe f83f 	bl	8001000 <__aeabi_fsub>
 8002f82:	1c03      	adds	r3, r0, #0
 8002f84:	1c18      	adds	r0, r3, #0
 8002f86:	4bbc      	ldr	r3, [pc, #752]	; (8003278 <arm_down+0x380>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4abc      	ldr	r2, [pc, #752]	; (800327c <arm_down+0x384>)
 8002f8c:	49bc      	ldr	r1, [pc, #752]	; (8003280 <arm_down+0x388>)
 8002f8e:	f001 fbf3 	bl	8004778 <PI>
 8002f92:	1c02      	adds	r2, r0, #0
 8002f94:	4bbb      	ldr	r3, [pc, #748]	; (8003284 <arm_down+0x38c>)
 8002f96:	601a      	str	r2, [r3, #0]
	      if(out3 < 0)
 8002f98:	4bba      	ldr	r3, [pc, #744]	; (8003284 <arm_down+0x38c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	1c18      	adds	r0, r3, #0
 8002fa0:	f7fd fa76 	bl	8000490 <__aeabi_fcmplt>
 8002fa4:	1e03      	subs	r3, r0, #0
 8002fa6:	d00f      	beq.n	8002fc8 <arm_down+0xd0>
	      {
	          direc[2] = 'f';
 8002fa8:	4bb7      	ldr	r3, [pc, #732]	; (8003288 <arm_down+0x390>)
 8002faa:	2266      	movs	r2, #102	; 0x66
 8002fac:	709a      	strb	r2, [r3, #2]
	          pwm3 = (uint8_t)(-out3);
 8002fae:	4bb5      	ldr	r3, [pc, #724]	; (8003284 <arm_down+0x38c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2280      	movs	r2, #128	; 0x80
 8002fb4:	0612      	lsls	r2, r2, #24
 8002fb6:	4053      	eors	r3, r2
 8002fb8:	1c18      	adds	r0, r3, #0
 8002fba:	f7fd fab1 	bl	8000520 <__aeabi_f2uiz>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4bb2      	ldr	r3, [pc, #712]	; (800328c <arm_down+0x394>)
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	e012      	b.n	8002fee <arm_down+0xf6>
	      }
	      else
	      {
	    	  direc[2] = 'b';
 8002fc8:	4baf      	ldr	r3, [pc, #700]	; (8003288 <arm_down+0x390>)
 8002fca:	2262      	movs	r2, #98	; 0x62
 8002fcc:	709a      	strb	r2, [r3, #2]
	    	  pwm3 = (uint8_t)out3;
 8002fce:	4bad      	ldr	r3, [pc, #692]	; (8003284 <arm_down+0x38c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	1c18      	adds	r0, r3, #0
 8002fd4:	f7fd faa4 	bl	8000520 <__aeabi_f2uiz>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	4bab      	ldr	r3, [pc, #684]	; (800328c <arm_down+0x394>)
 8002fde:	701a      	strb	r2, [r3, #0]
 8002fe0:	e005      	b.n	8002fee <arm_down+0xf6>
	      }

	 }
	 else // velocity_ref3 = 0 (motor3 off)
	 {
		  direc[2] = 's';
 8002fe2:	4ba9      	ldr	r3, [pc, #676]	; (8003288 <arm_down+0x390>)
 8002fe4:	2273      	movs	r2, #115	; 0x73
 8002fe6:	709a      	strb	r2, [r3, #2]
		  pwm3 = 0;
 8002fe8:	4ba8      	ldr	r3, [pc, #672]	; (800328c <arm_down+0x394>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
	 }

	 if(velocity_ref4 != 0)
 8002fee:	4ba0      	ldr	r3, [pc, #640]	; (8003270 <arm_down+0x378>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	1c18      	adds	r0, r3, #0
 8002ff6:	f7fd fa45 	bl	8000484 <__aeabi_fcmpeq>
 8002ffa:	1e03      	subs	r3, r0, #0
 8002ffc:	d137      	bne.n	800306e <arm_down+0x176>
	 {
		  out4 = PI(velocity_ref4 - velocity4, kp4, ki4, Ts);
 8002ffe:	4b9c      	ldr	r3, [pc, #624]	; (8003270 <arm_down+0x378>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4ba3      	ldr	r3, [pc, #652]	; (8003290 <arm_down+0x398>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	1c19      	adds	r1, r3, #0
 8003008:	1c10      	adds	r0, r2, #0
 800300a:	f7fd fff9 	bl	8001000 <__aeabi_fsub>
 800300e:	1c03      	adds	r3, r0, #0
 8003010:	1c18      	adds	r0, r3, #0
 8003012:	4b99      	ldr	r3, [pc, #612]	; (8003278 <arm_down+0x380>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a9f      	ldr	r2, [pc, #636]	; (8003294 <arm_down+0x39c>)
 8003018:	499f      	ldr	r1, [pc, #636]	; (8003298 <arm_down+0x3a0>)
 800301a:	f001 fbad 	bl	8004778 <PI>
 800301e:	1c02      	adds	r2, r0, #0
 8003020:	4b9e      	ldr	r3, [pc, #632]	; (800329c <arm_down+0x3a4>)
 8003022:	601a      	str	r2, [r3, #0]
		  if(out4 < 0)
 8003024:	4b9d      	ldr	r3, [pc, #628]	; (800329c <arm_down+0x3a4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2100      	movs	r1, #0
 800302a:	1c18      	adds	r0, r3, #0
 800302c:	f7fd fa30 	bl	8000490 <__aeabi_fcmplt>
 8003030:	1e03      	subs	r3, r0, #0
 8003032:	d00f      	beq.n	8003054 <arm_down+0x15c>
		  {
			  direc[3] = 'f';
 8003034:	4b94      	ldr	r3, [pc, #592]	; (8003288 <arm_down+0x390>)
 8003036:	2266      	movs	r2, #102	; 0x66
 8003038:	70da      	strb	r2, [r3, #3]
			  pwm4 = (uint8_t)(-out4);
 800303a:	4b98      	ldr	r3, [pc, #608]	; (800329c <arm_down+0x3a4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	0612      	lsls	r2, r2, #24
 8003042:	4053      	eors	r3, r2
 8003044:	1c18      	adds	r0, r3, #0
 8003046:	f7fd fa6b 	bl	8000520 <__aeabi_f2uiz>
 800304a:	0003      	movs	r3, r0
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4b94      	ldr	r3, [pc, #592]	; (80032a0 <arm_down+0x3a8>)
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	e012      	b.n	800307a <arm_down+0x182>
		  }
		  else
		  {
			  direc[3] = 'b';
 8003054:	4b8c      	ldr	r3, [pc, #560]	; (8003288 <arm_down+0x390>)
 8003056:	2262      	movs	r2, #98	; 0x62
 8003058:	70da      	strb	r2, [r3, #3]
		      pwm4 = (uint8_t)out4;
 800305a:	4b90      	ldr	r3, [pc, #576]	; (800329c <arm_down+0x3a4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	1c18      	adds	r0, r3, #0
 8003060:	f7fd fa5e 	bl	8000520 <__aeabi_f2uiz>
 8003064:	0003      	movs	r3, r0
 8003066:	b2da      	uxtb	r2, r3
 8003068:	4b8d      	ldr	r3, [pc, #564]	; (80032a0 <arm_down+0x3a8>)
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e005      	b.n	800307a <arm_down+0x182>
		  }
	 }
	 else  // velocity_ref4 = 0 (motor4 off)
	 {
		  direc[3] = 's';
 800306e:	4b86      	ldr	r3, [pc, #536]	; (8003288 <arm_down+0x390>)
 8003070:	2273      	movs	r2, #115	; 0x73
 8003072:	70da      	strb	r2, [r3, #3]
		  pwm4 = 0;
 8003074:	4b8a      	ldr	r3, [pc, #552]	; (80032a0 <arm_down+0x3a8>)
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
	 }
	 error2 = theta2_down - theta2;
 800307a:	4b8a      	ldr	r3, [pc, #552]	; (80032a4 <arm_down+0x3ac>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	1c18      	adds	r0, r3, #0
 8003080:	f7ff fbf4 	bl	800286c <__aeabi_f2d>
 8003084:	0002      	movs	r2, r0
 8003086:	000b      	movs	r3, r1
 8003088:	4887      	ldr	r0, [pc, #540]	; (80032a8 <arm_down+0x3b0>)
 800308a:	4988      	ldr	r1, [pc, #544]	; (80032ac <arm_down+0x3b4>)
 800308c:	f7ff f836 	bl	80020fc <__aeabi_dsub>
 8003090:	0002      	movs	r2, r0
 8003092:	000b      	movs	r3, r1
 8003094:	0010      	movs	r0, r2
 8003096:	0019      	movs	r1, r3
 8003098:	f7ff fc30 	bl	80028fc <__aeabi_d2f>
 800309c:	1c02      	adds	r2, r0, #0
 800309e:	4b84      	ldr	r3, [pc, #528]	; (80032b0 <arm_down+0x3b8>)
 80030a0:	601a      	str	r2, [r3, #0]
	 	      velocity_ref2 = P(error2,kp12);
 80030a2:	4b83      	ldr	r3, [pc, #524]	; (80032b0 <arm_down+0x3b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a71      	ldr	r2, [pc, #452]	; (800326c <arm_down+0x374>)
 80030a8:	1c11      	adds	r1, r2, #0
 80030aa:	1c18      	adds	r0, r3, #0
 80030ac:	f001 fb18 	bl	80046e0 <P>
 80030b0:	1c02      	adds	r2, r0, #0
 80030b2:	4b80      	ldr	r3, [pc, #512]	; (80032b4 <arm_down+0x3bc>)
 80030b4:	601a      	str	r2, [r3, #0]
	 	   	  if(velocity_ref2 != 0)
 80030b6:	4b7f      	ldr	r3, [pc, #508]	; (80032b4 <arm_down+0x3bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2100      	movs	r1, #0
 80030bc:	1c18      	adds	r0, r3, #0
 80030be:	f7fd f9e1 	bl	8000484 <__aeabi_fcmpeq>
 80030c2:	1e03      	subs	r3, r0, #0
 80030c4:	d137      	bne.n	8003136 <arm_down+0x23e>
	 		  {
	 			  out2 = PI(velocity_ref2 - velocity2, kp2, ki2, Ts);
 80030c6:	4b7b      	ldr	r3, [pc, #492]	; (80032b4 <arm_down+0x3bc>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b7b      	ldr	r3, [pc, #492]	; (80032b8 <arm_down+0x3c0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	1c19      	adds	r1, r3, #0
 80030d0:	1c10      	adds	r0, r2, #0
 80030d2:	f7fd ff95 	bl	8001000 <__aeabi_fsub>
 80030d6:	1c03      	adds	r3, r0, #0
 80030d8:	1c18      	adds	r0, r3, #0
 80030da:	4b67      	ldr	r3, [pc, #412]	; (8003278 <arm_down+0x380>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a67      	ldr	r2, [pc, #412]	; (800327c <arm_down+0x384>)
 80030e0:	4967      	ldr	r1, [pc, #412]	; (8003280 <arm_down+0x388>)
 80030e2:	f001 fb49 	bl	8004778 <PI>
 80030e6:	1c02      	adds	r2, r0, #0
 80030e8:	4b74      	ldr	r3, [pc, #464]	; (80032bc <arm_down+0x3c4>)
 80030ea:	601a      	str	r2, [r3, #0]

	 			  if(out2 < 0)
 80030ec:	4b73      	ldr	r3, [pc, #460]	; (80032bc <arm_down+0x3c4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2100      	movs	r1, #0
 80030f2:	1c18      	adds	r0, r3, #0
 80030f4:	f7fd f9cc 	bl	8000490 <__aeabi_fcmplt>
 80030f8:	1e03      	subs	r3, r0, #0
 80030fa:	d00f      	beq.n	800311c <arm_down+0x224>
	 			  {
	 			      direc[1] = 'f';
 80030fc:	4b62      	ldr	r3, [pc, #392]	; (8003288 <arm_down+0x390>)
 80030fe:	2266      	movs	r2, #102	; 0x66
 8003100:	705a      	strb	r2, [r3, #1]
	 			      pwm2 = (uint8_t)(-out2);
 8003102:	4b6e      	ldr	r3, [pc, #440]	; (80032bc <arm_down+0x3c4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2280      	movs	r2, #128	; 0x80
 8003108:	0612      	lsls	r2, r2, #24
 800310a:	4053      	eors	r3, r2
 800310c:	1c18      	adds	r0, r3, #0
 800310e:	f7fd fa07 	bl	8000520 <__aeabi_f2uiz>
 8003112:	0003      	movs	r3, r0
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4b6a      	ldr	r3, [pc, #424]	; (80032c0 <arm_down+0x3c8>)
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e012      	b.n	8003142 <arm_down+0x24a>
	 			  }
	 			  else
	 			  {
	 			      direc[1] = 'b';
 800311c:	4b5a      	ldr	r3, [pc, #360]	; (8003288 <arm_down+0x390>)
 800311e:	2262      	movs	r2, #98	; 0x62
 8003120:	705a      	strb	r2, [r3, #1]
	 			      pwm2 = (uint8_t)out2;
 8003122:	4b66      	ldr	r3, [pc, #408]	; (80032bc <arm_down+0x3c4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	1c18      	adds	r0, r3, #0
 8003128:	f7fd f9fa 	bl	8000520 <__aeabi_f2uiz>
 800312c:	0003      	movs	r3, r0
 800312e:	b2da      	uxtb	r2, r3
 8003130:	4b63      	ldr	r3, [pc, #396]	; (80032c0 <arm_down+0x3c8>)
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	e005      	b.n	8003142 <arm_down+0x24a>
	 			  }
	 		  }
	 	   	  else
	 	   	  {
	 			  direc[1] = 's';
 8003136:	4b54      	ldr	r3, [pc, #336]	; (8003288 <arm_down+0x390>)
 8003138:	2273      	movs	r2, #115	; 0x73
 800313a:	705a      	strb	r2, [r3, #1]
	 			  pwm2 = 0;
 800313c:	4b60      	ldr	r3, [pc, #384]	; (80032c0 <arm_down+0x3c8>)
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]

	 	   	  }
	 if(velocity_ref3 == 0 && velocity_ref4 == 0 && velocity_ref2 ==0)
 8003142:	4b49      	ldr	r3, [pc, #292]	; (8003268 <arm_down+0x370>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2100      	movs	r1, #0
 8003148:	1c18      	adds	r0, r3, #0
 800314a:	f7fd f99b 	bl	8000484 <__aeabi_fcmpeq>
 800314e:	1e03      	subs	r3, r0, #0
 8003150:	d012      	beq.n	8003178 <arm_down+0x280>
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <arm_down+0x378>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2100      	movs	r1, #0
 8003158:	1c18      	adds	r0, r3, #0
 800315a:	f7fd f993 	bl	8000484 <__aeabi_fcmpeq>
 800315e:	1e03      	subs	r3, r0, #0
 8003160:	d00a      	beq.n	8003178 <arm_down+0x280>
 8003162:	4b54      	ldr	r3, [pc, #336]	; (80032b4 <arm_down+0x3bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2100      	movs	r1, #0
 8003168:	1c18      	adds	r0, r3, #0
 800316a:	f7fd f98b 	bl	8000484 <__aeabi_fcmpeq>
 800316e:	1e03      	subs	r3, r0, #0
 8003170:	d002      	beq.n	8003178 <arm_down+0x280>
	 {
		 flag = arm_is_down;
 8003172:	4b54      	ldr	r3, [pc, #336]	; (80032c4 <arm_down+0x3cc>)
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
	 }

	// saturation limits
	if(pwm2>100)
 8003178:	4b51      	ldr	r3, [pc, #324]	; (80032c0 <arm_down+0x3c8>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b64      	cmp	r3, #100	; 0x64
 800317e:	d903      	bls.n	8003188 <arm_down+0x290>
		pwm2=100;
 8003180:	4b4f      	ldr	r3, [pc, #316]	; (80032c0 <arm_down+0x3c8>)
 8003182:	2264      	movs	r2, #100	; 0x64
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	e029      	b.n	80031dc <arm_down+0x2e4>
	else if(pwm2<15 && pwm2>2 && direc[1] == 'b')//up
 8003188:	4b4d      	ldr	r3, [pc, #308]	; (80032c0 <arm_down+0x3c8>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b0e      	cmp	r3, #14
 800318e:	d80b      	bhi.n	80031a8 <arm_down+0x2b0>
 8003190:	4b4b      	ldr	r3, [pc, #300]	; (80032c0 <arm_down+0x3c8>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d907      	bls.n	80031a8 <arm_down+0x2b0>
 8003198:	4b3b      	ldr	r3, [pc, #236]	; (8003288 <arm_down+0x390>)
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	2b62      	cmp	r3, #98	; 0x62
 800319e:	d103      	bne.n	80031a8 <arm_down+0x2b0>
		pwm2=15;
 80031a0:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <arm_down+0x3c8>)
 80031a2:	220f      	movs	r2, #15
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	e019      	b.n	80031dc <arm_down+0x2e4>
	else if(pwm2<15 && pwm2>2 && direc[1] == 'f')// down
 80031a8:	4b45      	ldr	r3, [pc, #276]	; (80032c0 <arm_down+0x3c8>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b0e      	cmp	r3, #14
 80031ae:	d80b      	bhi.n	80031c8 <arm_down+0x2d0>
 80031b0:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <arm_down+0x3c8>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d907      	bls.n	80031c8 <arm_down+0x2d0>
 80031b8:	4b33      	ldr	r3, [pc, #204]	; (8003288 <arm_down+0x390>)
 80031ba:	785b      	ldrb	r3, [r3, #1]
 80031bc:	2b66      	cmp	r3, #102	; 0x66
 80031be:	d103      	bne.n	80031c8 <arm_down+0x2d0>
		pwm2=5;
 80031c0:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <arm_down+0x3c8>)
 80031c2:	2205      	movs	r2, #5
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e009      	b.n	80031dc <arm_down+0x2e4>
	else if(pwm2 <= 2) {
 80031c8:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <arm_down+0x3c8>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d805      	bhi.n	80031dc <arm_down+0x2e4>
		direc[1] = 's';
 80031d0:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <arm_down+0x390>)
 80031d2:	2273      	movs	r2, #115	; 0x73
 80031d4:	705a      	strb	r2, [r3, #1]
		pwm2=0;
 80031d6:	4b3a      	ldr	r3, [pc, #232]	; (80032c0 <arm_down+0x3c8>)
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
	}

	if(pwm3>9 && direc[2] == 'f'){
 80031dc:	4b2b      	ldr	r3, [pc, #172]	; (800328c <arm_down+0x394>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b09      	cmp	r3, #9
 80031e2:	d907      	bls.n	80031f4 <arm_down+0x2fc>
 80031e4:	4b28      	ldr	r3, [pc, #160]	; (8003288 <arm_down+0x390>)
 80031e6:	789b      	ldrb	r3, [r3, #2]
 80031e8:	2b66      	cmp	r3, #102	; 0x66
 80031ea:	d103      	bne.n	80031f4 <arm_down+0x2fc>
		pwm3 = 9;
 80031ec:	4b27      	ldr	r3, [pc, #156]	; (800328c <arm_down+0x394>)
 80031ee:	2209      	movs	r2, #9
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e073      	b.n	80032dc <arm_down+0x3e4>
	}
	else if(pwm3>50 && direc[2] == 'b')
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <arm_down+0x394>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b32      	cmp	r3, #50	; 0x32
 80031fa:	d907      	bls.n	800320c <arm_down+0x314>
 80031fc:	4b22      	ldr	r3, [pc, #136]	; (8003288 <arm_down+0x390>)
 80031fe:	789b      	ldrb	r3, [r3, #2]
 8003200:	2b62      	cmp	r3, #98	; 0x62
 8003202:	d103      	bne.n	800320c <arm_down+0x314>
	{
		pwm3 = 50;
 8003204:	4b21      	ldr	r3, [pc, #132]	; (800328c <arm_down+0x394>)
 8003206:	2232      	movs	r2, #50	; 0x32
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e067      	b.n	80032dc <arm_down+0x3e4>
	}
	else if(pwm3<6 && pwm3>3 && direc[2] == 'f')
 800320c:	4b1f      	ldr	r3, [pc, #124]	; (800328c <arm_down+0x394>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b05      	cmp	r3, #5
 8003212:	d80b      	bhi.n	800322c <arm_down+0x334>
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <arm_down+0x394>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d907      	bls.n	800322c <arm_down+0x334>
 800321c:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <arm_down+0x390>)
 800321e:	789b      	ldrb	r3, [r3, #2]
 8003220:	2b66      	cmp	r3, #102	; 0x66
 8003222:	d103      	bne.n	800322c <arm_down+0x334>
	{
		pwm3=6;
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <arm_down+0x394>)
 8003226:	2206      	movs	r2, #6
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e057      	b.n	80032dc <arm_down+0x3e4>
	}
	else if(pwm3<15 && pwm3>3 && direc[2] == 'b')
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <arm_down+0x394>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b0e      	cmp	r3, #14
 8003232:	d849      	bhi.n	80032c8 <arm_down+0x3d0>
 8003234:	4b15      	ldr	r3, [pc, #84]	; (800328c <arm_down+0x394>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b03      	cmp	r3, #3
 800323a:	d945      	bls.n	80032c8 <arm_down+0x3d0>
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <arm_down+0x390>)
 800323e:	789b      	ldrb	r3, [r3, #2]
 8003240:	2b62      	cmp	r3, #98	; 0x62
 8003242:	d141      	bne.n	80032c8 <arm_down+0x3d0>
	{
		pwm3=15;
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <arm_down+0x394>)
 8003246:	220f      	movs	r2, #15
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e047      	b.n	80032dc <arm_down+0x3e4>
 800324c:	20000094 	.word	0x20000094
 8003250:	cccccccd 	.word	0xcccccccd
 8003254:	3ffccccc 	.word	0x3ffccccc
 8003258:	20000084 	.word	0x20000084
 800325c:	20000098 	.word	0x20000098
 8003260:	20000088 	.word	0x20000088
 8003264:	40d00000 	.word	0x40d00000
 8003268:	200000b4 	.word	0x200000b4
 800326c:	40c00000 	.word	0x40c00000
 8003270:	200000b8 	.word	0x200000b8
 8003274:	200000a4 	.word	0x200000a4
 8003278:	20000058 	.word	0x20000058
 800327c:	40a00000 	.word	0x40a00000
 8003280:	41700000 	.word	0x41700000
 8003284:	20000064 	.word	0x20000064
 8003288:	200000bc 	.word	0x200000bc
 800328c:	2000004e 	.word	0x2000004e
 8003290:	200000a8 	.word	0x200000a8
 8003294:	41a00000 	.word	0x41a00000
 8003298:	41200000 	.word	0x41200000
 800329c:	20000068 	.word	0x20000068
 80032a0:	2000004f 	.word	0x2000004f
 80032a4:	20000090 	.word	0x20000090
 80032a8:	7ae147ae 	.word	0x7ae147ae
 80032ac:	3ff7ae14 	.word	0x3ff7ae14
 80032b0:	20000080 	.word	0x20000080
 80032b4:	200000b0 	.word	0x200000b0
 80032b8:	200000a0 	.word	0x200000a0
 80032bc:	20000060 	.word	0x20000060
 80032c0:	2000004d 	.word	0x2000004d
 80032c4:	2000002c 	.word	0x2000002c
	}
	else if(pwm3 <= 3) {
 80032c8:	4b27      	ldr	r3, [pc, #156]	; (8003368 <arm_down+0x470>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d805      	bhi.n	80032dc <arm_down+0x3e4>
		direc[2] = 's';
 80032d0:	4b26      	ldr	r3, [pc, #152]	; (800336c <arm_down+0x474>)
 80032d2:	2273      	movs	r2, #115	; 0x73
 80032d4:	709a      	strb	r2, [r3, #2]
		pwm3=0;
 80032d6:	4b24      	ldr	r3, [pc, #144]	; (8003368 <arm_down+0x470>)
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
	}

	if(pwm4>30 && direc[3] == 'b') // max speed up
 80032dc:	4b24      	ldr	r3, [pc, #144]	; (8003370 <arm_down+0x478>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b1e      	cmp	r3, #30
 80032e2:	d906      	bls.n	80032f2 <arm_down+0x3fa>
 80032e4:	4b21      	ldr	r3, [pc, #132]	; (800336c <arm_down+0x474>)
 80032e6:	78db      	ldrb	r3, [r3, #3]
 80032e8:	2b62      	cmp	r3, #98	; 0x62
 80032ea:	d102      	bne.n	80032f2 <arm_down+0x3fa>
		pwm4=30;
 80032ec:	4b20      	ldr	r3, [pc, #128]	; (8003370 <arm_down+0x478>)
 80032ee:	221e      	movs	r2, #30
 80032f0:	701a      	strb	r2, [r3, #0]
	if(pwm4>8 && direc[3] == 'f')// max speed down
 80032f2:	4b1f      	ldr	r3, [pc, #124]	; (8003370 <arm_down+0x478>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d907      	bls.n	800330a <arm_down+0x412>
 80032fa:	4b1c      	ldr	r3, [pc, #112]	; (800336c <arm_down+0x474>)
 80032fc:	78db      	ldrb	r3, [r3, #3]
 80032fe:	2b66      	cmp	r3, #102	; 0x66
 8003300:	d103      	bne.n	800330a <arm_down+0x412>
		pwm4=8;
 8003302:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <arm_down+0x478>)
 8003304:	2208      	movs	r2, #8
 8003306:	701a      	strb	r2, [r3, #0]
 8003308:	e02a      	b.n	8003360 <arm_down+0x468>
	else if(pwm4<25 && pwm4>3 && direc[3] == 'b')// min  speed up
 800330a:	4b19      	ldr	r3, [pc, #100]	; (8003370 <arm_down+0x478>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b18      	cmp	r3, #24
 8003310:	d80b      	bhi.n	800332a <arm_down+0x432>
 8003312:	4b17      	ldr	r3, [pc, #92]	; (8003370 <arm_down+0x478>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b03      	cmp	r3, #3
 8003318:	d907      	bls.n	800332a <arm_down+0x432>
 800331a:	4b14      	ldr	r3, [pc, #80]	; (800336c <arm_down+0x474>)
 800331c:	78db      	ldrb	r3, [r3, #3]
 800331e:	2b62      	cmp	r3, #98	; 0x62
 8003320:	d103      	bne.n	800332a <arm_down+0x432>
		pwm4=25;
 8003322:	4b13      	ldr	r3, [pc, #76]	; (8003370 <arm_down+0x478>)
 8003324:	2219      	movs	r2, #25
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e01a      	b.n	8003360 <arm_down+0x468>
	else if(pwm4<5 && pwm4>3 && direc[3] == 'f')// min speed down
 800332a:	4b11      	ldr	r3, [pc, #68]	; (8003370 <arm_down+0x478>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b04      	cmp	r3, #4
 8003330:	d80b      	bhi.n	800334a <arm_down+0x452>
 8003332:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <arm_down+0x478>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b03      	cmp	r3, #3
 8003338:	d907      	bls.n	800334a <arm_down+0x452>
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <arm_down+0x474>)
 800333c:	78db      	ldrb	r3, [r3, #3]
 800333e:	2b66      	cmp	r3, #102	; 0x66
 8003340:	d103      	bne.n	800334a <arm_down+0x452>
		pwm4=5;
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <arm_down+0x478>)
 8003344:	2205      	movs	r2, #5
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e00a      	b.n	8003360 <arm_down+0x468>
	else if(pwm4 <= 3)
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <arm_down+0x478>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d806      	bhi.n	8003360 <arm_down+0x468>
	{
		direc[3] = 's';
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <arm_down+0x474>)
 8003354:	2273      	movs	r2, #115	; 0x73
 8003356:	70da      	strb	r2, [r3, #3]
		pwm4=0;
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <arm_down+0x478>)
 800335a:	2200      	movs	r2, #0
 800335c:	701a      	strb	r2, [r3, #0]
	}
}
 800335e:	e7ff      	b.n	8003360 <arm_down+0x468>
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	2000004e 	.word	0x2000004e
 800336c:	200000bc 	.word	0x200000bc
 8003370:	2000004f 	.word	0x2000004f

08003374 <rot_base>:
void rot_base(float teta)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	error1 = teta - theta1;
 800337c:	4b44      	ldr	r3, [pc, #272]	; (8003490 <rot_base+0x11c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	1c19      	adds	r1, r3, #0
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fd fe3c 	bl	8001000 <__aeabi_fsub>
 8003388:	1c03      	adds	r3, r0, #0
 800338a:	1c1a      	adds	r2, r3, #0
 800338c:	4b41      	ldr	r3, [pc, #260]	; (8003494 <rot_base+0x120>)
 800338e:	601a      	str	r2, [r3, #0]
	velocity_ref1=P(error1,kp11);
 8003390:	4b40      	ldr	r3, [pc, #256]	; (8003494 <rot_base+0x120>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a40      	ldr	r2, [pc, #256]	; (8003498 <rot_base+0x124>)
 8003396:	1c11      	adds	r1, r2, #0
 8003398:	1c18      	adds	r0, r3, #0
 800339a:	f001 f9a1 	bl	80046e0 <P>
 800339e:	1c02      	adds	r2, r0, #0
 80033a0:	4b3e      	ldr	r3, [pc, #248]	; (800349c <rot_base+0x128>)
 80033a2:	601a      	str	r2, [r3, #0]
	if(velocity_ref1 != 0)
 80033a4:	4b3d      	ldr	r3, [pc, #244]	; (800349c <rot_base+0x128>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2100      	movs	r1, #0
 80033aa:	1c18      	adds	r0, r3, #0
 80033ac:	f7fd f86a 	bl	8000484 <__aeabi_fcmpeq>
 80033b0:	1e03      	subs	r3, r0, #0
 80033b2:	d137      	bne.n	8003424 <rot_base+0xb0>
	{
	      out1 = PI(velocity_ref1 - velocity1, kp1, ki1, Ts);
 80033b4:	4b39      	ldr	r3, [pc, #228]	; (800349c <rot_base+0x128>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b39      	ldr	r3, [pc, #228]	; (80034a0 <rot_base+0x12c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	1c19      	adds	r1, r3, #0
 80033be:	1c10      	adds	r0, r2, #0
 80033c0:	f7fd fe1e 	bl	8001000 <__aeabi_fsub>
 80033c4:	1c03      	adds	r3, r0, #0
 80033c6:	1c18      	adds	r0, r3, #0
 80033c8:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <rot_base+0x130>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a36      	ldr	r2, [pc, #216]	; (80034a8 <rot_base+0x134>)
 80033ce:	4937      	ldr	r1, [pc, #220]	; (80034ac <rot_base+0x138>)
 80033d0:	f001 f9d2 	bl	8004778 <PI>
 80033d4:	1c02      	adds	r2, r0, #0
 80033d6:	4b36      	ldr	r3, [pc, #216]	; (80034b0 <rot_base+0x13c>)
 80033d8:	601a      	str	r2, [r3, #0]

	      if(out1 > 0)
 80033da:	4b35      	ldr	r3, [pc, #212]	; (80034b0 <rot_base+0x13c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2100      	movs	r1, #0
 80033e0:	1c18      	adds	r0, r3, #0
 80033e2:	f7fd f869 	bl	80004b8 <__aeabi_fcmpgt>
 80033e6:	1e03      	subs	r3, r0, #0
 80033e8:	d00c      	beq.n	8003404 <rot_base+0x90>
	      {
	    	  direc[0] = 'b';
 80033ea:	4b32      	ldr	r3, [pc, #200]	; (80034b4 <rot_base+0x140>)
 80033ec:	2262      	movs	r2, #98	; 0x62
 80033ee:	701a      	strb	r2, [r3, #0]
	    	  pwm1 = (uint8_t)out1;
 80033f0:	4b2f      	ldr	r3, [pc, #188]	; (80034b0 <rot_base+0x13c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	1c18      	adds	r0, r3, #0
 80033f6:	f7fd f893 	bl	8000520 <__aeabi_f2uiz>
 80033fa:	0003      	movs	r3, r0
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4b2e      	ldr	r3, [pc, #184]	; (80034b8 <rot_base+0x144>)
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	e01c      	b.n	800343e <rot_base+0xca>
	      }
	      else
	      {
	    	  direc[0] = 'f';
 8003404:	4b2b      	ldr	r3, [pc, #172]	; (80034b4 <rot_base+0x140>)
 8003406:	2266      	movs	r2, #102	; 0x66
 8003408:	701a      	strb	r2, [r3, #0]
	    	  pwm1 = (uint8_t)(-out1);
 800340a:	4b29      	ldr	r3, [pc, #164]	; (80034b0 <rot_base+0x13c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	0612      	lsls	r2, r2, #24
 8003412:	4053      	eors	r3, r2
 8003414:	1c18      	adds	r0, r3, #0
 8003416:	f7fd f883 	bl	8000520 <__aeabi_f2uiz>
 800341a:	0003      	movs	r3, r0
 800341c:	b2da      	uxtb	r2, r3
 800341e:	4b26      	ldr	r3, [pc, #152]	; (80034b8 <rot_base+0x144>)
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e00c      	b.n	800343e <rot_base+0xca>
	      }

	}
	else
	{
		  direc[0] = 's';
 8003424:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <rot_base+0x140>)
 8003426:	2273      	movs	r2, #115	; 0x73
 8003428:	701a      	strb	r2, [r3, #0]
		  pwm1 = 0;
 800342a:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <rot_base+0x144>)
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
		  base_position_now = teta;
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7fd f875 	bl	8000520 <__aeabi_f2uiz>
 8003436:	0003      	movs	r3, r0
 8003438:	b2da      	uxtb	r2, r3
 800343a:	4b20      	ldr	r3, [pc, #128]	; (80034bc <rot_base+0x148>)
 800343c:	701a      	strb	r2, [r3, #0]
	}


	// Saturation Limits...
	  if(pwm1>100)
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <rot_base+0x144>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d903      	bls.n	800344e <rot_base+0xda>
		  pwm1=100;
 8003446:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <rot_base+0x144>)
 8003448:	2264      	movs	r2, #100	; 0x64
 800344a:	701a      	strb	r2, [r3, #0]
	  {
		  direc[0] = 's';
		  pwm1 = 0;
		  base_position_now = (uint8_t)teta;
	  }
}
 800344c:	e01c      	b.n	8003488 <rot_base+0x114>
	  else if(pwm1<15 && pwm1>1)
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <rot_base+0x144>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b0e      	cmp	r3, #14
 8003454:	d807      	bhi.n	8003466 <rot_base+0xf2>
 8003456:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <rot_base+0x144>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d903      	bls.n	8003466 <rot_base+0xf2>
		  pwm1 = 12;
 800345e:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <rot_base+0x144>)
 8003460:	220c      	movs	r2, #12
 8003462:	701a      	strb	r2, [r3, #0]
}
 8003464:	e010      	b.n	8003488 <rot_base+0x114>
	  else if(pwm1 <= 1)
 8003466:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <rot_base+0x144>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d80c      	bhi.n	8003488 <rot_base+0x114>
		  direc[0] = 's';
 800346e:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <rot_base+0x140>)
 8003470:	2273      	movs	r2, #115	; 0x73
 8003472:	701a      	strb	r2, [r3, #0]
		  pwm1 = 0;
 8003474:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <rot_base+0x144>)
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
		  base_position_now = (uint8_t)teta;
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd f850 	bl	8000520 <__aeabi_f2uiz>
 8003480:	0003      	movs	r3, r0
 8003482:	b2da      	uxtb	r2, r3
 8003484:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <rot_base+0x148>)
 8003486:	701a      	strb	r2, [r3, #0]
}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	b002      	add	sp, #8
 800348e:	bd80      	pop	{r7, pc}
 8003490:	2000008c 	.word	0x2000008c
 8003494:	2000007c 	.word	0x2000007c
 8003498:	40c00000 	.word	0x40c00000
 800349c:	200000ac 	.word	0x200000ac
 80034a0:	2000009c 	.word	0x2000009c
 80034a4:	20000058 	.word	0x20000058
 80034a8:	41200000 	.word	0x41200000
 80034ac:	41880000 	.word	0x41880000
 80034b0:	2000005c 	.word	0x2000005c
 80034b4:	200000bc 	.word	0x200000bc
 80034b8:	2000004c 	.word	0x2000004c
 80034bc:	2000002e 	.word	0x2000002e

080034c0 <arm_down44>:
		}
}


void arm_down44(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
	error3 = theta3_down - theta3; // من اجل ارتياب قراءة الADC
 80034c4:	4bd3      	ldr	r3, [pc, #844]	; (8003814 <arm_down44+0x354>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	1c18      	adds	r0, r3, #0
 80034ca:	f7ff f9cf 	bl	800286c <__aeabi_f2d>
 80034ce:	0002      	movs	r2, r0
 80034d0:	000b      	movs	r3, r1
 80034d2:	48d1      	ldr	r0, [pc, #836]	; (8003818 <arm_down44+0x358>)
 80034d4:	49d1      	ldr	r1, [pc, #836]	; (800381c <arm_down44+0x35c>)
 80034d6:	f7fe fe11 	bl	80020fc <__aeabi_dsub>
 80034da:	0002      	movs	r2, r0
 80034dc:	000b      	movs	r3, r1
 80034de:	0010      	movs	r0, r2
 80034e0:	0019      	movs	r1, r3
 80034e2:	f7ff fa0b 	bl	80028fc <__aeabi_d2f>
 80034e6:	1c02      	adds	r2, r0, #0
 80034e8:	4bcd      	ldr	r3, [pc, #820]	; (8003820 <arm_down44+0x360>)
 80034ea:	601a      	str	r2, [r3, #0]
	error4 = theta4_down - theta4 ;
 80034ec:	4bcd      	ldr	r3, [pc, #820]	; (8003824 <arm_down44+0x364>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	1c19      	adds	r1, r3, #0
 80034f2:	2080      	movs	r0, #128	; 0x80
 80034f4:	05c0      	lsls	r0, r0, #23
 80034f6:	f7fd fd83 	bl	8001000 <__aeabi_fsub>
 80034fa:	1c03      	adds	r3, r0, #0
 80034fc:	1c1a      	adds	r2, r3, #0
 80034fe:	4bca      	ldr	r3, [pc, #808]	; (8003828 <arm_down44+0x368>)
 8003500:	601a      	str	r2, [r3, #0]
	velocity_ref3 = P(error3, kp13);
 8003502:	4bc7      	ldr	r3, [pc, #796]	; (8003820 <arm_down44+0x360>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4ac9      	ldr	r2, [pc, #804]	; (800382c <arm_down44+0x36c>)
 8003508:	1c11      	adds	r1, r2, #0
 800350a:	1c18      	adds	r0, r3, #0
 800350c:	f001 f8e8 	bl	80046e0 <P>
 8003510:	1c02      	adds	r2, r0, #0
 8003512:	4bc7      	ldr	r3, [pc, #796]	; (8003830 <arm_down44+0x370>)
 8003514:	601a      	str	r2, [r3, #0]
	velocity_ref4 = P(error4, kp14);
 8003516:	4bc4      	ldr	r3, [pc, #784]	; (8003828 <arm_down44+0x368>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4ac6      	ldr	r2, [pc, #792]	; (8003834 <arm_down44+0x374>)
 800351c:	1c11      	adds	r1, r2, #0
 800351e:	1c18      	adds	r0, r3, #0
 8003520:	f001 f8de 	bl	80046e0 <P>
 8003524:	1c02      	adds	r2, r0, #0
 8003526:	4bc4      	ldr	r3, [pc, #784]	; (8003838 <arm_down44+0x378>)
 8003528:	601a      	str	r2, [r3, #0]
	if(velocity_ref3 != 0)
 800352a:	4bc1      	ldr	r3, [pc, #772]	; (8003830 <arm_down44+0x370>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2100      	movs	r1, #0
 8003530:	1c18      	adds	r0, r3, #0
 8003532:	f7fc ffa7 	bl	8000484 <__aeabi_fcmpeq>
 8003536:	1e03      	subs	r3, r0, #0
 8003538:	d137      	bne.n	80035aa <arm_down44+0xea>
	{
	    out3 = PI(velocity_ref3 - velocity3, kp3, ki3, Ts);
 800353a:	4bbd      	ldr	r3, [pc, #756]	; (8003830 <arm_down44+0x370>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4bbf      	ldr	r3, [pc, #764]	; (800383c <arm_down44+0x37c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	1c19      	adds	r1, r3, #0
 8003544:	1c10      	adds	r0, r2, #0
 8003546:	f7fd fd5b 	bl	8001000 <__aeabi_fsub>
 800354a:	1c03      	adds	r3, r0, #0
 800354c:	1c18      	adds	r0, r3, #0
 800354e:	4bbc      	ldr	r3, [pc, #752]	; (8003840 <arm_down44+0x380>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4abc      	ldr	r2, [pc, #752]	; (8003844 <arm_down44+0x384>)
 8003554:	49bc      	ldr	r1, [pc, #752]	; (8003848 <arm_down44+0x388>)
 8003556:	f001 f90f 	bl	8004778 <PI>
 800355a:	1c02      	adds	r2, r0, #0
 800355c:	4bbb      	ldr	r3, [pc, #748]	; (800384c <arm_down44+0x38c>)
 800355e:	601a      	str	r2, [r3, #0]
	      if(out3 < 0)
 8003560:	4bba      	ldr	r3, [pc, #744]	; (800384c <arm_down44+0x38c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2100      	movs	r1, #0
 8003566:	1c18      	adds	r0, r3, #0
 8003568:	f7fc ff92 	bl	8000490 <__aeabi_fcmplt>
 800356c:	1e03      	subs	r3, r0, #0
 800356e:	d00f      	beq.n	8003590 <arm_down44+0xd0>
	      {
	          direc[2] = 'f';
 8003570:	4bb7      	ldr	r3, [pc, #732]	; (8003850 <arm_down44+0x390>)
 8003572:	2266      	movs	r2, #102	; 0x66
 8003574:	709a      	strb	r2, [r3, #2]
	          pwm3 = (uint8_t)(-out3);
 8003576:	4bb5      	ldr	r3, [pc, #724]	; (800384c <arm_down44+0x38c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	0612      	lsls	r2, r2, #24
 800357e:	4053      	eors	r3, r2
 8003580:	1c18      	adds	r0, r3, #0
 8003582:	f7fc ffcd 	bl	8000520 <__aeabi_f2uiz>
 8003586:	0003      	movs	r3, r0
 8003588:	b2da      	uxtb	r2, r3
 800358a:	4bb2      	ldr	r3, [pc, #712]	; (8003854 <arm_down44+0x394>)
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e012      	b.n	80035b6 <arm_down44+0xf6>
	      }
	      else
	      {
	    	  direc[2] = 'b';
 8003590:	4baf      	ldr	r3, [pc, #700]	; (8003850 <arm_down44+0x390>)
 8003592:	2262      	movs	r2, #98	; 0x62
 8003594:	709a      	strb	r2, [r3, #2]
	    	  pwm3 = (uint8_t)out3;
 8003596:	4bad      	ldr	r3, [pc, #692]	; (800384c <arm_down44+0x38c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	1c18      	adds	r0, r3, #0
 800359c:	f7fc ffc0 	bl	8000520 <__aeabi_f2uiz>
 80035a0:	0003      	movs	r3, r0
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	4bab      	ldr	r3, [pc, #684]	; (8003854 <arm_down44+0x394>)
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	e005      	b.n	80035b6 <arm_down44+0xf6>
	      }

	 }
	 else // velocity_ref3 = 0 (motor3 off)
	 {
		  direc[2] = 's';
 80035aa:	4ba9      	ldr	r3, [pc, #676]	; (8003850 <arm_down44+0x390>)
 80035ac:	2273      	movs	r2, #115	; 0x73
 80035ae:	709a      	strb	r2, [r3, #2]
		  pwm3 = 0;
 80035b0:	4ba8      	ldr	r3, [pc, #672]	; (8003854 <arm_down44+0x394>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]
	 }

	 if(velocity_ref4 != 0)
 80035b6:	4ba0      	ldr	r3, [pc, #640]	; (8003838 <arm_down44+0x378>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2100      	movs	r1, #0
 80035bc:	1c18      	adds	r0, r3, #0
 80035be:	f7fc ff61 	bl	8000484 <__aeabi_fcmpeq>
 80035c2:	1e03      	subs	r3, r0, #0
 80035c4:	d137      	bne.n	8003636 <arm_down44+0x176>
	 {
		  out4 = PI(velocity_ref4 - velocity4, kp4, ki4, Ts);
 80035c6:	4b9c      	ldr	r3, [pc, #624]	; (8003838 <arm_down44+0x378>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4ba3      	ldr	r3, [pc, #652]	; (8003858 <arm_down44+0x398>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	1c19      	adds	r1, r3, #0
 80035d0:	1c10      	adds	r0, r2, #0
 80035d2:	f7fd fd15 	bl	8001000 <__aeabi_fsub>
 80035d6:	1c03      	adds	r3, r0, #0
 80035d8:	1c18      	adds	r0, r3, #0
 80035da:	4b99      	ldr	r3, [pc, #612]	; (8003840 <arm_down44+0x380>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a9f      	ldr	r2, [pc, #636]	; (800385c <arm_down44+0x39c>)
 80035e0:	499f      	ldr	r1, [pc, #636]	; (8003860 <arm_down44+0x3a0>)
 80035e2:	f001 f8c9 	bl	8004778 <PI>
 80035e6:	1c02      	adds	r2, r0, #0
 80035e8:	4b9e      	ldr	r3, [pc, #632]	; (8003864 <arm_down44+0x3a4>)
 80035ea:	601a      	str	r2, [r3, #0]
		  if(out4 < 0)
 80035ec:	4b9d      	ldr	r3, [pc, #628]	; (8003864 <arm_down44+0x3a4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2100      	movs	r1, #0
 80035f2:	1c18      	adds	r0, r3, #0
 80035f4:	f7fc ff4c 	bl	8000490 <__aeabi_fcmplt>
 80035f8:	1e03      	subs	r3, r0, #0
 80035fa:	d00f      	beq.n	800361c <arm_down44+0x15c>
		  {
			  direc[3] = 'f';
 80035fc:	4b94      	ldr	r3, [pc, #592]	; (8003850 <arm_down44+0x390>)
 80035fe:	2266      	movs	r2, #102	; 0x66
 8003600:	70da      	strb	r2, [r3, #3]
			  pwm4 = (uint8_t)(-out4);
 8003602:	4b98      	ldr	r3, [pc, #608]	; (8003864 <arm_down44+0x3a4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2280      	movs	r2, #128	; 0x80
 8003608:	0612      	lsls	r2, r2, #24
 800360a:	4053      	eors	r3, r2
 800360c:	1c18      	adds	r0, r3, #0
 800360e:	f7fc ff87 	bl	8000520 <__aeabi_f2uiz>
 8003612:	0003      	movs	r3, r0
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4b94      	ldr	r3, [pc, #592]	; (8003868 <arm_down44+0x3a8>)
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e012      	b.n	8003642 <arm_down44+0x182>
		  }
		  else
		  {
			  direc[3] = 'b';
 800361c:	4b8c      	ldr	r3, [pc, #560]	; (8003850 <arm_down44+0x390>)
 800361e:	2262      	movs	r2, #98	; 0x62
 8003620:	70da      	strb	r2, [r3, #3]
		      pwm4 = (uint8_t)out4;
 8003622:	4b90      	ldr	r3, [pc, #576]	; (8003864 <arm_down44+0x3a4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	1c18      	adds	r0, r3, #0
 8003628:	f7fc ff7a 	bl	8000520 <__aeabi_f2uiz>
 800362c:	0003      	movs	r3, r0
 800362e:	b2da      	uxtb	r2, r3
 8003630:	4b8d      	ldr	r3, [pc, #564]	; (8003868 <arm_down44+0x3a8>)
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e005      	b.n	8003642 <arm_down44+0x182>
		  }
	 }
	 else  // velocity_ref4 = 0 (motor4 off)
	 {
		  direc[3] = 's';
 8003636:	4b86      	ldr	r3, [pc, #536]	; (8003850 <arm_down44+0x390>)
 8003638:	2273      	movs	r2, #115	; 0x73
 800363a:	70da      	strb	r2, [r3, #3]
		  pwm4 = 0;
 800363c:	4b8a      	ldr	r3, [pc, #552]	; (8003868 <arm_down44+0x3a8>)
 800363e:	2200      	movs	r2, #0
 8003640:	701a      	strb	r2, [r3, #0]
	 }
	 error2 = theta2_down2 - theta2;
 8003642:	4b8a      	ldr	r3, [pc, #552]	; (800386c <arm_down44+0x3ac>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	1c18      	adds	r0, r3, #0
 8003648:	f7ff f910 	bl	800286c <__aeabi_f2d>
 800364c:	0002      	movs	r2, r0
 800364e:	000b      	movs	r3, r1
 8003650:	4887      	ldr	r0, [pc, #540]	; (8003870 <arm_down44+0x3b0>)
 8003652:	4988      	ldr	r1, [pc, #544]	; (8003874 <arm_down44+0x3b4>)
 8003654:	f7fe fd52 	bl	80020fc <__aeabi_dsub>
 8003658:	0002      	movs	r2, r0
 800365a:	000b      	movs	r3, r1
 800365c:	0010      	movs	r0, r2
 800365e:	0019      	movs	r1, r3
 8003660:	f7ff f94c 	bl	80028fc <__aeabi_d2f>
 8003664:	1c02      	adds	r2, r0, #0
 8003666:	4b84      	ldr	r3, [pc, #528]	; (8003878 <arm_down44+0x3b8>)
 8003668:	601a      	str	r2, [r3, #0]
	 	      velocity_ref2 = P(error2,kp12);
 800366a:	4b83      	ldr	r3, [pc, #524]	; (8003878 <arm_down44+0x3b8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a71      	ldr	r2, [pc, #452]	; (8003834 <arm_down44+0x374>)
 8003670:	1c11      	adds	r1, r2, #0
 8003672:	1c18      	adds	r0, r3, #0
 8003674:	f001 f834 	bl	80046e0 <P>
 8003678:	1c02      	adds	r2, r0, #0
 800367a:	4b80      	ldr	r3, [pc, #512]	; (800387c <arm_down44+0x3bc>)
 800367c:	601a      	str	r2, [r3, #0]
	 	   	  if(velocity_ref2 != 0)
 800367e:	4b7f      	ldr	r3, [pc, #508]	; (800387c <arm_down44+0x3bc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2100      	movs	r1, #0
 8003684:	1c18      	adds	r0, r3, #0
 8003686:	f7fc fefd 	bl	8000484 <__aeabi_fcmpeq>
 800368a:	1e03      	subs	r3, r0, #0
 800368c:	d137      	bne.n	80036fe <arm_down44+0x23e>
	 		  {
	 			  out2 = PI(velocity_ref2 - velocity2, kp2, ki2, Ts);
 800368e:	4b7b      	ldr	r3, [pc, #492]	; (800387c <arm_down44+0x3bc>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b7b      	ldr	r3, [pc, #492]	; (8003880 <arm_down44+0x3c0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	1c19      	adds	r1, r3, #0
 8003698:	1c10      	adds	r0, r2, #0
 800369a:	f7fd fcb1 	bl	8001000 <__aeabi_fsub>
 800369e:	1c03      	adds	r3, r0, #0
 80036a0:	1c18      	adds	r0, r3, #0
 80036a2:	4b67      	ldr	r3, [pc, #412]	; (8003840 <arm_down44+0x380>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a67      	ldr	r2, [pc, #412]	; (8003844 <arm_down44+0x384>)
 80036a8:	4967      	ldr	r1, [pc, #412]	; (8003848 <arm_down44+0x388>)
 80036aa:	f001 f865 	bl	8004778 <PI>
 80036ae:	1c02      	adds	r2, r0, #0
 80036b0:	4b74      	ldr	r3, [pc, #464]	; (8003884 <arm_down44+0x3c4>)
 80036b2:	601a      	str	r2, [r3, #0]

	 			  if(out2 < 0)
 80036b4:	4b73      	ldr	r3, [pc, #460]	; (8003884 <arm_down44+0x3c4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2100      	movs	r1, #0
 80036ba:	1c18      	adds	r0, r3, #0
 80036bc:	f7fc fee8 	bl	8000490 <__aeabi_fcmplt>
 80036c0:	1e03      	subs	r3, r0, #0
 80036c2:	d00f      	beq.n	80036e4 <arm_down44+0x224>
	 			  {
	 			      direc[1] = 'f';
 80036c4:	4b62      	ldr	r3, [pc, #392]	; (8003850 <arm_down44+0x390>)
 80036c6:	2266      	movs	r2, #102	; 0x66
 80036c8:	705a      	strb	r2, [r3, #1]
	 			      pwm2 = (uint8_t)(-out2);
 80036ca:	4b6e      	ldr	r3, [pc, #440]	; (8003884 <arm_down44+0x3c4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2280      	movs	r2, #128	; 0x80
 80036d0:	0612      	lsls	r2, r2, #24
 80036d2:	4053      	eors	r3, r2
 80036d4:	1c18      	adds	r0, r3, #0
 80036d6:	f7fc ff23 	bl	8000520 <__aeabi_f2uiz>
 80036da:	0003      	movs	r3, r0
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	4b6a      	ldr	r3, [pc, #424]	; (8003888 <arm_down44+0x3c8>)
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	e012      	b.n	800370a <arm_down44+0x24a>
	 			  }
	 			  else
	 			  {
	 			      direc[1] = 'b';
 80036e4:	4b5a      	ldr	r3, [pc, #360]	; (8003850 <arm_down44+0x390>)
 80036e6:	2262      	movs	r2, #98	; 0x62
 80036e8:	705a      	strb	r2, [r3, #1]
	 			      pwm2 = (uint8_t)out2;
 80036ea:	4b66      	ldr	r3, [pc, #408]	; (8003884 <arm_down44+0x3c4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	1c18      	adds	r0, r3, #0
 80036f0:	f7fc ff16 	bl	8000520 <__aeabi_f2uiz>
 80036f4:	0003      	movs	r3, r0
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	4b63      	ldr	r3, [pc, #396]	; (8003888 <arm_down44+0x3c8>)
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e005      	b.n	800370a <arm_down44+0x24a>
	 			  }
	 		  }
	 	   	  else
	 	   	  {
	 			  direc[1] = 's';
 80036fe:	4b54      	ldr	r3, [pc, #336]	; (8003850 <arm_down44+0x390>)
 8003700:	2273      	movs	r2, #115	; 0x73
 8003702:	705a      	strb	r2, [r3, #1]
	 			  pwm2 = 0;
 8003704:	4b60      	ldr	r3, [pc, #384]	; (8003888 <arm_down44+0x3c8>)
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]

	 	   	  }
	 if(velocity_ref3 == 0 && velocity_ref4 == 0 && velocity_ref2 ==0)
 800370a:	4b49      	ldr	r3, [pc, #292]	; (8003830 <arm_down44+0x370>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2100      	movs	r1, #0
 8003710:	1c18      	adds	r0, r3, #0
 8003712:	f7fc feb7 	bl	8000484 <__aeabi_fcmpeq>
 8003716:	1e03      	subs	r3, r0, #0
 8003718:	d012      	beq.n	8003740 <arm_down44+0x280>
 800371a:	4b47      	ldr	r3, [pc, #284]	; (8003838 <arm_down44+0x378>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2100      	movs	r1, #0
 8003720:	1c18      	adds	r0, r3, #0
 8003722:	f7fc feaf 	bl	8000484 <__aeabi_fcmpeq>
 8003726:	1e03      	subs	r3, r0, #0
 8003728:	d00a      	beq.n	8003740 <arm_down44+0x280>
 800372a:	4b54      	ldr	r3, [pc, #336]	; (800387c <arm_down44+0x3bc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2100      	movs	r1, #0
 8003730:	1c18      	adds	r0, r3, #0
 8003732:	f7fc fea7 	bl	8000484 <__aeabi_fcmpeq>
 8003736:	1e03      	subs	r3, r0, #0
 8003738:	d002      	beq.n	8003740 <arm_down44+0x280>
	 {
		 flag = arm_is_down;
 800373a:	4b54      	ldr	r3, [pc, #336]	; (800388c <arm_down44+0x3cc>)
 800373c:	2201      	movs	r2, #1
 800373e:	701a      	strb	r2, [r3, #0]
	 }

	// saturation limits
	if(pwm2>100)
 8003740:	4b51      	ldr	r3, [pc, #324]	; (8003888 <arm_down44+0x3c8>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b64      	cmp	r3, #100	; 0x64
 8003746:	d903      	bls.n	8003750 <arm_down44+0x290>
		pwm2=100;
 8003748:	4b4f      	ldr	r3, [pc, #316]	; (8003888 <arm_down44+0x3c8>)
 800374a:	2264      	movs	r2, #100	; 0x64
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	e029      	b.n	80037a4 <arm_down44+0x2e4>
	else if(pwm2<15 && pwm2>2 && direc[1] == 'b')//up
 8003750:	4b4d      	ldr	r3, [pc, #308]	; (8003888 <arm_down44+0x3c8>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b0e      	cmp	r3, #14
 8003756:	d80b      	bhi.n	8003770 <arm_down44+0x2b0>
 8003758:	4b4b      	ldr	r3, [pc, #300]	; (8003888 <arm_down44+0x3c8>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d907      	bls.n	8003770 <arm_down44+0x2b0>
 8003760:	4b3b      	ldr	r3, [pc, #236]	; (8003850 <arm_down44+0x390>)
 8003762:	785b      	ldrb	r3, [r3, #1]
 8003764:	2b62      	cmp	r3, #98	; 0x62
 8003766:	d103      	bne.n	8003770 <arm_down44+0x2b0>
		pwm2=15;
 8003768:	4b47      	ldr	r3, [pc, #284]	; (8003888 <arm_down44+0x3c8>)
 800376a:	220f      	movs	r2, #15
 800376c:	701a      	strb	r2, [r3, #0]
 800376e:	e019      	b.n	80037a4 <arm_down44+0x2e4>
	else if(pwm2<15 && pwm2>2 && direc[1] == 'f')// down
 8003770:	4b45      	ldr	r3, [pc, #276]	; (8003888 <arm_down44+0x3c8>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b0e      	cmp	r3, #14
 8003776:	d80b      	bhi.n	8003790 <arm_down44+0x2d0>
 8003778:	4b43      	ldr	r3, [pc, #268]	; (8003888 <arm_down44+0x3c8>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d907      	bls.n	8003790 <arm_down44+0x2d0>
 8003780:	4b33      	ldr	r3, [pc, #204]	; (8003850 <arm_down44+0x390>)
 8003782:	785b      	ldrb	r3, [r3, #1]
 8003784:	2b66      	cmp	r3, #102	; 0x66
 8003786:	d103      	bne.n	8003790 <arm_down44+0x2d0>
		pwm2=5;
 8003788:	4b3f      	ldr	r3, [pc, #252]	; (8003888 <arm_down44+0x3c8>)
 800378a:	2205      	movs	r2, #5
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	e009      	b.n	80037a4 <arm_down44+0x2e4>
	else if(pwm2 <= 2) {
 8003790:	4b3d      	ldr	r3, [pc, #244]	; (8003888 <arm_down44+0x3c8>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d805      	bhi.n	80037a4 <arm_down44+0x2e4>
		direc[1] = 's';
 8003798:	4b2d      	ldr	r3, [pc, #180]	; (8003850 <arm_down44+0x390>)
 800379a:	2273      	movs	r2, #115	; 0x73
 800379c:	705a      	strb	r2, [r3, #1]
		pwm2=0;
 800379e:	4b3a      	ldr	r3, [pc, #232]	; (8003888 <arm_down44+0x3c8>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]
	}

	if(pwm3>9 && direc[2] == 'f'){
 80037a4:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <arm_down44+0x394>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b09      	cmp	r3, #9
 80037aa:	d907      	bls.n	80037bc <arm_down44+0x2fc>
 80037ac:	4b28      	ldr	r3, [pc, #160]	; (8003850 <arm_down44+0x390>)
 80037ae:	789b      	ldrb	r3, [r3, #2]
 80037b0:	2b66      	cmp	r3, #102	; 0x66
 80037b2:	d103      	bne.n	80037bc <arm_down44+0x2fc>
		pwm3 = 9;
 80037b4:	4b27      	ldr	r3, [pc, #156]	; (8003854 <arm_down44+0x394>)
 80037b6:	2209      	movs	r2, #9
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	e073      	b.n	80038a4 <arm_down44+0x3e4>
	}
	else if(pwm3>50 && direc[2] == 'b')
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <arm_down44+0x394>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b32      	cmp	r3, #50	; 0x32
 80037c2:	d907      	bls.n	80037d4 <arm_down44+0x314>
 80037c4:	4b22      	ldr	r3, [pc, #136]	; (8003850 <arm_down44+0x390>)
 80037c6:	789b      	ldrb	r3, [r3, #2]
 80037c8:	2b62      	cmp	r3, #98	; 0x62
 80037ca:	d103      	bne.n	80037d4 <arm_down44+0x314>
	{
		pwm3 = 50;
 80037cc:	4b21      	ldr	r3, [pc, #132]	; (8003854 <arm_down44+0x394>)
 80037ce:	2232      	movs	r2, #50	; 0x32
 80037d0:	701a      	strb	r2, [r3, #0]
 80037d2:	e067      	b.n	80038a4 <arm_down44+0x3e4>
	}
	else if(pwm3<6 && pwm3>3 && direc[2] == 'f')
 80037d4:	4b1f      	ldr	r3, [pc, #124]	; (8003854 <arm_down44+0x394>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d80b      	bhi.n	80037f4 <arm_down44+0x334>
 80037dc:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <arm_down44+0x394>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d907      	bls.n	80037f4 <arm_down44+0x334>
 80037e4:	4b1a      	ldr	r3, [pc, #104]	; (8003850 <arm_down44+0x390>)
 80037e6:	789b      	ldrb	r3, [r3, #2]
 80037e8:	2b66      	cmp	r3, #102	; 0x66
 80037ea:	d103      	bne.n	80037f4 <arm_down44+0x334>
	{
		pwm3=6;
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <arm_down44+0x394>)
 80037ee:	2206      	movs	r2, #6
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	e057      	b.n	80038a4 <arm_down44+0x3e4>
	}
	else if(pwm3<15 && pwm3>3 && direc[2] == 'b')
 80037f4:	4b17      	ldr	r3, [pc, #92]	; (8003854 <arm_down44+0x394>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b0e      	cmp	r3, #14
 80037fa:	d849      	bhi.n	8003890 <arm_down44+0x3d0>
 80037fc:	4b15      	ldr	r3, [pc, #84]	; (8003854 <arm_down44+0x394>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b03      	cmp	r3, #3
 8003802:	d945      	bls.n	8003890 <arm_down44+0x3d0>
 8003804:	4b12      	ldr	r3, [pc, #72]	; (8003850 <arm_down44+0x390>)
 8003806:	789b      	ldrb	r3, [r3, #2]
 8003808:	2b62      	cmp	r3, #98	; 0x62
 800380a:	d141      	bne.n	8003890 <arm_down44+0x3d0>
	{
		pwm3=15;
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <arm_down44+0x394>)
 800380e:	220f      	movs	r2, #15
 8003810:	701a      	strb	r2, [r3, #0]
 8003812:	e047      	b.n	80038a4 <arm_down44+0x3e4>
 8003814:	20000094 	.word	0x20000094
 8003818:	cccccccd 	.word	0xcccccccd
 800381c:	3ffccccc 	.word	0x3ffccccc
 8003820:	20000084 	.word	0x20000084
 8003824:	20000098 	.word	0x20000098
 8003828:	20000088 	.word	0x20000088
 800382c:	40d00000 	.word	0x40d00000
 8003830:	200000b4 	.word	0x200000b4
 8003834:	40c00000 	.word	0x40c00000
 8003838:	200000b8 	.word	0x200000b8
 800383c:	200000a4 	.word	0x200000a4
 8003840:	20000058 	.word	0x20000058
 8003844:	40a00000 	.word	0x40a00000
 8003848:	41700000 	.word	0x41700000
 800384c:	20000064 	.word	0x20000064
 8003850:	200000bc 	.word	0x200000bc
 8003854:	2000004e 	.word	0x2000004e
 8003858:	200000a8 	.word	0x200000a8
 800385c:	41a00000 	.word	0x41a00000
 8003860:	41200000 	.word	0x41200000
 8003864:	20000068 	.word	0x20000068
 8003868:	2000004f 	.word	0x2000004f
 800386c:	20000090 	.word	0x20000090
 8003870:	66666666 	.word	0x66666666
 8003874:	3ff26666 	.word	0x3ff26666
 8003878:	20000080 	.word	0x20000080
 800387c:	200000b0 	.word	0x200000b0
 8003880:	200000a0 	.word	0x200000a0
 8003884:	20000060 	.word	0x20000060
 8003888:	2000004d 	.word	0x2000004d
 800388c:	2000002c 	.word	0x2000002c
	}
	else if(pwm3 <= 3) {
 8003890:	4b27      	ldr	r3, [pc, #156]	; (8003930 <arm_down44+0x470>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b03      	cmp	r3, #3
 8003896:	d805      	bhi.n	80038a4 <arm_down44+0x3e4>
		direc[2] = 's';
 8003898:	4b26      	ldr	r3, [pc, #152]	; (8003934 <arm_down44+0x474>)
 800389a:	2273      	movs	r2, #115	; 0x73
 800389c:	709a      	strb	r2, [r3, #2]
		pwm3=0;
 800389e:	4b24      	ldr	r3, [pc, #144]	; (8003930 <arm_down44+0x470>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
	}

	if(pwm4>30 && direc[3] == 'b') // max speed up
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <arm_down44+0x478>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b1e      	cmp	r3, #30
 80038aa:	d906      	bls.n	80038ba <arm_down44+0x3fa>
 80038ac:	4b21      	ldr	r3, [pc, #132]	; (8003934 <arm_down44+0x474>)
 80038ae:	78db      	ldrb	r3, [r3, #3]
 80038b0:	2b62      	cmp	r3, #98	; 0x62
 80038b2:	d102      	bne.n	80038ba <arm_down44+0x3fa>
		pwm4=30;
 80038b4:	4b20      	ldr	r3, [pc, #128]	; (8003938 <arm_down44+0x478>)
 80038b6:	221e      	movs	r2, #30
 80038b8:	701a      	strb	r2, [r3, #0]
	if(pwm4>8 && direc[3] == 'f')// max speed down
 80038ba:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <arm_down44+0x478>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d907      	bls.n	80038d2 <arm_down44+0x412>
 80038c2:	4b1c      	ldr	r3, [pc, #112]	; (8003934 <arm_down44+0x474>)
 80038c4:	78db      	ldrb	r3, [r3, #3]
 80038c6:	2b66      	cmp	r3, #102	; 0x66
 80038c8:	d103      	bne.n	80038d2 <arm_down44+0x412>
		pwm4=8;
 80038ca:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <arm_down44+0x478>)
 80038cc:	2208      	movs	r2, #8
 80038ce:	701a      	strb	r2, [r3, #0]
 80038d0:	e02a      	b.n	8003928 <arm_down44+0x468>
	else if(pwm4<25 && pwm4>3 && direc[3] == 'b')// min  speed up
 80038d2:	4b19      	ldr	r3, [pc, #100]	; (8003938 <arm_down44+0x478>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b18      	cmp	r3, #24
 80038d8:	d80b      	bhi.n	80038f2 <arm_down44+0x432>
 80038da:	4b17      	ldr	r3, [pc, #92]	; (8003938 <arm_down44+0x478>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d907      	bls.n	80038f2 <arm_down44+0x432>
 80038e2:	4b14      	ldr	r3, [pc, #80]	; (8003934 <arm_down44+0x474>)
 80038e4:	78db      	ldrb	r3, [r3, #3]
 80038e6:	2b62      	cmp	r3, #98	; 0x62
 80038e8:	d103      	bne.n	80038f2 <arm_down44+0x432>
		pwm4=25;
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <arm_down44+0x478>)
 80038ec:	2219      	movs	r2, #25
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e01a      	b.n	8003928 <arm_down44+0x468>
	else if(pwm4<5 && pwm4>3 && direc[3] == 'f')// min speed down
 80038f2:	4b11      	ldr	r3, [pc, #68]	; (8003938 <arm_down44+0x478>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d80b      	bhi.n	8003912 <arm_down44+0x452>
 80038fa:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <arm_down44+0x478>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d907      	bls.n	8003912 <arm_down44+0x452>
 8003902:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <arm_down44+0x474>)
 8003904:	78db      	ldrb	r3, [r3, #3]
 8003906:	2b66      	cmp	r3, #102	; 0x66
 8003908:	d103      	bne.n	8003912 <arm_down44+0x452>
		pwm4=5;
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <arm_down44+0x478>)
 800390c:	2205      	movs	r2, #5
 800390e:	701a      	strb	r2, [r3, #0]
 8003910:	e00a      	b.n	8003928 <arm_down44+0x468>
	else if(pwm4 <= 3)
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <arm_down44+0x478>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b03      	cmp	r3, #3
 8003918:	d806      	bhi.n	8003928 <arm_down44+0x468>
	{
		direc[3] = 's';
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <arm_down44+0x474>)
 800391c:	2273      	movs	r2, #115	; 0x73
 800391e:	70da      	strb	r2, [r3, #3]
		pwm4=0;
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <arm_down44+0x478>)
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
	}
}
 8003926:	e7ff      	b.n	8003928 <arm_down44+0x468>
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	2000004e 	.word	0x2000004e
 8003934:	200000bc 	.word	0x200000bc
 8003938:	2000004f 	.word	0x2000004f

0800393c <arm_up44>:

void arm_up44(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
	error2 = theta2_up - theta2;
 8003940:	4bd3      	ldr	r3, [pc, #844]	; (8003c90 <arm_up44+0x354>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	1c18      	adds	r0, r3, #0
 8003946:	f7fe ff91 	bl	800286c <__aeabi_f2d>
 800394a:	0002      	movs	r2, r0
 800394c:	000b      	movs	r3, r1
 800394e:	48d1      	ldr	r0, [pc, #836]	; (8003c94 <arm_up44+0x358>)
 8003950:	49d1      	ldr	r1, [pc, #836]	; (8003c98 <arm_up44+0x35c>)
 8003952:	f7fe fbd3 	bl	80020fc <__aeabi_dsub>
 8003956:	0002      	movs	r2, r0
 8003958:	000b      	movs	r3, r1
 800395a:	0010      	movs	r0, r2
 800395c:	0019      	movs	r1, r3
 800395e:	f7fe ffcd 	bl	80028fc <__aeabi_d2f>
 8003962:	1c02      	adds	r2, r0, #0
 8003964:	4bcd      	ldr	r3, [pc, #820]	; (8003c9c <arm_up44+0x360>)
 8003966:	601a      	str	r2, [r3, #0]
	velocity_ref2 = P(error2,kp12);
 8003968:	4bcc      	ldr	r3, [pc, #816]	; (8003c9c <arm_up44+0x360>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4acc      	ldr	r2, [pc, #816]	; (8003ca0 <arm_up44+0x364>)
 800396e:	1c11      	adds	r1, r2, #0
 8003970:	1c18      	adds	r0, r3, #0
 8003972:	f000 feb5 	bl	80046e0 <P>
 8003976:	1c02      	adds	r2, r0, #0
 8003978:	4bca      	ldr	r3, [pc, #808]	; (8003ca4 <arm_up44+0x368>)
 800397a:	601a      	str	r2, [r3, #0]
	if(velocity_ref2 != 0)
 800397c:	4bc9      	ldr	r3, [pc, #804]	; (8003ca4 <arm_up44+0x368>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2100      	movs	r1, #0
 8003982:	1c18      	adds	r0, r3, #0
 8003984:	f7fc fd7e 	bl	8000484 <__aeabi_fcmpeq>
 8003988:	1e03      	subs	r3, r0, #0
 800398a:	d137      	bne.n	80039fc <arm_up44+0xc0>
	{
		out2 = PI(velocity_ref2 - velocity2, kp2, ki2, Ts);
 800398c:	4bc5      	ldr	r3, [pc, #788]	; (8003ca4 <arm_up44+0x368>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4bc5      	ldr	r3, [pc, #788]	; (8003ca8 <arm_up44+0x36c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	1c19      	adds	r1, r3, #0
 8003996:	1c10      	adds	r0, r2, #0
 8003998:	f7fd fb32 	bl	8001000 <__aeabi_fsub>
 800399c:	1c03      	adds	r3, r0, #0
 800399e:	1c18      	adds	r0, r3, #0
 80039a0:	4bc2      	ldr	r3, [pc, #776]	; (8003cac <arm_up44+0x370>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4ac2      	ldr	r2, [pc, #776]	; (8003cb0 <arm_up44+0x374>)
 80039a6:	49c3      	ldr	r1, [pc, #780]	; (8003cb4 <arm_up44+0x378>)
 80039a8:	f000 fee6 	bl	8004778 <PI>
 80039ac:	1c02      	adds	r2, r0, #0
 80039ae:	4bc2      	ldr	r3, [pc, #776]	; (8003cb8 <arm_up44+0x37c>)
 80039b0:	601a      	str	r2, [r3, #0]

	      if(out2 < 0)
 80039b2:	4bc1      	ldr	r3, [pc, #772]	; (8003cb8 <arm_up44+0x37c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2100      	movs	r1, #0
 80039b8:	1c18      	adds	r0, r3, #0
 80039ba:	f7fc fd69 	bl	8000490 <__aeabi_fcmplt>
 80039be:	1e03      	subs	r3, r0, #0
 80039c0:	d00f      	beq.n	80039e2 <arm_up44+0xa6>
	      {
	    	  direc[1] = 'f';
 80039c2:	4bbe      	ldr	r3, [pc, #760]	; (8003cbc <arm_up44+0x380>)
 80039c4:	2266      	movs	r2, #102	; 0x66
 80039c6:	705a      	strb	r2, [r3, #1]
	    	  pwm2 = (uint8_t)(-out2);
 80039c8:	4bbb      	ldr	r3, [pc, #748]	; (8003cb8 <arm_up44+0x37c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2280      	movs	r2, #128	; 0x80
 80039ce:	0612      	lsls	r2, r2, #24
 80039d0:	4053      	eors	r3, r2
 80039d2:	1c18      	adds	r0, r3, #0
 80039d4:	f7fc fda4 	bl	8000520 <__aeabi_f2uiz>
 80039d8:	0003      	movs	r3, r0
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	4bb8      	ldr	r3, [pc, #736]	; (8003cc0 <arm_up44+0x384>)
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	e012      	b.n	8003a08 <arm_up44+0xcc>
	      }
	      else
	      {
	    	  direc[1] = 'b';
 80039e2:	4bb6      	ldr	r3, [pc, #728]	; (8003cbc <arm_up44+0x380>)
 80039e4:	2262      	movs	r2, #98	; 0x62
 80039e6:	705a      	strb	r2, [r3, #1]
	    	  pwm2 = (uint8_t)out2;
 80039e8:	4bb3      	ldr	r3, [pc, #716]	; (8003cb8 <arm_up44+0x37c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	1c18      	adds	r0, r3, #0
 80039ee:	f7fc fd97 	bl	8000520 <__aeabi_f2uiz>
 80039f2:	0003      	movs	r3, r0
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	4bb2      	ldr	r3, [pc, #712]	; (8003cc0 <arm_up44+0x384>)
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	e005      	b.n	8003a08 <arm_up44+0xcc>
	      }
	}
	else // velocity_ref2 = 0  (motor2 off)
	{
		//motor2 off
		direc[1] = 's';
 80039fc:	4baf      	ldr	r3, [pc, #700]	; (8003cbc <arm_up44+0x380>)
 80039fe:	2273      	movs	r2, #115	; 0x73
 8003a00:	705a      	strb	r2, [r3, #1]
		pwm2 = 0;
 8003a02:	4baf      	ldr	r3, [pc, #700]	; (8003cc0 <arm_up44+0x384>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]


	}
	error3 = theta3_up - theta3;
 8003a08:	4bae      	ldr	r3, [pc, #696]	; (8003cc4 <arm_up44+0x388>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	1c18      	adds	r0, r3, #0
 8003a0e:	f7fe ff2d 	bl	800286c <__aeabi_f2d>
 8003a12:	0002      	movs	r2, r0
 8003a14:	000b      	movs	r3, r1
 8003a16:	48ac      	ldr	r0, [pc, #688]	; (8003cc8 <arm_up44+0x38c>)
 8003a18:	49ac      	ldr	r1, [pc, #688]	; (8003ccc <arm_up44+0x390>)
 8003a1a:	f7fe fb6f 	bl	80020fc <__aeabi_dsub>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	000b      	movs	r3, r1
 8003a22:	0010      	movs	r0, r2
 8003a24:	0019      	movs	r1, r3
 8003a26:	f7fe ff69 	bl	80028fc <__aeabi_d2f>
 8003a2a:	1c02      	adds	r2, r0, #0
 8003a2c:	4ba8      	ldr	r3, [pc, #672]	; (8003cd0 <arm_up44+0x394>)
 8003a2e:	601a      	str	r2, [r3, #0]
			error4 = theta4_up2 - theta4;
 8003a30:	4ba8      	ldr	r3, [pc, #672]	; (8003cd4 <arm_up44+0x398>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	1c19      	adds	r1, r3, #0
 8003a36:	48a8      	ldr	r0, [pc, #672]	; (8003cd8 <arm_up44+0x39c>)
 8003a38:	f7fd fae2 	bl	8001000 <__aeabi_fsub>
 8003a3c:	1c03      	adds	r3, r0, #0
 8003a3e:	1c1a      	adds	r2, r3, #0
 8003a40:	4ba6      	ldr	r3, [pc, #664]	; (8003cdc <arm_up44+0x3a0>)
 8003a42:	601a      	str	r2, [r3, #0]
			velocity_ref3 = P(error3, kp13);
 8003a44:	4ba2      	ldr	r3, [pc, #648]	; (8003cd0 <arm_up44+0x394>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4aa5      	ldr	r2, [pc, #660]	; (8003ce0 <arm_up44+0x3a4>)
 8003a4a:	1c11      	adds	r1, r2, #0
 8003a4c:	1c18      	adds	r0, r3, #0
 8003a4e:	f000 fe47 	bl	80046e0 <P>
 8003a52:	1c02      	adds	r2, r0, #0
 8003a54:	4ba3      	ldr	r3, [pc, #652]	; (8003ce4 <arm_up44+0x3a8>)
 8003a56:	601a      	str	r2, [r3, #0]
			velocity_ref4 = P(error4, kp14);
 8003a58:	4ba0      	ldr	r3, [pc, #640]	; (8003cdc <arm_up44+0x3a0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a90      	ldr	r2, [pc, #576]	; (8003ca0 <arm_up44+0x364>)
 8003a5e:	1c11      	adds	r1, r2, #0
 8003a60:	1c18      	adds	r0, r3, #0
 8003a62:	f000 fe3d 	bl	80046e0 <P>
 8003a66:	1c02      	adds	r2, r0, #0
 8003a68:	4b9f      	ldr	r3, [pc, #636]	; (8003ce8 <arm_up44+0x3ac>)
 8003a6a:	601a      	str	r2, [r3, #0]
			if(velocity_ref3 != 0)
 8003a6c:	4b9d      	ldr	r3, [pc, #628]	; (8003ce4 <arm_up44+0x3a8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2100      	movs	r1, #0
 8003a72:	1c18      	adds	r0, r3, #0
 8003a74:	f7fc fd06 	bl	8000484 <__aeabi_fcmpeq>
 8003a78:	1e03      	subs	r3, r0, #0
 8003a7a:	d137      	bne.n	8003aec <arm_up44+0x1b0>
			{
				out3 = PI(velocity_ref3 - velocity3, kp3, ki3, Ts);
 8003a7c:	4b99      	ldr	r3, [pc, #612]	; (8003ce4 <arm_up44+0x3a8>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4b9a      	ldr	r3, [pc, #616]	; (8003cec <arm_up44+0x3b0>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1c19      	adds	r1, r3, #0
 8003a86:	1c10      	adds	r0, r2, #0
 8003a88:	f7fd faba 	bl	8001000 <__aeabi_fsub>
 8003a8c:	1c03      	adds	r3, r0, #0
 8003a8e:	1c18      	adds	r0, r3, #0
 8003a90:	4b86      	ldr	r3, [pc, #536]	; (8003cac <arm_up44+0x370>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a86      	ldr	r2, [pc, #536]	; (8003cb0 <arm_up44+0x374>)
 8003a96:	4987      	ldr	r1, [pc, #540]	; (8003cb4 <arm_up44+0x378>)
 8003a98:	f000 fe6e 	bl	8004778 <PI>
 8003a9c:	1c02      	adds	r2, r0, #0
 8003a9e:	4b94      	ldr	r3, [pc, #592]	; (8003cf0 <arm_up44+0x3b4>)
 8003aa0:	601a      	str	r2, [r3, #0]
			      if(out3 < 0)
 8003aa2:	4b93      	ldr	r3, [pc, #588]	; (8003cf0 <arm_up44+0x3b4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	1c18      	adds	r0, r3, #0
 8003aaa:	f7fc fcf1 	bl	8000490 <__aeabi_fcmplt>
 8003aae:	1e03      	subs	r3, r0, #0
 8003ab0:	d00f      	beq.n	8003ad2 <arm_up44+0x196>
			      {
			    	  direc[2] = 'f';
 8003ab2:	4b82      	ldr	r3, [pc, #520]	; (8003cbc <arm_up44+0x380>)
 8003ab4:	2266      	movs	r2, #102	; 0x66
 8003ab6:	709a      	strb	r2, [r3, #2]
			    	  pwm3 = (uint8_t)(-out3);
 8003ab8:	4b8d      	ldr	r3, [pc, #564]	; (8003cf0 <arm_up44+0x3b4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	0612      	lsls	r2, r2, #24
 8003ac0:	4053      	eors	r3, r2
 8003ac2:	1c18      	adds	r0, r3, #0
 8003ac4:	f7fc fd2c 	bl	8000520 <__aeabi_f2uiz>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	4b89      	ldr	r3, [pc, #548]	; (8003cf4 <arm_up44+0x3b8>)
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	e012      	b.n	8003af8 <arm_up44+0x1bc>
			      }
			      else
			      {
			    	  direc[2] = 'b';
 8003ad2:	4b7a      	ldr	r3, [pc, #488]	; (8003cbc <arm_up44+0x380>)
 8003ad4:	2262      	movs	r2, #98	; 0x62
 8003ad6:	709a      	strb	r2, [r3, #2]
			    	  pwm3 = (uint8_t)out3;
 8003ad8:	4b85      	ldr	r3, [pc, #532]	; (8003cf0 <arm_up44+0x3b4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	1c18      	adds	r0, r3, #0
 8003ade:	f7fc fd1f 	bl	8000520 <__aeabi_f2uiz>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	4b83      	ldr	r3, [pc, #524]	; (8003cf4 <arm_up44+0x3b8>)
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	e005      	b.n	8003af8 <arm_up44+0x1bc>
			      }

			}
			else // velocity_ref3 = 0 (motor3 off)
			{
				direc[2] = 's';
 8003aec:	4b73      	ldr	r3, [pc, #460]	; (8003cbc <arm_up44+0x380>)
 8003aee:	2273      	movs	r2, #115	; 0x73
 8003af0:	709a      	strb	r2, [r3, #2]
				pwm3 = 0;
 8003af2:	4b80      	ldr	r3, [pc, #512]	; (8003cf4 <arm_up44+0x3b8>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]
			}

			if(velocity_ref4 != 0)
 8003af8:	4b7b      	ldr	r3, [pc, #492]	; (8003ce8 <arm_up44+0x3ac>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2100      	movs	r1, #0
 8003afe:	1c18      	adds	r0, r3, #0
 8003b00:	f7fc fcc0 	bl	8000484 <__aeabi_fcmpeq>
 8003b04:	1e03      	subs	r3, r0, #0
 8003b06:	d137      	bne.n	8003b78 <arm_up44+0x23c>
			{
				 out4 = PI(velocity_ref4 - velocity4, kp4, ki4, Ts);
 8003b08:	4b77      	ldr	r3, [pc, #476]	; (8003ce8 <arm_up44+0x3ac>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b7a      	ldr	r3, [pc, #488]	; (8003cf8 <arm_up44+0x3bc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	1c19      	adds	r1, r3, #0
 8003b12:	1c10      	adds	r0, r2, #0
 8003b14:	f7fd fa74 	bl	8001000 <__aeabi_fsub>
 8003b18:	1c03      	adds	r3, r0, #0
 8003b1a:	1c18      	adds	r0, r3, #0
 8003b1c:	4b63      	ldr	r3, [pc, #396]	; (8003cac <arm_up44+0x370>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a76      	ldr	r2, [pc, #472]	; (8003cfc <arm_up44+0x3c0>)
 8003b22:	4977      	ldr	r1, [pc, #476]	; (8003d00 <arm_up44+0x3c4>)
 8003b24:	f000 fe28 	bl	8004778 <PI>
 8003b28:	1c02      	adds	r2, r0, #0
 8003b2a:	4b76      	ldr	r3, [pc, #472]	; (8003d04 <arm_up44+0x3c8>)
 8003b2c:	601a      	str	r2, [r3, #0]
				  if(out4 < 0)
 8003b2e:	4b75      	ldr	r3, [pc, #468]	; (8003d04 <arm_up44+0x3c8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2100      	movs	r1, #0
 8003b34:	1c18      	adds	r0, r3, #0
 8003b36:	f7fc fcab 	bl	8000490 <__aeabi_fcmplt>
 8003b3a:	1e03      	subs	r3, r0, #0
 8003b3c:	d00f      	beq.n	8003b5e <arm_up44+0x222>
				  {
				      direc[3] = 'f';
 8003b3e:	4b5f      	ldr	r3, [pc, #380]	; (8003cbc <arm_up44+0x380>)
 8003b40:	2266      	movs	r2, #102	; 0x66
 8003b42:	70da      	strb	r2, [r3, #3]
				      pwm4 = (uint8_t)(-out4);
 8003b44:	4b6f      	ldr	r3, [pc, #444]	; (8003d04 <arm_up44+0x3c8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2280      	movs	r2, #128	; 0x80
 8003b4a:	0612      	lsls	r2, r2, #24
 8003b4c:	4053      	eors	r3, r2
 8003b4e:	1c18      	adds	r0, r3, #0
 8003b50:	f7fc fce6 	bl	8000520 <__aeabi_f2uiz>
 8003b54:	0003      	movs	r3, r0
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	4b6b      	ldr	r3, [pc, #428]	; (8003d08 <arm_up44+0x3cc>)
 8003b5a:	701a      	strb	r2, [r3, #0]
 8003b5c:	e012      	b.n	8003b84 <arm_up44+0x248>
				  }
				  else
				  {
				      direc[3] = 'b';
 8003b5e:	4b57      	ldr	r3, [pc, #348]	; (8003cbc <arm_up44+0x380>)
 8003b60:	2262      	movs	r2, #98	; 0x62
 8003b62:	70da      	strb	r2, [r3, #3]
				      pwm4 = (uint8_t)out4;
 8003b64:	4b67      	ldr	r3, [pc, #412]	; (8003d04 <arm_up44+0x3c8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	1c18      	adds	r0, r3, #0
 8003b6a:	f7fc fcd9 	bl	8000520 <__aeabi_f2uiz>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	4b65      	ldr	r3, [pc, #404]	; (8003d08 <arm_up44+0x3cc>)
 8003b74:	701a      	strb	r2, [r3, #0]
 8003b76:	e005      	b.n	8003b84 <arm_up44+0x248>
				  }
			}
			else // velocity_ref4 = 0 (motor4 off)
			{
				direc[3] = 's';
 8003b78:	4b50      	ldr	r3, [pc, #320]	; (8003cbc <arm_up44+0x380>)
 8003b7a:	2273      	movs	r2, #115	; 0x73
 8003b7c:	70da      	strb	r2, [r3, #3]
				pwm4 = 0;
 8003b7e:	4b62      	ldr	r3, [pc, #392]	; (8003d08 <arm_up44+0x3cc>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
			}

			if(velocity_ref3 == 0 && velocity_ref4 == 0 && velocity_ref2 == 0)
 8003b84:	4b57      	ldr	r3, [pc, #348]	; (8003ce4 <arm_up44+0x3a8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2100      	movs	r1, #0
 8003b8a:	1c18      	adds	r0, r3, #0
 8003b8c:	f7fc fc7a 	bl	8000484 <__aeabi_fcmpeq>
 8003b90:	1e03      	subs	r3, r0, #0
 8003b92:	d012      	beq.n	8003bba <arm_up44+0x27e>
 8003b94:	4b54      	ldr	r3, [pc, #336]	; (8003ce8 <arm_up44+0x3ac>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2100      	movs	r1, #0
 8003b9a:	1c18      	adds	r0, r3, #0
 8003b9c:	f7fc fc72 	bl	8000484 <__aeabi_fcmpeq>
 8003ba0:	1e03      	subs	r3, r0, #0
 8003ba2:	d00a      	beq.n	8003bba <arm_up44+0x27e>
 8003ba4:	4b3f      	ldr	r3, [pc, #252]	; (8003ca4 <arm_up44+0x368>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2100      	movs	r1, #0
 8003baa:	1c18      	adds	r0, r3, #0
 8003bac:	f7fc fc6a 	bl	8000484 <__aeabi_fcmpeq>
 8003bb0:	1e03      	subs	r3, r0, #0
 8003bb2:	d002      	beq.n	8003bba <arm_up44+0x27e>
			{
				flag = arm_is_up;
 8003bb4:	4b55      	ldr	r3, [pc, #340]	; (8003d0c <arm_up44+0x3d0>)
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	701a      	strb	r2, [r3, #0]
			}



	// saturation limits
	if(pwm2>100)
 8003bba:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <arm_up44+0x384>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d903      	bls.n	8003bca <arm_up44+0x28e>
		pwm2=100;
 8003bc2:	4b3f      	ldr	r3, [pc, #252]	; (8003cc0 <arm_up44+0x384>)
 8003bc4:	2264      	movs	r2, #100	; 0x64
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	e029      	b.n	8003c1e <arm_up44+0x2e2>
	else if(pwm2<15 && pwm2>2 && direc[1] == 'b')//up
 8003bca:	4b3d      	ldr	r3, [pc, #244]	; (8003cc0 <arm_up44+0x384>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b0e      	cmp	r3, #14
 8003bd0:	d80b      	bhi.n	8003bea <arm_up44+0x2ae>
 8003bd2:	4b3b      	ldr	r3, [pc, #236]	; (8003cc0 <arm_up44+0x384>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d907      	bls.n	8003bea <arm_up44+0x2ae>
 8003bda:	4b38      	ldr	r3, [pc, #224]	; (8003cbc <arm_up44+0x380>)
 8003bdc:	785b      	ldrb	r3, [r3, #1]
 8003bde:	2b62      	cmp	r3, #98	; 0x62
 8003be0:	d103      	bne.n	8003bea <arm_up44+0x2ae>
		pwm2=15;
 8003be2:	4b37      	ldr	r3, [pc, #220]	; (8003cc0 <arm_up44+0x384>)
 8003be4:	220f      	movs	r2, #15
 8003be6:	701a      	strb	r2, [r3, #0]
 8003be8:	e019      	b.n	8003c1e <arm_up44+0x2e2>
	else if(pwm2<10 && pwm2>2 && direc[1] == 'f')// down
 8003bea:	4b35      	ldr	r3, [pc, #212]	; (8003cc0 <arm_up44+0x384>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b09      	cmp	r3, #9
 8003bf0:	d80b      	bhi.n	8003c0a <arm_up44+0x2ce>
 8003bf2:	4b33      	ldr	r3, [pc, #204]	; (8003cc0 <arm_up44+0x384>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d907      	bls.n	8003c0a <arm_up44+0x2ce>
 8003bfa:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <arm_up44+0x380>)
 8003bfc:	785b      	ldrb	r3, [r3, #1]
 8003bfe:	2b66      	cmp	r3, #102	; 0x66
 8003c00:	d103      	bne.n	8003c0a <arm_up44+0x2ce>
		pwm2=5;
 8003c02:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <arm_up44+0x384>)
 8003c04:	2205      	movs	r2, #5
 8003c06:	701a      	strb	r2, [r3, #0]
 8003c08:	e009      	b.n	8003c1e <arm_up44+0x2e2>
	else if(pwm2 <= 2) {
 8003c0a:	4b2d      	ldr	r3, [pc, #180]	; (8003cc0 <arm_up44+0x384>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d805      	bhi.n	8003c1e <arm_up44+0x2e2>
		direc[1] = 's';
 8003c12:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <arm_up44+0x380>)
 8003c14:	2273      	movs	r2, #115	; 0x73
 8003c16:	705a      	strb	r2, [r3, #1]
		pwm2=0;
 8003c18:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <arm_up44+0x384>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
	}

	if(pwm3>50 && direc[2] == 'b'){
 8003c1e:	4b35      	ldr	r3, [pc, #212]	; (8003cf4 <arm_up44+0x3b8>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b32      	cmp	r3, #50	; 0x32
 8003c24:	d907      	bls.n	8003c36 <arm_up44+0x2fa>
 8003c26:	4b25      	ldr	r3, [pc, #148]	; (8003cbc <arm_up44+0x380>)
 8003c28:	789b      	ldrb	r3, [r3, #2]
 8003c2a:	2b62      	cmp	r3, #98	; 0x62
 8003c2c:	d103      	bne.n	8003c36 <arm_up44+0x2fa>
		pwm3=50;
 8003c2e:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <arm_up44+0x3b8>)
 8003c30:	2232      	movs	r2, #50	; 0x32
 8003c32:	701a      	strb	r2, [r3, #0]
 8003c34:	e076      	b.n	8003d24 <arm_up44+0x3e8>
	}
	else if(pwm3 > 15 && direc[2] == 'f'){
 8003c36:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <arm_up44+0x3b8>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b0f      	cmp	r3, #15
 8003c3c:	d907      	bls.n	8003c4e <arm_up44+0x312>
 8003c3e:	4b1f      	ldr	r3, [pc, #124]	; (8003cbc <arm_up44+0x380>)
 8003c40:	789b      	ldrb	r3, [r3, #2]
 8003c42:	2b66      	cmp	r3, #102	; 0x66
 8003c44:	d103      	bne.n	8003c4e <arm_up44+0x312>
		pwm3=5;
 8003c46:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <arm_up44+0x3b8>)
 8003c48:	2205      	movs	r2, #5
 8003c4a:	701a      	strb	r2, [r3, #0]
 8003c4c:	e06a      	b.n	8003d24 <arm_up44+0x3e8>
	}
	else if(pwm3<10 && pwm3>2 && direc[2] == 'f')
 8003c4e:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <arm_up44+0x3b8>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b09      	cmp	r3, #9
 8003c54:	d80b      	bhi.n	8003c6e <arm_up44+0x332>
 8003c56:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <arm_up44+0x3b8>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d907      	bls.n	8003c6e <arm_up44+0x332>
 8003c5e:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <arm_up44+0x380>)
 8003c60:	789b      	ldrb	r3, [r3, #2]
 8003c62:	2b66      	cmp	r3, #102	; 0x66
 8003c64:	d103      	bne.n	8003c6e <arm_up44+0x332>
	{
		pwm3=5;
 8003c66:	4b23      	ldr	r3, [pc, #140]	; (8003cf4 <arm_up44+0x3b8>)
 8003c68:	2205      	movs	r2, #5
 8003c6a:	701a      	strb	r2, [r3, #0]
 8003c6c:	e05a      	b.n	8003d24 <arm_up44+0x3e8>
	}
	else if(pwm3<20 && pwm3>2 && direc[2] == 'b')
 8003c6e:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <arm_up44+0x3b8>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b13      	cmp	r3, #19
 8003c74:	d84c      	bhi.n	8003d10 <arm_up44+0x3d4>
 8003c76:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <arm_up44+0x3b8>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d948      	bls.n	8003d10 <arm_up44+0x3d4>
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <arm_up44+0x380>)
 8003c80:	789b      	ldrb	r3, [r3, #2]
 8003c82:	2b62      	cmp	r3, #98	; 0x62
 8003c84:	d144      	bne.n	8003d10 <arm_up44+0x3d4>
	{
		pwm3=20;
 8003c86:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <arm_up44+0x3b8>)
 8003c88:	2214      	movs	r2, #20
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	e04a      	b.n	8003d24 <arm_up44+0x3e8>
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	20000090 	.word	0x20000090
 8003c94:	a3d70a3d 	.word	0xa3d70a3d
 8003c98:	40013d70 	.word	0x40013d70
 8003c9c:	20000080 	.word	0x20000080
 8003ca0:	40c00000 	.word	0x40c00000
 8003ca4:	200000b0 	.word	0x200000b0
 8003ca8:	200000a0 	.word	0x200000a0
 8003cac:	20000058 	.word	0x20000058
 8003cb0:	40a00000 	.word	0x40a00000
 8003cb4:	41700000 	.word	0x41700000
 8003cb8:	20000060 	.word	0x20000060
 8003cbc:	200000bc 	.word	0x200000bc
 8003cc0:	2000004d 	.word	0x2000004d
 8003cc4:	20000094 	.word	0x20000094
 8003cc8:	9999999a 	.word	0x9999999a
 8003ccc:	40019999 	.word	0x40019999
 8003cd0:	20000084 	.word	0x20000084
 8003cd4:	20000098 	.word	0x20000098
 8003cd8:	3fa00000 	.word	0x3fa00000
 8003cdc:	20000088 	.word	0x20000088
 8003ce0:	40d00000 	.word	0x40d00000
 8003ce4:	200000b4 	.word	0x200000b4
 8003ce8:	200000b8 	.word	0x200000b8
 8003cec:	200000a4 	.word	0x200000a4
 8003cf0:	20000064 	.word	0x20000064
 8003cf4:	2000004e 	.word	0x2000004e
 8003cf8:	200000a8 	.word	0x200000a8
 8003cfc:	41a00000 	.word	0x41a00000
 8003d00:	41200000 	.word	0x41200000
 8003d04:	20000068 	.word	0x20000068
 8003d08:	2000004f 	.word	0x2000004f
 8003d0c:	2000002c 	.word	0x2000002c
	}
	else if(pwm3 <= 2) {
 8003d10:	4b27      	ldr	r3, [pc, #156]	; (8003db0 <arm_up44+0x474>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d805      	bhi.n	8003d24 <arm_up44+0x3e8>
		direc[2] = 's';
 8003d18:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <arm_up44+0x478>)
 8003d1a:	2273      	movs	r2, #115	; 0x73
 8003d1c:	709a      	strb	r2, [r3, #2]
		pwm3=0;
 8003d1e:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <arm_up44+0x474>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
	}

	if(pwm4>50 && direc[3] == 'b') // max speed up
 8003d24:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <arm_up44+0x47c>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b32      	cmp	r3, #50	; 0x32
 8003d2a:	d906      	bls.n	8003d3a <arm_up44+0x3fe>
 8003d2c:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <arm_up44+0x478>)
 8003d2e:	78db      	ldrb	r3, [r3, #3]
 8003d30:	2b62      	cmp	r3, #98	; 0x62
 8003d32:	d102      	bne.n	8003d3a <arm_up44+0x3fe>
		pwm4=50;
 8003d34:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <arm_up44+0x47c>)
 8003d36:	2232      	movs	r2, #50	; 0x32
 8003d38:	701a      	strb	r2, [r3, #0]
	if(pwm4>8 && direc[3] == 'f')// max speed down
 8003d3a:	4b1f      	ldr	r3, [pc, #124]	; (8003db8 <arm_up44+0x47c>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d907      	bls.n	8003d52 <arm_up44+0x416>
 8003d42:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <arm_up44+0x478>)
 8003d44:	78db      	ldrb	r3, [r3, #3]
 8003d46:	2b66      	cmp	r3, #102	; 0x66
 8003d48:	d103      	bne.n	8003d52 <arm_up44+0x416>
		pwm4=8;
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <arm_up44+0x47c>)
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	e02a      	b.n	8003da8 <arm_up44+0x46c>
	else if(pwm4<28 && pwm4>3 && direc[3] == 'b')// min  speed up
 8003d52:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <arm_up44+0x47c>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b1b      	cmp	r3, #27
 8003d58:	d80b      	bhi.n	8003d72 <arm_up44+0x436>
 8003d5a:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <arm_up44+0x47c>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d907      	bls.n	8003d72 <arm_up44+0x436>
 8003d62:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <arm_up44+0x478>)
 8003d64:	78db      	ldrb	r3, [r3, #3]
 8003d66:	2b62      	cmp	r3, #98	; 0x62
 8003d68:	d103      	bne.n	8003d72 <arm_up44+0x436>
		pwm4=28;
 8003d6a:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <arm_up44+0x47c>)
 8003d6c:	221c      	movs	r2, #28
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	e01a      	b.n	8003da8 <arm_up44+0x46c>
	else if(pwm4<5 && pwm4>3 && direc[3] == 'f')// min speed down
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <arm_up44+0x47c>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d80b      	bhi.n	8003d92 <arm_up44+0x456>
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <arm_up44+0x47c>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d907      	bls.n	8003d92 <arm_up44+0x456>
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <arm_up44+0x478>)
 8003d84:	78db      	ldrb	r3, [r3, #3]
 8003d86:	2b66      	cmp	r3, #102	; 0x66
 8003d88:	d103      	bne.n	8003d92 <arm_up44+0x456>
		pwm4=5;
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <arm_up44+0x47c>)
 8003d8c:	2205      	movs	r2, #5
 8003d8e:	701a      	strb	r2, [r3, #0]
 8003d90:	e00a      	b.n	8003da8 <arm_up44+0x46c>
	else if(pwm4 <= 3)
 8003d92:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <arm_up44+0x47c>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d806      	bhi.n	8003da8 <arm_up44+0x46c>
	{
		direc[3] = 's';
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <arm_up44+0x478>)
 8003d9c:	2273      	movs	r2, #115	; 0x73
 8003d9e:	70da      	strb	r2, [r3, #3]
		pwm4=0;
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <arm_up44+0x47c>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
	}

}
 8003da6:	e7ff      	b.n	8003da8 <arm_up44+0x46c>
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	2000004e 	.word	0x2000004e
 8003db4:	200000bc 	.word	0x200000bc
 8003db8:	2000004f 	.word	0x2000004f

08003dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003dc0:	f000 fe7a 	bl	8004ab8 <HAL_Init>

  /* USER CODE BEGIN Init */
  conveyor[0]='n';
 8003dc4:	4be1      	ldr	r3, [pc, #900]	; (800414c <main+0x390>)
 8003dc6:	226e      	movs	r2, #110	; 0x6e
 8003dc8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */


  /* Configure the system clock */
  SystemClock_Config();
 8003dca:	f000 fad9 	bl	8004380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003dce:	f000 fc27 	bl	8004620 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003dd2:	f000 fb33 	bl	800443c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8003dd6:	f000 fbd5 	bl	8004584 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8003dda:	4bdd      	ldr	r3, [pc, #884]	; (8004150 <main+0x394>)
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f001 fe79 	bl	8005ad4 <HAL_ADCEx_Calibration_Start>

    /* USER CODE BEGIN 3 */

	    /* USER CODE END WHILE */
//
          old1 = theta1;
 8003de2:	4bdc      	ldr	r3, [pc, #880]	; (8004154 <main+0x398>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	4bdc      	ldr	r3, [pc, #880]	; (8004158 <main+0x39c>)
 8003de8:	601a      	str	r2, [r3, #0]
          old2 = theta2;
 8003dea:	4bdc      	ldr	r3, [pc, #880]	; (800415c <main+0x3a0>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4bdc      	ldr	r3, [pc, #880]	; (8004160 <main+0x3a4>)
 8003df0:	601a      	str	r2, [r3, #0]
          old3 = theta3;
 8003df2:	4bdc      	ldr	r3, [pc, #880]	; (8004164 <main+0x3a8>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4bdc      	ldr	r3, [pc, #880]	; (8004168 <main+0x3ac>)
 8003df8:	601a      	str	r2, [r3, #0]
          old4 = theta4;
 8003dfa:	4bdc      	ldr	r3, [pc, #880]	; (800416c <main+0x3b0>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4bdc      	ldr	r3, [pc, #880]	; (8004170 <main+0x3b4>)
 8003e00:	601a      	str	r2, [r3, #0]
          AD1=0;
 8003e02:	4bdc      	ldr	r3, [pc, #880]	; (8004174 <main+0x3b8>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
          AD2=0;
 8003e08:	4bdb      	ldr	r3, [pc, #876]	; (8004178 <main+0x3bc>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
          AD3=0;
 8003e0e:	4bdb      	ldr	r3, [pc, #876]	; (800417c <main+0x3c0>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
          AD4=0;
 8003e14:	4bda      	ldr	r3, [pc, #872]	; (8004180 <main+0x3c4>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]

          for(j=0;j<100;j++)
 8003e1a:	4bda      	ldr	r3, [pc, #872]	; (8004184 <main+0x3c8>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	801a      	strh	r2, [r3, #0]
 8003e20:	e05d      	b.n	8003ede <main+0x122>
          {
        	  for(i=0; i<4; i++)
 8003e22:	4bd9      	ldr	r3, [pc, #868]	; (8004188 <main+0x3cc>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	e04f      	b.n	8003eca <main+0x10e>
        	  	      {

        	  	      HAL_ADC_Start(&hadc1); // Start ADC Conversion
 8003e2a:	4bc9      	ldr	r3, [pc, #804]	; (8004150 <main+0x394>)
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f001 fa0f 	bl	8005250 <HAL_ADC_Start>
        	  	      HAL_ADC_PollForConversion(&hadc1, 1); // Poll ADC1 Peripheral & TimeOut = 1mSec
 8003e32:	4bc7      	ldr	r3, [pc, #796]	; (8004150 <main+0x394>)
 8003e34:	2101      	movs	r1, #1
 8003e36:	0018      	movs	r0, r3
 8003e38:	f001 fa58 	bl	80052ec <HAL_ADC_PollForConversion>
        	  	      AD_RES = HAL_ADC_GetValue(&hadc1); // Read ADC Conversion Result
 8003e3c:	4bc4      	ldr	r3, [pc, #784]	; (8004150 <main+0x394>)
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f001 fae8 	bl	8005414 <HAL_ADC_GetValue>
 8003e44:	0003      	movs	r3, r0
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	4bd0      	ldr	r3, [pc, #832]	; (800418c <main+0x3d0>)
 8003e4a:	801a      	strh	r2, [r3, #0]
        	  	      switch(i)
 8003e4c:	4bce      	ldr	r3, [pc, #824]	; (8004188 <main+0x3cc>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d029      	beq.n	8003ea8 <main+0xec>
 8003e54:	dc33      	bgt.n	8003ebe <main+0x102>
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d01b      	beq.n	8003e92 <main+0xd6>
 8003e5a:	dc30      	bgt.n	8003ebe <main+0x102>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <main+0xaa>
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d00b      	beq.n	8003e7c <main+0xc0>
 8003e64:	e02b      	b.n	8003ebe <main+0x102>
        	  	      {
        	  	        case 0:
        	  	          AD1 += AD_RES>>3; // Map The ADC_RES To PWM DutyCycle
 8003e66:	4bc9      	ldr	r3, [pc, #804]	; (800418c <main+0x3d0>)
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	08db      	lsrs	r3, r3, #3
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	001a      	movs	r2, r3
 8003e70:	4bc0      	ldr	r3, [pc, #768]	; (8004174 <main+0x3b8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	18d2      	adds	r2, r2, r3
 8003e76:	4bbf      	ldr	r3, [pc, #764]	; (8004174 <main+0x3b8>)
 8003e78:	601a      	str	r2, [r3, #0]
        	  	          break;
 8003e7a:	e020      	b.n	8003ebe <main+0x102>
        	  	        case 1:
        	  	          AD2 += AD_RES>>3; // Map The ADC_RES To PWM DutyCycle
 8003e7c:	4bc3      	ldr	r3, [pc, #780]	; (800418c <main+0x3d0>)
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	08db      	lsrs	r3, r3, #3
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	001a      	movs	r2, r3
 8003e86:	4bbc      	ldr	r3, [pc, #752]	; (8004178 <main+0x3bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	18d2      	adds	r2, r2, r3
 8003e8c:	4bba      	ldr	r3, [pc, #744]	; (8004178 <main+0x3bc>)
 8003e8e:	601a      	str	r2, [r3, #0]
        	  	          break;
 8003e90:	e015      	b.n	8003ebe <main+0x102>
        	  	        case 2:
        	  	          AD3 += AD_RES>>3; // Map The ADC_RES To PWM DutyCycle
 8003e92:	4bbe      	ldr	r3, [pc, #760]	; (800418c <main+0x3d0>)
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	08db      	lsrs	r3, r3, #3
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	001a      	movs	r2, r3
 8003e9c:	4bb7      	ldr	r3, [pc, #732]	; (800417c <main+0x3c0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	18d2      	adds	r2, r2, r3
 8003ea2:	4bb6      	ldr	r3, [pc, #728]	; (800417c <main+0x3c0>)
 8003ea4:	601a      	str	r2, [r3, #0]
        	  	          break;
 8003ea6:	e00a      	b.n	8003ebe <main+0x102>
        	  	        case 3:
        	  	          AD4 += AD_RES>>3; // Map The ADC_RES To PWM DutyCycle
 8003ea8:	4bb8      	ldr	r3, [pc, #736]	; (800418c <main+0x3d0>)
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	08db      	lsrs	r3, r3, #3
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	001a      	movs	r2, r3
 8003eb2:	4bb3      	ldr	r3, [pc, #716]	; (8004180 <main+0x3c4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	18d2      	adds	r2, r2, r3
 8003eb8:	4bb1      	ldr	r3, [pc, #708]	; (8004180 <main+0x3c4>)
 8003eba:	601a      	str	r2, [r3, #0]
        	  	          break;
 8003ebc:	46c0      	nop			; (mov r8, r8)
        	  for(i=0; i<4; i++)
 8003ebe:	4bb2      	ldr	r3, [pc, #712]	; (8004188 <main+0x3cc>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	4bb0      	ldr	r3, [pc, #704]	; (8004188 <main+0x3cc>)
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	4baf      	ldr	r3, [pc, #700]	; (8004188 <main+0x3cc>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d9ab      	bls.n	8003e2a <main+0x6e>
          for(j=0;j<100;j++)
 8003ed2:	4bac      	ldr	r3, [pc, #688]	; (8004184 <main+0x3c8>)
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	4baa      	ldr	r3, [pc, #680]	; (8004184 <main+0x3c8>)
 8003edc:	801a      	strh	r2, [r3, #0]
 8003ede:	4ba9      	ldr	r3, [pc, #676]	; (8004184 <main+0x3c8>)
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	2b63      	cmp	r3, #99	; 0x63
 8003ee4:	d99d      	bls.n	8003e22 <main+0x66>
        	  	       }
        	        }
          }

	      theta1=((AD1/155.555)-87)*(pi/180.0);   //  AD/100 (100 number of reads) degree into rad (need to shift 3 bits to left )
 8003ee6:	4ba3      	ldr	r3, [pc, #652]	; (8004174 <main+0x3b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	0018      	movs	r0, r3
 8003eec:	f7fe fc98 	bl	8002820 <__aeabi_ui2d>
 8003ef0:	4aa7      	ldr	r2, [pc, #668]	; (8004190 <main+0x3d4>)
 8003ef2:	4ba8      	ldr	r3, [pc, #672]	; (8004194 <main+0x3d8>)
 8003ef4:	f7fd fa94 	bl	8001420 <__aeabi_ddiv>
 8003ef8:	0002      	movs	r2, r0
 8003efa:	000b      	movs	r3, r1
 8003efc:	0010      	movs	r0, r2
 8003efe:	0019      	movs	r1, r3
 8003f00:	2200      	movs	r2, #0
 8003f02:	4ba5      	ldr	r3, [pc, #660]	; (8004198 <main+0x3dc>)
 8003f04:	f7fe f8fa 	bl	80020fc <__aeabi_dsub>
 8003f08:	0002      	movs	r2, r0
 8003f0a:	000b      	movs	r3, r1
 8003f0c:	0010      	movs	r0, r2
 8003f0e:	0019      	movs	r1, r3
 8003f10:	4aa2      	ldr	r2, [pc, #648]	; (800419c <main+0x3e0>)
 8003f12:	4ba3      	ldr	r3, [pc, #652]	; (80041a0 <main+0x3e4>)
 8003f14:	f7fd fe86 	bl	8001c24 <__aeabi_dmul>
 8003f18:	0002      	movs	r2, r0
 8003f1a:	000b      	movs	r3, r1
 8003f1c:	0010      	movs	r0, r2
 8003f1e:	0019      	movs	r1, r3
 8003f20:	f7fe fcec 	bl	80028fc <__aeabi_d2f>
 8003f24:	1c02      	adds	r2, r0, #0
 8003f26:	4b8b      	ldr	r3, [pc, #556]	; (8004154 <main+0x398>)
 8003f28:	601a      	str	r2, [r3, #0]
	      theta2=((AD2/155.555)-87)*(pi/180.0);
 8003f2a:	4b93      	ldr	r3, [pc, #588]	; (8004178 <main+0x3bc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f7fe fc76 	bl	8002820 <__aeabi_ui2d>
 8003f34:	4a96      	ldr	r2, [pc, #600]	; (8004190 <main+0x3d4>)
 8003f36:	4b97      	ldr	r3, [pc, #604]	; (8004194 <main+0x3d8>)
 8003f38:	f7fd fa72 	bl	8001420 <__aeabi_ddiv>
 8003f3c:	0002      	movs	r2, r0
 8003f3e:	000b      	movs	r3, r1
 8003f40:	0010      	movs	r0, r2
 8003f42:	0019      	movs	r1, r3
 8003f44:	2200      	movs	r2, #0
 8003f46:	4b94      	ldr	r3, [pc, #592]	; (8004198 <main+0x3dc>)
 8003f48:	f7fe f8d8 	bl	80020fc <__aeabi_dsub>
 8003f4c:	0002      	movs	r2, r0
 8003f4e:	000b      	movs	r3, r1
 8003f50:	0010      	movs	r0, r2
 8003f52:	0019      	movs	r1, r3
 8003f54:	4a91      	ldr	r2, [pc, #580]	; (800419c <main+0x3e0>)
 8003f56:	4b92      	ldr	r3, [pc, #584]	; (80041a0 <main+0x3e4>)
 8003f58:	f7fd fe64 	bl	8001c24 <__aeabi_dmul>
 8003f5c:	0002      	movs	r2, r0
 8003f5e:	000b      	movs	r3, r1
 8003f60:	0010      	movs	r0, r2
 8003f62:	0019      	movs	r1, r3
 8003f64:	f7fe fcca 	bl	80028fc <__aeabi_d2f>
 8003f68:	1c02      	adds	r2, r0, #0
 8003f6a:	4b7c      	ldr	r3, [pc, #496]	; (800415c <main+0x3a0>)
 8003f6c:	601a      	str	r2, [r3, #0]
	      theta3=((AD3/155.555)-87)*(pi/180.0);
 8003f6e:	4b83      	ldr	r3, [pc, #524]	; (800417c <main+0x3c0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	0018      	movs	r0, r3
 8003f74:	f7fe fc54 	bl	8002820 <__aeabi_ui2d>
 8003f78:	4a85      	ldr	r2, [pc, #532]	; (8004190 <main+0x3d4>)
 8003f7a:	4b86      	ldr	r3, [pc, #536]	; (8004194 <main+0x3d8>)
 8003f7c:	f7fd fa50 	bl	8001420 <__aeabi_ddiv>
 8003f80:	0002      	movs	r2, r0
 8003f82:	000b      	movs	r3, r1
 8003f84:	0010      	movs	r0, r2
 8003f86:	0019      	movs	r1, r3
 8003f88:	2200      	movs	r2, #0
 8003f8a:	4b83      	ldr	r3, [pc, #524]	; (8004198 <main+0x3dc>)
 8003f8c:	f7fe f8b6 	bl	80020fc <__aeabi_dsub>
 8003f90:	0002      	movs	r2, r0
 8003f92:	000b      	movs	r3, r1
 8003f94:	0010      	movs	r0, r2
 8003f96:	0019      	movs	r1, r3
 8003f98:	4a80      	ldr	r2, [pc, #512]	; (800419c <main+0x3e0>)
 8003f9a:	4b81      	ldr	r3, [pc, #516]	; (80041a0 <main+0x3e4>)
 8003f9c:	f7fd fe42 	bl	8001c24 <__aeabi_dmul>
 8003fa0:	0002      	movs	r2, r0
 8003fa2:	000b      	movs	r3, r1
 8003fa4:	0010      	movs	r0, r2
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	f7fe fca8 	bl	80028fc <__aeabi_d2f>
 8003fac:	1c02      	adds	r2, r0, #0
 8003fae:	4b6d      	ldr	r3, [pc, #436]	; (8004164 <main+0x3a8>)
 8003fb0:	601a      	str	r2, [r3, #0]
	      theta4=((AD4/155.555)-87)*(pi/180.0);
 8003fb2:	4b73      	ldr	r3, [pc, #460]	; (8004180 <main+0x3c4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f7fe fc32 	bl	8002820 <__aeabi_ui2d>
 8003fbc:	4a74      	ldr	r2, [pc, #464]	; (8004190 <main+0x3d4>)
 8003fbe:	4b75      	ldr	r3, [pc, #468]	; (8004194 <main+0x3d8>)
 8003fc0:	f7fd fa2e 	bl	8001420 <__aeabi_ddiv>
 8003fc4:	0002      	movs	r2, r0
 8003fc6:	000b      	movs	r3, r1
 8003fc8:	0010      	movs	r0, r2
 8003fca:	0019      	movs	r1, r3
 8003fcc:	2200      	movs	r2, #0
 8003fce:	4b72      	ldr	r3, [pc, #456]	; (8004198 <main+0x3dc>)
 8003fd0:	f7fe f894 	bl	80020fc <__aeabi_dsub>
 8003fd4:	0002      	movs	r2, r0
 8003fd6:	000b      	movs	r3, r1
 8003fd8:	0010      	movs	r0, r2
 8003fda:	0019      	movs	r1, r3
 8003fdc:	4a6f      	ldr	r2, [pc, #444]	; (800419c <main+0x3e0>)
 8003fde:	4b70      	ldr	r3, [pc, #448]	; (80041a0 <main+0x3e4>)
 8003fe0:	f7fd fe20 	bl	8001c24 <__aeabi_dmul>
 8003fe4:	0002      	movs	r2, r0
 8003fe6:	000b      	movs	r3, r1
 8003fe8:	0010      	movs	r0, r2
 8003fea:	0019      	movs	r1, r3
 8003fec:	f7fe fc86 	bl	80028fc <__aeabi_d2f>
 8003ff0:	1c02      	adds	r2, r0, #0
 8003ff2:	4b5e      	ldr	r3, [pc, #376]	; (800416c <main+0x3b0>)
 8003ff4:	601a      	str	r2, [r3, #0]
//
	      time_previous = time_now;
 8003ff6:	4b6b      	ldr	r3, [pc, #428]	; (80041a4 <main+0x3e8>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b6b      	ldr	r3, [pc, #428]	; (80041a8 <main+0x3ec>)
 8003ffc:	601a      	str	r2, [r3, #0]
	      time_now = HAL_GetTick();
 8003ffe:	f000 fdd7 	bl	8004bb0 <HAL_GetTick>
 8004002:	0003      	movs	r3, r0
 8004004:	0018      	movs	r0, r3
 8004006:	f7fd f9c9 	bl	800139c <__aeabi_ui2f>
 800400a:	1c02      	adds	r2, r0, #0
 800400c:	4b65      	ldr	r3, [pc, #404]	; (80041a4 <main+0x3e8>)
 800400e:	601a      	str	r2, [r3, #0]
	      Ts = (time_now-time_previous)/1000.0;
 8004010:	4b64      	ldr	r3, [pc, #400]	; (80041a4 <main+0x3e8>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	4b64      	ldr	r3, [pc, #400]	; (80041a8 <main+0x3ec>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	1c19      	adds	r1, r3, #0
 800401a:	1c10      	adds	r0, r2, #0
 800401c:	f7fc fff0 	bl	8001000 <__aeabi_fsub>
 8004020:	1c03      	adds	r3, r0, #0
 8004022:	4962      	ldr	r1, [pc, #392]	; (80041ac <main+0x3f0>)
 8004024:	1c18      	adds	r0, r3, #0
 8004026:	f7fc fcfd 	bl	8000a24 <__aeabi_fdiv>
 800402a:	1c03      	adds	r3, r0, #0
 800402c:	1c1a      	adds	r2, r3, #0
 800402e:	4b60      	ldr	r3, [pc, #384]	; (80041b0 <main+0x3f4>)
 8004030:	601a      	str	r2, [r3, #0]
	      velocity1=(theta1-old1)/Ts;
 8004032:	4b48      	ldr	r3, [pc, #288]	; (8004154 <main+0x398>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4b48      	ldr	r3, [pc, #288]	; (8004158 <main+0x39c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	1c19      	adds	r1, r3, #0
 800403c:	1c10      	adds	r0, r2, #0
 800403e:	f7fc ffdf 	bl	8001000 <__aeabi_fsub>
 8004042:	1c03      	adds	r3, r0, #0
 8004044:	1c1a      	adds	r2, r3, #0
 8004046:	4b5a      	ldr	r3, [pc, #360]	; (80041b0 <main+0x3f4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	1c19      	adds	r1, r3, #0
 800404c:	1c10      	adds	r0, r2, #0
 800404e:	f7fc fce9 	bl	8000a24 <__aeabi_fdiv>
 8004052:	1c03      	adds	r3, r0, #0
 8004054:	1c1a      	adds	r2, r3, #0
 8004056:	4b57      	ldr	r3, [pc, #348]	; (80041b4 <main+0x3f8>)
 8004058:	601a      	str	r2, [r3, #0]
	      velocity2=(theta2-old2)/Ts;
 800405a:	4b40      	ldr	r3, [pc, #256]	; (800415c <main+0x3a0>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4b40      	ldr	r3, [pc, #256]	; (8004160 <main+0x3a4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	1c19      	adds	r1, r3, #0
 8004064:	1c10      	adds	r0, r2, #0
 8004066:	f7fc ffcb 	bl	8001000 <__aeabi_fsub>
 800406a:	1c03      	adds	r3, r0, #0
 800406c:	1c1a      	adds	r2, r3, #0
 800406e:	4b50      	ldr	r3, [pc, #320]	; (80041b0 <main+0x3f4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	1c19      	adds	r1, r3, #0
 8004074:	1c10      	adds	r0, r2, #0
 8004076:	f7fc fcd5 	bl	8000a24 <__aeabi_fdiv>
 800407a:	1c03      	adds	r3, r0, #0
 800407c:	1c1a      	adds	r2, r3, #0
 800407e:	4b4e      	ldr	r3, [pc, #312]	; (80041b8 <main+0x3fc>)
 8004080:	601a      	str	r2, [r3, #0]
	      velocity3=(theta3-old3)/Ts;
 8004082:	4b38      	ldr	r3, [pc, #224]	; (8004164 <main+0x3a8>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4b38      	ldr	r3, [pc, #224]	; (8004168 <main+0x3ac>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	1c19      	adds	r1, r3, #0
 800408c:	1c10      	adds	r0, r2, #0
 800408e:	f7fc ffb7 	bl	8001000 <__aeabi_fsub>
 8004092:	1c03      	adds	r3, r0, #0
 8004094:	1c1a      	adds	r2, r3, #0
 8004096:	4b46      	ldr	r3, [pc, #280]	; (80041b0 <main+0x3f4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	1c19      	adds	r1, r3, #0
 800409c:	1c10      	adds	r0, r2, #0
 800409e:	f7fc fcc1 	bl	8000a24 <__aeabi_fdiv>
 80040a2:	1c03      	adds	r3, r0, #0
 80040a4:	1c1a      	adds	r2, r3, #0
 80040a6:	4b45      	ldr	r3, [pc, #276]	; (80041bc <main+0x400>)
 80040a8:	601a      	str	r2, [r3, #0]
	      velocity4=(theta4-old4)/Ts;
 80040aa:	4b30      	ldr	r3, [pc, #192]	; (800416c <main+0x3b0>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b30      	ldr	r3, [pc, #192]	; (8004170 <main+0x3b4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	1c19      	adds	r1, r3, #0
 80040b4:	1c10      	adds	r0, r2, #0
 80040b6:	f7fc ffa3 	bl	8001000 <__aeabi_fsub>
 80040ba:	1c03      	adds	r3, r0, #0
 80040bc:	1c1a      	adds	r2, r3, #0
 80040be:	4b3c      	ldr	r3, [pc, #240]	; (80041b0 <main+0x3f4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	1c19      	adds	r1, r3, #0
 80040c4:	1c10      	adds	r0, r2, #0
 80040c6:	f7fc fcad 	bl	8000a24 <__aeabi_fdiv>
 80040ca:	1c03      	adds	r3, r0, #0
 80040cc:	1c1a      	adds	r2, r3, #0
 80040ce:	4b3c      	ldr	r3, [pc, #240]	; (80041c0 <main+0x404>)
 80040d0:	601a      	str	r2, [r3, #0]

//          arm_down2();

	      if(series == 10 )
 80040d2:	4b3c      	ldr	r3, [pc, #240]	; (80041c4 <main+0x408>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b0a      	cmp	r3, #10
 80040d8:	d129      	bne.n	800412e <main+0x372>
	      {

	    	  conveyor[0] = 'n';
 80040da:	4b1c      	ldr	r3, [pc, #112]	; (800414c <main+0x390>)
 80040dc:	226e      	movs	r2, #110	; 0x6e
 80040de:	701a      	strb	r2, [r3, #0]
		      if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)==1)// B15 inductive Proximity Sensor
 80040e0:	2380      	movs	r3, #128	; 0x80
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	4a38      	ldr	r2, [pc, #224]	; (80041c8 <main+0x40c>)
 80040e6:	0019      	movs	r1, r3
 80040e8:	0010      	movs	r0, r2
 80040ea:	f002 f80f 	bl	800610c <HAL_GPIO_ReadPin>
 80040ee:	0003      	movs	r3, r0
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d102      	bne.n	80040fa <main+0x33e>
		      {

		    	  material_type = metal;
 80040f4:	4b35      	ldr	r3, [pc, #212]	; (80041cc <main+0x410>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	701a      	strb	r2, [r3, #0]

		      }
		      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==1)// A8 capacity proximity sensor
 80040fa:	2380      	movs	r3, #128	; 0x80
 80040fc:	005a      	lsls	r2, r3, #1
 80040fe:	23a0      	movs	r3, #160	; 0xa0
 8004100:	05db      	lsls	r3, r3, #23
 8004102:	0011      	movs	r1, r2
 8004104:	0018      	movs	r0, r3
 8004106:	f002 f801 	bl	800610c <HAL_GPIO_ReadPin>
 800410a:	0003      	movs	r3, r0
 800410c:	2b01      	cmp	r3, #1
 800410e:	d000      	beq.n	8004112 <main+0x356>
 8004110:	e0e9      	b.n	80042e6 <main+0x52a>
		      {
		    	  conveyor[0] = 's';  // Stop Conveyor belt
 8004112:	4b0e      	ldr	r3, [pc, #56]	; (800414c <main+0x390>)
 8004114:	2273      	movs	r2, #115	; 0x73
 8004116:	701a      	strb	r2, [r3, #0]
		    	  if(material_type != metal)
 8004118:	4b2c      	ldr	r3, [pc, #176]	; (80041cc <main+0x410>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d002      	beq.n	8004126 <main+0x36a>
		    	  {
		    		  material_type = not_metal;
 8004120:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <main+0x410>)
 8004122:	2202      	movs	r2, #2
 8004124:	701a      	strb	r2, [r3, #0]
		    	  }
		    	  series = 1;  // next step
 8004126:	4b27      	ldr	r3, [pc, #156]	; (80041c4 <main+0x408>)
 8004128:	2201      	movs	r2, #1
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	e0db      	b.n	80042e6 <main+0x52a>

		      }


	      }
	      else if(series == 1)
 800412e:	4b25      	ldr	r3, [pc, #148]	; (80041c4 <main+0x408>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d14e      	bne.n	80041d4 <main+0x418>
	      {
	    	  arm_up();
 8004136:	f7fe fc93 	bl	8002a60 <arm_up>
	    	  if(flag == arm_is_up)
 800413a:	4b25      	ldr	r3, [pc, #148]	; (80041d0 <main+0x414>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d000      	beq.n	8004144 <main+0x388>
 8004142:	e0d0      	b.n	80042e6 <main+0x52a>
	    	  {
	    		   series = 2;
 8004144:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <main+0x408>)
 8004146:	2202      	movs	r2, #2
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	e0cc      	b.n	80042e6 <main+0x52a>
 800414c:	200000c0 	.word	0x200000c0
 8004150:	200000c8 	.word	0x200000c8
 8004154:	2000008c 	.word	0x2000008c
 8004158:	2000006c 	.word	0x2000006c
 800415c:	20000090 	.word	0x20000090
 8004160:	20000070 	.word	0x20000070
 8004164:	20000094 	.word	0x20000094
 8004168:	20000074 	.word	0x20000074
 800416c:	20000098 	.word	0x20000098
 8004170:	20000078 	.word	0x20000078
 8004174:	20000034 	.word	0x20000034
 8004178:	20000038 	.word	0x20000038
 800417c:	2000003c 	.word	0x2000003c
 8004180:	20000040 	.word	0x20000040
 8004184:	20000046 	.word	0x20000046
 8004188:	20000044 	.word	0x20000044
 800418c:	20000030 	.word	0x20000030
 8004190:	8f5c28f6 	.word	0x8f5c28f6
 8004194:	406371c2 	.word	0x406371c2
 8004198:	4055c000 	.word	0x4055c000
 800419c:	d98b0955 	.word	0xd98b0955
 80041a0:	3f91dcf4 	.word	0x3f91dcf4
 80041a4:	20000050 	.word	0x20000050
 80041a8:	20000054 	.word	0x20000054
 80041ac:	447a0000 	.word	0x447a0000
 80041b0:	20000058 	.word	0x20000058
 80041b4:	2000009c 	.word	0x2000009c
 80041b8:	200000a0 	.word	0x200000a0
 80041bc:	200000a4 	.word	0x200000a4
 80041c0:	200000a8 	.word	0x200000a8
 80041c4:	20000000 	.word	0x20000000
 80041c8:	50000400 	.word	0x50000400
 80041cc:	2000002d 	.word	0x2000002d
 80041d0:	2000002c 	.word	0x2000002c
	    	  }


	      }
	      else if(series == 2 )
 80041d4:	4b5a      	ldr	r3, [pc, #360]	; (8004340 <main+0x584>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d10c      	bne.n	80041f6 <main+0x43a>
	      {
	    	  rot_base(pi/2);
 80041dc:	4b59      	ldr	r3, [pc, #356]	; (8004344 <main+0x588>)
 80041de:	1c18      	adds	r0, r3, #0
 80041e0:	f7ff f8c8 	bl	8003374 <rot_base>
	    	  if(base_position_now == (uint8_t)(pi/2))
 80041e4:	4b58      	ldr	r3, [pc, #352]	; (8004348 <main+0x58c>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d000      	beq.n	80041ee <main+0x432>
 80041ec:	e07b      	b.n	80042e6 <main+0x52a>
	    	  {
	    		  series = 3;
 80041ee:	4b54      	ldr	r3, [pc, #336]	; (8004340 <main+0x584>)
 80041f0:	2203      	movs	r2, #3
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	e077      	b.n	80042e6 <main+0x52a>
	    	  }

	      }


	      else if( series == 3 )
 80041f6:	4b52      	ldr	r3, [pc, #328]	; (8004340 <main+0x584>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d119      	bne.n	8004232 <main+0x476>
	      {
	    	  arm_down();
 80041fe:	f7fe fe7b 	bl	8002ef8 <arm_down>
	    	  if(flag == arm_is_down)
 8004202:	4b52      	ldr	r3, [pc, #328]	; (800434c <main+0x590>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d108      	bne.n	800421c <main+0x460>
	    	  {
	    	  	   end_effector[0]='c';
 800420a:	4b51      	ldr	r3, [pc, #324]	; (8004350 <main+0x594>)
 800420c:	2263      	movs	r2, #99	; 0x63
 800420e:	701a      	strb	r2, [r3, #0]
	    	  	   x += 1;
 8004210:	4b50      	ldr	r3, [pc, #320]	; (8004354 <main+0x598>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	3301      	adds	r3, #1
 8004216:	b2da      	uxtb	r2, r3
 8004218:	4b4e      	ldr	r3, [pc, #312]	; (8004354 <main+0x598>)
 800421a:	701a      	strb	r2, [r3, #0]
	    	  }
	    	  if(x == 100)
 800421c:	4b4d      	ldr	r3, [pc, #308]	; (8004354 <main+0x598>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b64      	cmp	r3, #100	; 0x64
 8004222:	d160      	bne.n	80042e6 <main+0x52a>
	    	  {
	    		  series = 4;
 8004224:	4b46      	ldr	r3, [pc, #280]	; (8004340 <main+0x584>)
 8004226:	2204      	movs	r2, #4
 8004228:	701a      	strb	r2, [r3, #0]
	    		  x = 0;
 800422a:	4b4a      	ldr	r3, [pc, #296]	; (8004354 <main+0x598>)
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	e059      	b.n	80042e6 <main+0x52a>
	    	  }

	      }
	      else if(series == 4)
 8004232:	4b43      	ldr	r3, [pc, #268]	; (8004340 <main+0x584>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b04      	cmp	r3, #4
 8004238:	d109      	bne.n	800424e <main+0x492>
	      {
	    	  arm_up44();
 800423a:	f7ff fb7f 	bl	800393c <arm_up44>
	    	  if(flag == arm_is_up)
 800423e:	4b43      	ldr	r3, [pc, #268]	; (800434c <main+0x590>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d14f      	bne.n	80042e6 <main+0x52a>
	    	  {
	    		  series = 5;
 8004246:	4b3e      	ldr	r3, [pc, #248]	; (8004340 <main+0x584>)
 8004248:	2205      	movs	r2, #5
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	e04b      	b.n	80042e6 <main+0x52a>
	    	  }

	      }
	      else if(series == 5)
 800424e:	4b3c      	ldr	r3, [pc, #240]	; (8004340 <main+0x584>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b05      	cmp	r3, #5
 8004254:	d11f      	bne.n	8004296 <main+0x4da>
	      {
	    	  if(material_type == metal)
 8004256:	4b40      	ldr	r3, [pc, #256]	; (8004358 <main+0x59c>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d10b      	bne.n	8004276 <main+0x4ba>
	    	  {
	    		  rot_base(pi);
 800425e:	4b3f      	ldr	r3, [pc, #252]	; (800435c <main+0x5a0>)
 8004260:	1c18      	adds	r0, r3, #0
 8004262:	f7ff f887 	bl	8003374 <rot_base>
	    		  if(base_position_now == (uint8_t)(pi))
 8004266:	4b38      	ldr	r3, [pc, #224]	; (8004348 <main+0x58c>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b03      	cmp	r3, #3
 800426c:	d13b      	bne.n	80042e6 <main+0x52a>
	    		  {
	    			  series = 6;
 800426e:	4b34      	ldr	r3, [pc, #208]	; (8004340 <main+0x584>)
 8004270:	2206      	movs	r2, #6
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	e037      	b.n	80042e6 <main+0x52a>
	    		  }

	    	  }
	    	  else if(material_type == not_metal)
 8004276:	4b38      	ldr	r3, [pc, #224]	; (8004358 <main+0x59c>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d133      	bne.n	80042e6 <main+0x52a>
	    	  {
	    		  rot_base(0.0);
 800427e:	2300      	movs	r3, #0
 8004280:	1c18      	adds	r0, r3, #0
 8004282:	f7ff f877 	bl	8003374 <rot_base>
	    		  if(base_position_now == (uint8_t)(0.0))
 8004286:	4b30      	ldr	r3, [pc, #192]	; (8004348 <main+0x58c>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d12b      	bne.n	80042e6 <main+0x52a>
	    		  {
	    			  series = 6;
 800428e:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <main+0x584>)
 8004290:	2206      	movs	r2, #6
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	e027      	b.n	80042e6 <main+0x52a>
	    		  }
	           }
	      }
	      else if(series == 6)
 8004296:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <main+0x584>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b06      	cmp	r3, #6
 800429c:	d109      	bne.n	80042b2 <main+0x4f6>
	      {
	    	  arm_down44();
 800429e:	f7ff f90f 	bl	80034c0 <arm_down44>
	    	  if(flag == arm_is_down)
 80042a2:	4b2a      	ldr	r3, [pc, #168]	; (800434c <main+0x590>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d11d      	bne.n	80042e6 <main+0x52a>
	    	  {
	    		  series = 7;
 80042aa:	4b25      	ldr	r3, [pc, #148]	; (8004340 <main+0x584>)
 80042ac:	2207      	movs	r2, #7
 80042ae:	701a      	strb	r2, [r3, #0]
 80042b0:	e019      	b.n	80042e6 <main+0x52a>
	    	  }
	      }
	      else if(series == 7)
 80042b2:	4b23      	ldr	r3, [pc, #140]	; (8004340 <main+0x584>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b07      	cmp	r3, #7
 80042b8:	d115      	bne.n	80042e6 <main+0x52a>
	      {
	    	  end_effector[0] = 'o';
 80042ba:	4b25      	ldr	r3, [pc, #148]	; (8004350 <main+0x594>)
 80042bc:	226f      	movs	r2, #111	; 0x6f
 80042be:	701a      	strb	r2, [r3, #0]
	    	  x += 1;                // as a timer
 80042c0:	4b24      	ldr	r3, [pc, #144]	; (8004354 <main+0x598>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	3301      	adds	r3, #1
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	4b22      	ldr	r3, [pc, #136]	; (8004354 <main+0x598>)
 80042ca:	701a      	strb	r2, [r3, #0]
	    	  if(x == 100)
 80042cc:	4b21      	ldr	r3, [pc, #132]	; (8004354 <main+0x598>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b64      	cmp	r3, #100	; 0x64
 80042d2:	d108      	bne.n	80042e6 <main+0x52a>
	    	  {
	    		  x = 0;
 80042d4:	4b1f      	ldr	r3, [pc, #124]	; (8004354 <main+0x598>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	701a      	strb	r2, [r3, #0]
	    		  series = 10;
 80042da:	4b19      	ldr	r3, [pc, #100]	; (8004340 <main+0x584>)
 80042dc:	220a      	movs	r2, #10
 80042de:	701a      	strb	r2, [r3, #0]
	    		  material_type = 0;
 80042e0:	4b1d      	ldr	r3, [pc, #116]	; (8004358 <main+0x59c>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	4b1e      	ldr	r3, [pc, #120]	; (8004360 <main+0x5a4>)
 80042e8:	781a      	ldrb	r2, [r3, #0]





	      memcpy(&AD[0],&pwm1,1);
 80042ea:	4b1e      	ldr	r3, [pc, #120]	; (8004364 <main+0x5a8>)
 80042ec:	701a      	strb	r2, [r3, #0]
 80042ee:	4b1e      	ldr	r3, [pc, #120]	; (8004368 <main+0x5ac>)
 80042f0:	781a      	ldrb	r2, [r3, #0]
	      memcpy(&AD[1],&pwm2,1);
 80042f2:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <main+0x5a8>)
 80042f4:	705a      	strb	r2, [r3, #1]
 80042f6:	4b1d      	ldr	r3, [pc, #116]	; (800436c <main+0x5b0>)
 80042f8:	781a      	ldrb	r2, [r3, #0]
	      memcpy(&AD[2],&pwm3,1);
 80042fa:	4b1a      	ldr	r3, [pc, #104]	; (8004364 <main+0x5a8>)
 80042fc:	709a      	strb	r2, [r3, #2]
 80042fe:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <main+0x5b4>)
 8004300:	781a      	ldrb	r2, [r3, #0]
	      memcpy(&AD[3],&pwm4,1);
 8004302:	4b18      	ldr	r3, [pc, #96]	; (8004364 <main+0x5a8>)
 8004304:	70da      	strb	r2, [r3, #3]
	      HAL_UART_Transmit(&huart2, end_effector, 1, 100);
 8004306:	4912      	ldr	r1, [pc, #72]	; (8004350 <main+0x594>)
 8004308:	481a      	ldr	r0, [pc, #104]	; (8004374 <main+0x5b8>)
 800430a:	2364      	movs	r3, #100	; 0x64
 800430c:	2201      	movs	r2, #1
 800430e:	f002 ff03 	bl	8007118 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&huart2, conveyor, 1, 100);
 8004312:	4919      	ldr	r1, [pc, #100]	; (8004378 <main+0x5bc>)
 8004314:	4817      	ldr	r0, [pc, #92]	; (8004374 <main+0x5b8>)
 8004316:	2364      	movs	r3, #100	; 0x64
 8004318:	2201      	movs	r2, #1
 800431a:	f002 fefd 	bl	8007118 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&huart2, direc, 4, 100);
 800431e:	4917      	ldr	r1, [pc, #92]	; (800437c <main+0x5c0>)
 8004320:	4814      	ldr	r0, [pc, #80]	; (8004374 <main+0x5b8>)
 8004322:	2364      	movs	r3, #100	; 0x64
 8004324:	2204      	movs	r2, #4
 8004326:	f002 fef7 	bl	8007118 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&huart2, AD, 4, 100);
 800432a:	490e      	ldr	r1, [pc, #56]	; (8004364 <main+0x5a8>)
 800432c:	4811      	ldr	r0, [pc, #68]	; (8004374 <main+0x5b8>)
 800432e:	2364      	movs	r3, #100	; 0x64
 8004330:	2204      	movs	r2, #4
 8004332:	f002 fef1 	bl	8007118 <HAL_UART_Transmit>

	      HAL_Delay(15);
 8004336:	200f      	movs	r0, #15
 8004338:	f000 fc44 	bl	8004bc4 <HAL_Delay>
          old1 = theta1;
 800433c:	e551      	b.n	8003de2 <main+0x26>
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	20000000 	.word	0x20000000
 8004344:	3fc8f5c3 	.word	0x3fc8f5c3
 8004348:	2000002e 	.word	0x2000002e
 800434c:	2000002c 	.word	0x2000002c
 8004350:	200000c4 	.word	0x200000c4
 8004354:	200000c5 	.word	0x200000c5
 8004358:	2000002d 	.word	0x2000002d
 800435c:	4048f5c3 	.word	0x4048f5c3
 8004360:	2000004c 	.word	0x2000004c
 8004364:	20000048 	.word	0x20000048
 8004368:	2000004d 	.word	0x2000004d
 800436c:	2000004e 	.word	0x2000004e
 8004370:	2000004f 	.word	0x2000004f
 8004374:	2000012c 	.word	0x2000012c
 8004378:	200000c0 	.word	0x200000c0
 800437c:	200000bc 	.word	0x200000bc

08004380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b095      	sub	sp, #84	; 0x54
 8004384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004386:	2414      	movs	r4, #20
 8004388:	193b      	adds	r3, r7, r4
 800438a:	0018      	movs	r0, r3
 800438c:	233c      	movs	r3, #60	; 0x3c
 800438e:	001a      	movs	r2, r3
 8004390:	2100      	movs	r1, #0
 8004392:	f003 fe2d 	bl	8007ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004396:	1d3b      	adds	r3, r7, #4
 8004398:	0018      	movs	r0, r3
 800439a:	2310      	movs	r3, #16
 800439c:	001a      	movs	r2, r3
 800439e:	2100      	movs	r1, #0
 80043a0:	f003 fe26 	bl	8007ff0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	0018      	movs	r0, r3
 80043aa:	f001 fecd 	bl	8006148 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80043ae:	193b      	adds	r3, r7, r4
 80043b0:	2202      	movs	r2, #2
 80043b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80043b4:	193b      	adds	r3, r7, r4
 80043b6:	2280      	movs	r2, #128	; 0x80
 80043b8:	0052      	lsls	r2, r2, #1
 80043ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80043bc:	0021      	movs	r1, r4
 80043be:	187b      	adds	r3, r7, r1
 80043c0:	2200      	movs	r2, #0
 80043c2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	2240      	movs	r2, #64	; 0x40
 80043c8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043ca:	187b      	adds	r3, r7, r1
 80043cc:	2202      	movs	r2, #2
 80043ce:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80043d0:	187b      	adds	r3, r7, r1
 80043d2:	2202      	movs	r2, #2
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80043d6:	187b      	adds	r3, r7, r1
 80043d8:	2200      	movs	r2, #0
 80043da:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80043dc:	187b      	adds	r3, r7, r1
 80043de:	2208      	movs	r2, #8
 80043e0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80043e2:	187b      	adds	r3, r7, r1
 80043e4:	2280      	movs	r2, #128	; 0x80
 80043e6:	0292      	lsls	r2, r2, #10
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80043ea:	187b      	adds	r3, r7, r1
 80043ec:	2280      	movs	r2, #128	; 0x80
 80043ee:	0492      	lsls	r2, r2, #18
 80043f0:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80043f2:	187b      	adds	r3, r7, r1
 80043f4:	2280      	movs	r2, #128	; 0x80
 80043f6:	0592      	lsls	r2, r2, #22
 80043f8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043fa:	187b      	adds	r3, r7, r1
 80043fc:	0018      	movs	r0, r3
 80043fe:	f001 feef 	bl	80061e0 <HAL_RCC_OscConfig>
 8004402:	1e03      	subs	r3, r0, #0
 8004404:	d001      	beq.n	800440a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004406:	f000 f965 	bl	80046d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800440a:	1d3b      	adds	r3, r7, #4
 800440c:	2207      	movs	r2, #7
 800440e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004410:	1d3b      	adds	r3, r7, #4
 8004412:	2202      	movs	r2, #2
 8004414:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	2200      	movs	r2, #0
 800441a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800441c:	1d3b      	adds	r3, r7, #4
 800441e:	2200      	movs	r2, #0
 8004420:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004422:	1d3b      	adds	r3, r7, #4
 8004424:	2102      	movs	r1, #2
 8004426:	0018      	movs	r0, r3
 8004428:	f002 fa3a 	bl	80068a0 <HAL_RCC_ClockConfig>
 800442c:	1e03      	subs	r3, r0, #0
 800442e:	d001      	beq.n	8004434 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004430:	f000 f950 	bl	80046d4 <Error_Handler>
  }
}
 8004434:	46c0      	nop			; (mov r8, r8)
 8004436:	46bd      	mov	sp, r7
 8004438:	b015      	add	sp, #84	; 0x54
 800443a:	bd90      	pop	{r4, r7, pc}

0800443c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004442:	1d3b      	adds	r3, r7, #4
 8004444:	0018      	movs	r0, r3
 8004446:	230c      	movs	r3, #12
 8004448:	001a      	movs	r2, r3
 800444a:	2100      	movs	r1, #0
 800444c:	f003 fdd0 	bl	8007ff0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004450:	4b46      	ldr	r3, [pc, #280]	; (800456c <MX_ADC1_Init+0x130>)
 8004452:	4a47      	ldr	r2, [pc, #284]	; (8004570 <MX_ADC1_Init+0x134>)
 8004454:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004456:	4b45      	ldr	r3, [pc, #276]	; (800456c <MX_ADC1_Init+0x130>)
 8004458:	2280      	movs	r2, #128	; 0x80
 800445a:	05d2      	lsls	r2, r2, #23
 800445c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800445e:	4b43      	ldr	r3, [pc, #268]	; (800456c <MX_ADC1_Init+0x130>)
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004464:	4b41      	ldr	r3, [pc, #260]	; (800456c <MX_ADC1_Init+0x130>)
 8004466:	2200      	movs	r2, #0
 8004468:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800446a:	4b40      	ldr	r3, [pc, #256]	; (800456c <MX_ADC1_Init+0x130>)
 800446c:	2280      	movs	r2, #128	; 0x80
 800446e:	0392      	lsls	r2, r2, #14
 8004470:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004472:	4b3e      	ldr	r3, [pc, #248]	; (800456c <MX_ADC1_Init+0x130>)
 8004474:	2204      	movs	r2, #4
 8004476:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004478:	4b3c      	ldr	r3, [pc, #240]	; (800456c <MX_ADC1_Init+0x130>)
 800447a:	2200      	movs	r2, #0
 800447c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800447e:	4b3b      	ldr	r3, [pc, #236]	; (800456c <MX_ADC1_Init+0x130>)
 8004480:	2200      	movs	r2, #0
 8004482:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004484:	4b39      	ldr	r3, [pc, #228]	; (800456c <MX_ADC1_Init+0x130>)
 8004486:	2200      	movs	r2, #0
 8004488:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 800448a:	4b38      	ldr	r3, [pc, #224]	; (800456c <MX_ADC1_Init+0x130>)
 800448c:	2204      	movs	r2, #4
 800448e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8004490:	4b36      	ldr	r3, [pc, #216]	; (800456c <MX_ADC1_Init+0x130>)
 8004492:	2220      	movs	r2, #32
 8004494:	2101      	movs	r1, #1
 8004496:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004498:	4b34      	ldr	r3, [pc, #208]	; (800456c <MX_ADC1_Init+0x130>)
 800449a:	2200      	movs	r2, #0
 800449c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800449e:	4b33      	ldr	r3, [pc, #204]	; (800456c <MX_ADC1_Init+0x130>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80044a4:	4b31      	ldr	r3, [pc, #196]	; (800456c <MX_ADC1_Init+0x130>)
 80044a6:	222c      	movs	r2, #44	; 0x2c
 80044a8:	2100      	movs	r1, #0
 80044aa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80044ac:	4b2f      	ldr	r3, [pc, #188]	; (800456c <MX_ADC1_Init+0x130>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80044b2:	4b2e      	ldr	r3, [pc, #184]	; (800456c <MX_ADC1_Init+0x130>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80044b8:	4b2c      	ldr	r3, [pc, #176]	; (800456c <MX_ADC1_Init+0x130>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80044be:	4b2b      	ldr	r3, [pc, #172]	; (800456c <MX_ADC1_Init+0x130>)
 80044c0:	223c      	movs	r2, #60	; 0x3c
 80044c2:	2100      	movs	r1, #0
 80044c4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80044c6:	4b29      	ldr	r3, [pc, #164]	; (800456c <MX_ADC1_Init+0x130>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80044cc:	4b27      	ldr	r3, [pc, #156]	; (800456c <MX_ADC1_Init+0x130>)
 80044ce:	0018      	movs	r0, r3
 80044d0:	f000 fd16 	bl	8004f00 <HAL_ADC_Init>
 80044d4:	1e03      	subs	r3, r0, #0
 80044d6:	d001      	beq.n	80044dc <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80044d8:	f000 f8fc 	bl	80046d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	4a25      	ldr	r2, [pc, #148]	; (8004574 <MX_ADC1_Init+0x138>)
 80044e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80044e2:	1d3b      	adds	r3, r7, #4
 80044e4:	2200      	movs	r2, #0
 80044e6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80044e8:	1d3b      	adds	r3, r7, #4
 80044ea:	2200      	movs	r2, #0
 80044ec:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044ee:	1d3a      	adds	r2, r7, #4
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <MX_ADC1_Init+0x130>)
 80044f2:	0011      	movs	r1, r2
 80044f4:	0018      	movs	r0, r3
 80044f6:	f000 ff99 	bl	800542c <HAL_ADC_ConfigChannel>
 80044fa:	1e03      	subs	r3, r0, #0
 80044fc:	d001      	beq.n	8004502 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80044fe:	f000 f8e9 	bl	80046d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004502:	1d3b      	adds	r3, r7, #4
 8004504:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <MX_ADC1_Init+0x13c>)
 8004506:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004508:	1d3b      	adds	r3, r7, #4
 800450a:	2204      	movs	r2, #4
 800450c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800450e:	1d3a      	adds	r2, r7, #4
 8004510:	4b16      	ldr	r3, [pc, #88]	; (800456c <MX_ADC1_Init+0x130>)
 8004512:	0011      	movs	r1, r2
 8004514:	0018      	movs	r0, r3
 8004516:	f000 ff89 	bl	800542c <HAL_ADC_ConfigChannel>
 800451a:	1e03      	subs	r3, r0, #0
 800451c:	d001      	beq.n	8004522 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800451e:	f000 f8d9 	bl	80046d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004522:	1d3b      	adds	r3, r7, #4
 8004524:	4a15      	ldr	r2, [pc, #84]	; (800457c <MX_ADC1_Init+0x140>)
 8004526:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004528:	1d3b      	adds	r3, r7, #4
 800452a:	2208      	movs	r2, #8
 800452c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800452e:	1d3a      	adds	r2, r7, #4
 8004530:	4b0e      	ldr	r3, [pc, #56]	; (800456c <MX_ADC1_Init+0x130>)
 8004532:	0011      	movs	r1, r2
 8004534:	0018      	movs	r0, r3
 8004536:	f000 ff79 	bl	800542c <HAL_ADC_ConfigChannel>
 800453a:	1e03      	subs	r3, r0, #0
 800453c:	d001      	beq.n	8004542 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800453e:	f000 f8c9 	bl	80046d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004542:	1d3b      	adds	r3, r7, #4
 8004544:	4a0e      	ldr	r2, [pc, #56]	; (8004580 <MX_ADC1_Init+0x144>)
 8004546:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004548:	1d3b      	adds	r3, r7, #4
 800454a:	220c      	movs	r2, #12
 800454c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800454e:	1d3a      	adds	r2, r7, #4
 8004550:	4b06      	ldr	r3, [pc, #24]	; (800456c <MX_ADC1_Init+0x130>)
 8004552:	0011      	movs	r1, r2
 8004554:	0018      	movs	r0, r3
 8004556:	f000 ff69 	bl	800542c <HAL_ADC_ConfigChannel>
 800455a:	1e03      	subs	r3, r0, #0
 800455c:	d001      	beq.n	8004562 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800455e:	f000 f8b9 	bl	80046d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	46bd      	mov	sp, r7
 8004566:	b004      	add	sp, #16
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	200000c8 	.word	0x200000c8
 8004570:	40012400 	.word	0x40012400
 8004574:	18000040 	.word	0x18000040
 8004578:	1c000080 	.word	0x1c000080
 800457c:	20000100 	.word	0x20000100
 8004580:	24000200 	.word	0x24000200

08004584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004588:	4b23      	ldr	r3, [pc, #140]	; (8004618 <MX_USART2_UART_Init+0x94>)
 800458a:	4a24      	ldr	r2, [pc, #144]	; (800461c <MX_USART2_UART_Init+0x98>)
 800458c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800458e:	4b22      	ldr	r3, [pc, #136]	; (8004618 <MX_USART2_UART_Init+0x94>)
 8004590:	22e1      	movs	r2, #225	; 0xe1
 8004592:	0312      	lsls	r2, r2, #12
 8004594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004596:	4b20      	ldr	r3, [pc, #128]	; (8004618 <MX_USART2_UART_Init+0x94>)
 8004598:	2200      	movs	r2, #0
 800459a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800459c:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <MX_USART2_UART_Init+0x94>)
 800459e:	2200      	movs	r2, #0
 80045a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80045a2:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <MX_USART2_UART_Init+0x94>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045a8:	4b1b      	ldr	r3, [pc, #108]	; (8004618 <MX_USART2_UART_Init+0x94>)
 80045aa:	220c      	movs	r2, #12
 80045ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045ae:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <MX_USART2_UART_Init+0x94>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045b4:	4b18      	ldr	r3, [pc, #96]	; (8004618 <MX_USART2_UART_Init+0x94>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045ba:	4b17      	ldr	r3, [pc, #92]	; (8004618 <MX_USART2_UART_Init+0x94>)
 80045bc:	2200      	movs	r2, #0
 80045be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80045c0:	4b15      	ldr	r3, [pc, #84]	; (8004618 <MX_USART2_UART_Init+0x94>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <MX_USART2_UART_Init+0x94>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045cc:	4b12      	ldr	r3, [pc, #72]	; (8004618 <MX_USART2_UART_Init+0x94>)
 80045ce:	0018      	movs	r0, r3
 80045d0:	f002 fd4c 	bl	800706c <HAL_UART_Init>
 80045d4:	1e03      	subs	r3, r0, #0
 80045d6:	d001      	beq.n	80045dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80045d8:	f000 f87c 	bl	80046d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045dc:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <MX_USART2_UART_Init+0x94>)
 80045de:	2100      	movs	r1, #0
 80045e0:	0018      	movs	r0, r3
 80045e2:	f003 fc01 	bl	8007de8 <HAL_UARTEx_SetTxFifoThreshold>
 80045e6:	1e03      	subs	r3, r0, #0
 80045e8:	d001      	beq.n	80045ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80045ea:	f000 f873 	bl	80046d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <MX_USART2_UART_Init+0x94>)
 80045f0:	2100      	movs	r1, #0
 80045f2:	0018      	movs	r0, r3
 80045f4:	f003 fc38 	bl	8007e68 <HAL_UARTEx_SetRxFifoThreshold>
 80045f8:	1e03      	subs	r3, r0, #0
 80045fa:	d001      	beq.n	8004600 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80045fc:	f000 f86a 	bl	80046d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <MX_USART2_UART_Init+0x94>)
 8004602:	0018      	movs	r0, r3
 8004604:	f003 fbb6 	bl	8007d74 <HAL_UARTEx_DisableFifoMode>
 8004608:	1e03      	subs	r3, r0, #0
 800460a:	d001      	beq.n	8004610 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800460c:	f000 f862 	bl	80046d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004610:	46c0      	nop			; (mov r8, r8)
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	2000012c 	.word	0x2000012c
 800461c:	40004400 	.word	0x40004400

08004620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b089      	sub	sp, #36	; 0x24
 8004624:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004626:	240c      	movs	r4, #12
 8004628:	193b      	adds	r3, r7, r4
 800462a:	0018      	movs	r0, r3
 800462c:	2314      	movs	r3, #20
 800462e:	001a      	movs	r2, r3
 8004630:	2100      	movs	r1, #0
 8004632:	f003 fcdd 	bl	8007ff0 <memset>
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004636:	4b25      	ldr	r3, [pc, #148]	; (80046cc <MX_GPIO_Init+0xac>)
 8004638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800463a:	4b24      	ldr	r3, [pc, #144]	; (80046cc <MX_GPIO_Init+0xac>)
 800463c:	2120      	movs	r1, #32
 800463e:	430a      	orrs	r2, r1
 8004640:	635a      	str	r2, [r3, #52]	; 0x34
 8004642:	4b22      	ldr	r3, [pc, #136]	; (80046cc <MX_GPIO_Init+0xac>)
 8004644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004646:	2220      	movs	r2, #32
 8004648:	4013      	ands	r3, r2
 800464a:	60bb      	str	r3, [r7, #8]
 800464c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800464e:	4b1f      	ldr	r3, [pc, #124]	; (80046cc <MX_GPIO_Init+0xac>)
 8004650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004652:	4b1e      	ldr	r3, [pc, #120]	; (80046cc <MX_GPIO_Init+0xac>)
 8004654:	2101      	movs	r1, #1
 8004656:	430a      	orrs	r2, r1
 8004658:	635a      	str	r2, [r3, #52]	; 0x34
 800465a:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <MX_GPIO_Init+0xac>)
 800465c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465e:	2201      	movs	r2, #1
 8004660:	4013      	ands	r3, r2
 8004662:	607b      	str	r3, [r7, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004666:	4b19      	ldr	r3, [pc, #100]	; (80046cc <MX_GPIO_Init+0xac>)
 8004668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800466a:	4b18      	ldr	r3, [pc, #96]	; (80046cc <MX_GPIO_Init+0xac>)
 800466c:	2102      	movs	r1, #2
 800466e:	430a      	orrs	r2, r1
 8004670:	635a      	str	r2, [r3, #52]	; 0x34
 8004672:	4b16      	ldr	r3, [pc, #88]	; (80046cc <MX_GPIO_Init+0xac>)
 8004674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004676:	2202      	movs	r2, #2
 8004678:	4013      	ands	r3, r2
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800467e:	193b      	adds	r3, r7, r4
 8004680:	22c0      	movs	r2, #192	; 0xc0
 8004682:	0212      	lsls	r2, r2, #8
 8004684:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004686:	193b      	adds	r3, r7, r4
 8004688:	2200      	movs	r2, #0
 800468a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800468c:	193b      	adds	r3, r7, r4
 800468e:	2202      	movs	r2, #2
 8004690:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004692:	193b      	adds	r3, r7, r4
 8004694:	4a0e      	ldr	r2, [pc, #56]	; (80046d0 <MX_GPIO_Init+0xb0>)
 8004696:	0019      	movs	r1, r3
 8004698:	0010      	movs	r0, r2
 800469a:	f001 fbcb 	bl	8005e34 <HAL_GPIO_Init>
  /*Configure GPIO pins : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800469e:	0021      	movs	r1, r4
 80046a0:	187b      	adds	r3, r7, r1
 80046a2:	2280      	movs	r2, #128	; 0x80
 80046a4:	0052      	lsls	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	2200      	movs	r2, #0
 80046ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80046ae:	187b      	adds	r3, r7, r1
 80046b0:	2202      	movs	r2, #2
 80046b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046b4:	187a      	adds	r2, r7, r1
 80046b6:	23a0      	movs	r3, #160	; 0xa0
 80046b8:	05db      	lsls	r3, r3, #23
 80046ba:	0011      	movs	r1, r2
 80046bc:	0018      	movs	r0, r3
 80046be:	f001 fbb9 	bl	8005e34 <HAL_GPIO_Init>


}
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	46bd      	mov	sp, r7
 80046c6:	b009      	add	sp, #36	; 0x24
 80046c8:	bd90      	pop	{r4, r7, pc}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	40021000 	.word	0x40021000
 80046d0:	50000400 	.word	0x50000400

080046d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046d8:	b672      	cpsid	i
}
 80046da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046dc:	e7fe      	b.n	80046dc <Error_Handler+0x8>
	...

080046e0 <P>:
	 return out_PI;

}

float P(float error , float KP)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]

	 float out_P;
	 out_P = KP*error ;
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	6838      	ldr	r0, [r7, #0]
 80046ee:	f7fc fb61 	bl	8000db4 <__aeabi_fmul>
 80046f2:	1c03      	adds	r3, r0, #0
 80046f4:	60fb      	str	r3, [r7, #12]
	 if(out_P > pi/2)   // Max speed = pi/2 (rad/s)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f7fe f8b8 	bl	800286c <__aeabi_f2d>
 80046fc:	4a16      	ldr	r2, [pc, #88]	; (8004758 <P+0x78>)
 80046fe:	4b17      	ldr	r3, [pc, #92]	; (800475c <P+0x7c>)
 8004700:	f7fb fea0 	bl	8000444 <__aeabi_dcmpgt>
 8004704:	1e03      	subs	r3, r0, #0
 8004706:	d002      	beq.n	800470e <P+0x2e>
		 out_P = pi/2;
 8004708:	4b15      	ldr	r3, [pc, #84]	; (8004760 <P+0x80>)
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e00a      	b.n	8004724 <P+0x44>
	 else if(out_P < -pi/2)
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f7fe f8ac 	bl	800286c <__aeabi_f2d>
 8004714:	4a10      	ldr	r2, [pc, #64]	; (8004758 <P+0x78>)
 8004716:	4b13      	ldr	r3, [pc, #76]	; (8004764 <P+0x84>)
 8004718:	f7fb fe80 	bl	800041c <__aeabi_dcmplt>
 800471c:	1e03      	subs	r3, r0, #0
 800471e:	d001      	beq.n	8004724 <P+0x44>
		 out_P = -pi/2;
 8004720:	4b11      	ldr	r3, [pc, #68]	; (8004768 <P+0x88>)
 8004722:	60fb      	str	r3, [r7, #12]

	 if(error < 0.05 && error > -0.05)
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fe f8a1 	bl	800286c <__aeabi_f2d>
 800472a:	4a10      	ldr	r2, [pc, #64]	; (800476c <P+0x8c>)
 800472c:	4b10      	ldr	r3, [pc, #64]	; (8004770 <P+0x90>)
 800472e:	f7fb fe75 	bl	800041c <__aeabi_dcmplt>
 8004732:	1e03      	subs	r3, r0, #0
 8004734:	d00a      	beq.n	800474c <P+0x6c>
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fe f898 	bl	800286c <__aeabi_f2d>
 800473c:	4a0b      	ldr	r2, [pc, #44]	; (800476c <P+0x8c>)
 800473e:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <P+0x94>)
 8004740:	f7fb fe80 	bl	8000444 <__aeabi_dcmpgt>
 8004744:	1e03      	subs	r3, r0, #0
 8004746:	d001      	beq.n	800474c <P+0x6c>
		 out_P = 0.0;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]


	 return out_P;
 800474c:	68fb      	ldr	r3, [r7, #12]
}
 800474e:	1c18      	adds	r0, r3, #0
 8004750:	46bd      	mov	sp, r7
 8004752:	b004      	add	sp, #16
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	51eb851f 	.word	0x51eb851f
 800475c:	3ff91eb8 	.word	0x3ff91eb8
 8004760:	3fc8f5c3 	.word	0x3fc8f5c3
 8004764:	bff91eb8 	.word	0xbff91eb8
 8004768:	bfc8f5c3 	.word	0xbfc8f5c3
 800476c:	9999999a 	.word	0x9999999a
 8004770:	3fa99999 	.word	0x3fa99999
 8004774:	bfa99999 	.word	0xbfa99999

08004778 <PI>:


float PI(float error, float KP, float KI, float Ts)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
	 float probortional, integral, out_PI ;

//	 if(x == 5)//////////////////////////
//		 sum = 0;
//	 sum += error;
	 integral = KI*(error+error_previous)*Ts;
 8004786:	4b24      	ldr	r3, [pc, #144]	; (8004818 <PI+0xa0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68f9      	ldr	r1, [r7, #12]
 800478c:	1c18      	adds	r0, r3, #0
 800478e:	f7fb ffab 	bl	80006e8 <__aeabi_fadd>
 8004792:	1c03      	adds	r3, r0, #0
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	1c18      	adds	r0, r3, #0
 8004798:	f7fc fb0c 	bl	8000db4 <__aeabi_fmul>
 800479c:	1c03      	adds	r3, r0, #0
 800479e:	1c19      	adds	r1, r3, #0
 80047a0:	6838      	ldr	r0, [r7, #0]
 80047a2:	f7fc fb07 	bl	8000db4 <__aeabi_fmul>
 80047a6:	1c03      	adds	r3, r0, #0
 80047a8:	61fb      	str	r3, [r7, #28]
	 if(integral > 5.0)
 80047aa:	491c      	ldr	r1, [pc, #112]	; (800481c <PI+0xa4>)
 80047ac:	69f8      	ldr	r0, [r7, #28]
 80047ae:	f7fb fe83 	bl	80004b8 <__aeabi_fcmpgt>
 80047b2:	1e03      	subs	r3, r0, #0
 80047b4:	d002      	beq.n	80047bc <PI+0x44>
		 integral = 5.0;
 80047b6:	4b19      	ldr	r3, [pc, #100]	; (800481c <PI+0xa4>)
 80047b8:	61fb      	str	r3, [r7, #28]
 80047ba:	e007      	b.n	80047cc <PI+0x54>
	 else if(integral < -5.0)
 80047bc:	4918      	ldr	r1, [pc, #96]	; (8004820 <PI+0xa8>)
 80047be:	69f8      	ldr	r0, [r7, #28]
 80047c0:	f7fb fe66 	bl	8000490 <__aeabi_fcmplt>
 80047c4:	1e03      	subs	r3, r0, #0
 80047c6:	d001      	beq.n	80047cc <PI+0x54>
		 integral = -5.0;
 80047c8:	4b15      	ldr	r3, [pc, #84]	; (8004820 <PI+0xa8>)
 80047ca:	61fb      	str	r3, [r7, #28]
	 probortional = KP*error;
 80047cc:	68f9      	ldr	r1, [r7, #12]
 80047ce:	68b8      	ldr	r0, [r7, #8]
 80047d0:	f7fc faf0 	bl	8000db4 <__aeabi_fmul>
 80047d4:	1c03      	adds	r3, r0, #0
 80047d6:	617b      	str	r3, [r7, #20]
	 out_PI = probortional + integral;
 80047d8:	69f9      	ldr	r1, [r7, #28]
 80047da:	6978      	ldr	r0, [r7, #20]
 80047dc:	f7fb ff84 	bl	80006e8 <__aeabi_fadd>
 80047e0:	1c03      	adds	r3, r0, #0
 80047e2:	61bb      	str	r3, [r7, #24]
	 error_previous = error;
 80047e4:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <PI+0xa0>)
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	601a      	str	r2, [r3, #0]
	 if(out_PI > 100.0)
 80047ea:	490e      	ldr	r1, [pc, #56]	; (8004824 <PI+0xac>)
 80047ec:	69b8      	ldr	r0, [r7, #24]
 80047ee:	f7fb fe63 	bl	80004b8 <__aeabi_fcmpgt>
 80047f2:	1e03      	subs	r3, r0, #0
 80047f4:	d002      	beq.n	80047fc <PI+0x84>
		 out_PI = 100.0;
 80047f6:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <PI+0xac>)
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	e007      	b.n	800480c <PI+0x94>
	 else if(out_PI < -100.0)
 80047fc:	490a      	ldr	r1, [pc, #40]	; (8004828 <PI+0xb0>)
 80047fe:	69b8      	ldr	r0, [r7, #24]
 8004800:	f7fb fe46 	bl	8000490 <__aeabi_fcmplt>
 8004804:	1e03      	subs	r3, r0, #0
 8004806:	d001      	beq.n	800480c <PI+0x94>
		 out_PI = -100.0;
 8004808:	4b07      	ldr	r3, [pc, #28]	; (8004828 <PI+0xb0>)
 800480a:	61bb      	str	r3, [r7, #24]

	 return out_PI;
 800480c:	69bb      	ldr	r3, [r7, #24]
}
 800480e:	1c18      	adds	r0, r3, #0
 8004810:	46bd      	mov	sp, r7
 8004812:	b008      	add	sp, #32
 8004814:	bd80      	pop	{r7, pc}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	200001c0 	.word	0x200001c0
 800481c:	40a00000 	.word	0x40a00000
 8004820:	c0a00000 	.word	0xc0a00000
 8004824:	42c80000 	.word	0x42c80000
 8004828:	c2c80000 	.word	0xc2c80000

0800482c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004832:	4b11      	ldr	r3, [pc, #68]	; (8004878 <HAL_MspInit+0x4c>)
 8004834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004836:	4b10      	ldr	r3, [pc, #64]	; (8004878 <HAL_MspInit+0x4c>)
 8004838:	2101      	movs	r1, #1
 800483a:	430a      	orrs	r2, r1
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
 800483e:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <HAL_MspInit+0x4c>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	2201      	movs	r2, #1
 8004844:	4013      	ands	r3, r2
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800484a:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_MspInit+0x4c>)
 800484c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800484e:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <HAL_MspInit+0x4c>)
 8004850:	2180      	movs	r1, #128	; 0x80
 8004852:	0549      	lsls	r1, r1, #21
 8004854:	430a      	orrs	r2, r1
 8004856:	63da      	str	r2, [r3, #60]	; 0x3c
 8004858:	4b07      	ldr	r3, [pc, #28]	; (8004878 <HAL_MspInit+0x4c>)
 800485a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	055b      	lsls	r3, r3, #21
 8004860:	4013      	ands	r3, r2
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8004866:	f000 f9e5 	bl	8004c34 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800486a:	2002      	movs	r0, #2
 800486c:	f000 f9ce 	bl	8004c0c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	b002      	add	sp, #8
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021000 	.word	0x40021000

0800487c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800487c:	b590      	push	{r4, r7, lr}
 800487e:	b09f      	sub	sp, #124	; 0x7c
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004884:	2364      	movs	r3, #100	; 0x64
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	0018      	movs	r0, r3
 800488a:	2314      	movs	r3, #20
 800488c:	001a      	movs	r2, r3
 800488e:	2100      	movs	r1, #0
 8004890:	f003 fbae 	bl	8007ff0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004894:	2418      	movs	r4, #24
 8004896:	193b      	adds	r3, r7, r4
 8004898:	0018      	movs	r0, r3
 800489a:	234c      	movs	r3, #76	; 0x4c
 800489c:	001a      	movs	r2, r3
 800489e:	2100      	movs	r1, #0
 80048a0:	f003 fba6 	bl	8007ff0 <memset>
  if(hadc->Instance==ADC1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a2d      	ldr	r2, [pc, #180]	; (8004960 <HAL_ADC_MspInit+0xe4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d154      	bne.n	8004958 <HAL_ADC_MspInit+0xdc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80048ae:	193b      	adds	r3, r7, r4
 80048b0:	2280      	movs	r2, #128	; 0x80
 80048b2:	01d2      	lsls	r2, r2, #7
 80048b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80048b6:	193b      	adds	r3, r7, r4
 80048b8:	2200      	movs	r2, #0
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048bc:	193b      	adds	r3, r7, r4
 80048be:	0018      	movs	r0, r3
 80048c0:	f002 f998 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 80048c4:	1e03      	subs	r3, r0, #0
 80048c6:	d001      	beq.n	80048cc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80048c8:	f7ff ff04 	bl	80046d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80048cc:	4b25      	ldr	r3, [pc, #148]	; (8004964 <HAL_ADC_MspInit+0xe8>)
 80048ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048d0:	4b24      	ldr	r3, [pc, #144]	; (8004964 <HAL_ADC_MspInit+0xe8>)
 80048d2:	2180      	movs	r1, #128	; 0x80
 80048d4:	0349      	lsls	r1, r1, #13
 80048d6:	430a      	orrs	r2, r1
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40
 80048da:	4b22      	ldr	r3, [pc, #136]	; (8004964 <HAL_ADC_MspInit+0xe8>)
 80048dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	035b      	lsls	r3, r3, #13
 80048e2:	4013      	ands	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e8:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <HAL_ADC_MspInit+0xe8>)
 80048ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ec:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <HAL_ADC_MspInit+0xe8>)
 80048ee:	2101      	movs	r1, #1
 80048f0:	430a      	orrs	r2, r1
 80048f2:	635a      	str	r2, [r3, #52]	; 0x34
 80048f4:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <HAL_ADC_MspInit+0xe8>)
 80048f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f8:	2201      	movs	r2, #1
 80048fa:	4013      	ands	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004900:	4b18      	ldr	r3, [pc, #96]	; (8004964 <HAL_ADC_MspInit+0xe8>)
 8004902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004904:	4b17      	ldr	r3, [pc, #92]	; (8004964 <HAL_ADC_MspInit+0xe8>)
 8004906:	2102      	movs	r1, #2
 8004908:	430a      	orrs	r2, r1
 800490a:	635a      	str	r2, [r3, #52]	; 0x34
 800490c:	4b15      	ldr	r3, [pc, #84]	; (8004964 <HAL_ADC_MspInit+0xe8>)
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	2202      	movs	r2, #2
 8004912:	4013      	ands	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004918:	2464      	movs	r4, #100	; 0x64
 800491a:	193b      	adds	r3, r7, r4
 800491c:	22c0      	movs	r2, #192	; 0xc0
 800491e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004920:	193b      	adds	r3, r7, r4
 8004922:	2203      	movs	r2, #3
 8004924:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004926:	193b      	adds	r3, r7, r4
 8004928:	2200      	movs	r2, #0
 800492a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800492c:	193a      	adds	r2, r7, r4
 800492e:	23a0      	movs	r3, #160	; 0xa0
 8004930:	05db      	lsls	r3, r3, #23
 8004932:	0011      	movs	r1, r2
 8004934:	0018      	movs	r0, r3
 8004936:	f001 fa7d 	bl	8005e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800493a:	193b      	adds	r3, r7, r4
 800493c:	2203      	movs	r2, #3
 800493e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004940:	193b      	adds	r3, r7, r4
 8004942:	2203      	movs	r2, #3
 8004944:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004946:	193b      	adds	r3, r7, r4
 8004948:	2200      	movs	r2, #0
 800494a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800494c:	193b      	adds	r3, r7, r4
 800494e:	4a06      	ldr	r2, [pc, #24]	; (8004968 <HAL_ADC_MspInit+0xec>)
 8004950:	0019      	movs	r1, r3
 8004952:	0010      	movs	r0, r2
 8004954:	f001 fa6e 	bl	8005e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004958:	46c0      	nop			; (mov r8, r8)
 800495a:	46bd      	mov	sp, r7
 800495c:	b01f      	add	sp, #124	; 0x7c
 800495e:	bd90      	pop	{r4, r7, pc}
 8004960:	40012400 	.word	0x40012400
 8004964:	40021000 	.word	0x40021000
 8004968:	50000400 	.word	0x50000400

0800496c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b09d      	sub	sp, #116	; 0x74
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004974:	235c      	movs	r3, #92	; 0x5c
 8004976:	18fb      	adds	r3, r7, r3
 8004978:	0018      	movs	r0, r3
 800497a:	2314      	movs	r3, #20
 800497c:	001a      	movs	r2, r3
 800497e:	2100      	movs	r1, #0
 8004980:	f003 fb36 	bl	8007ff0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004984:	2410      	movs	r4, #16
 8004986:	193b      	adds	r3, r7, r4
 8004988:	0018      	movs	r0, r3
 800498a:	234c      	movs	r3, #76	; 0x4c
 800498c:	001a      	movs	r2, r3
 800498e:	2100      	movs	r1, #0
 8004990:	f003 fb2e 	bl	8007ff0 <memset>
  if(huart->Instance==USART2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a22      	ldr	r2, [pc, #136]	; (8004a24 <HAL_UART_MspInit+0xb8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d13e      	bne.n	8004a1c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800499e:	193b      	adds	r3, r7, r4
 80049a0:	2202      	movs	r2, #2
 80049a2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80049a4:	193b      	adds	r3, r7, r4
 80049a6:	2200      	movs	r2, #0
 80049a8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049aa:	193b      	adds	r3, r7, r4
 80049ac:	0018      	movs	r0, r3
 80049ae:	f002 f921 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 80049b2:	1e03      	subs	r3, r0, #0
 80049b4:	d001      	beq.n	80049ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80049b6:	f7ff fe8d 	bl	80046d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049ba:	4b1b      	ldr	r3, [pc, #108]	; (8004a28 <HAL_UART_MspInit+0xbc>)
 80049bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049be:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <HAL_UART_MspInit+0xbc>)
 80049c0:	2180      	movs	r1, #128	; 0x80
 80049c2:	0289      	lsls	r1, r1, #10
 80049c4:	430a      	orrs	r2, r1
 80049c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80049c8:	4b17      	ldr	r3, [pc, #92]	; (8004a28 <HAL_UART_MspInit+0xbc>)
 80049ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	029b      	lsls	r3, r3, #10
 80049d0:	4013      	ands	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <HAL_UART_MspInit+0xbc>)
 80049d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049da:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <HAL_UART_MspInit+0xbc>)
 80049dc:	2101      	movs	r1, #1
 80049de:	430a      	orrs	r2, r1
 80049e0:	635a      	str	r2, [r3, #52]	; 0x34
 80049e2:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <HAL_UART_MspInit+0xbc>)
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	2201      	movs	r2, #1
 80049e8:	4013      	ands	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]
 80049ec:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80049ee:	215c      	movs	r1, #92	; 0x5c
 80049f0:	187b      	adds	r3, r7, r1
 80049f2:	220c      	movs	r2, #12
 80049f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f6:	187b      	adds	r3, r7, r1
 80049f8:	2202      	movs	r2, #2
 80049fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fc:	187b      	adds	r3, r7, r1
 80049fe:	2200      	movs	r2, #0
 8004a00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a02:	187b      	adds	r3, r7, r1
 8004a04:	2200      	movs	r2, #0
 8004a06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004a08:	187b      	adds	r3, r7, r1
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a0e:	187a      	adds	r2, r7, r1
 8004a10:	23a0      	movs	r3, #160	; 0xa0
 8004a12:	05db      	lsls	r3, r3, #23
 8004a14:	0011      	movs	r1, r2
 8004a16:	0018      	movs	r0, r3
 8004a18:	f001 fa0c 	bl	8005e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004a1c:	46c0      	nop			; (mov r8, r8)
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b01d      	add	sp, #116	; 0x74
 8004a22:	bd90      	pop	{r4, r7, pc}
 8004a24:	40004400 	.word	0x40004400
 8004a28:	40021000 	.word	0x40021000

08004a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a30:	e7fe      	b.n	8004a30 <NMI_Handler+0x4>

08004a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a36:	e7fe      	b.n	8004a36 <HardFault_Handler+0x4>

08004a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004a3c:	46c0      	nop			; (mov r8, r8)
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a50:	f000 f89c 	bl	8004b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004a64:	480d      	ldr	r0, [pc, #52]	; (8004a9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004a66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004a68:	f7ff fff7 	bl	8004a5a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a6c:	480c      	ldr	r0, [pc, #48]	; (8004aa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8004a6e:	490d      	ldr	r1, [pc, #52]	; (8004aa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a70:	4a0d      	ldr	r2, [pc, #52]	; (8004aa8 <LoopForever+0xe>)
  movs r3, #0
 8004a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a74:	e002      	b.n	8004a7c <LoopCopyDataInit>

08004a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a7a:	3304      	adds	r3, #4

08004a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a80:	d3f9      	bcc.n	8004a76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a82:	4a0a      	ldr	r2, [pc, #40]	; (8004aac <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a84:	4c0a      	ldr	r4, [pc, #40]	; (8004ab0 <LoopForever+0x16>)
  movs r3, #0
 8004a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a88:	e001      	b.n	8004a8e <LoopFillZerobss>

08004a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a8c:	3204      	adds	r2, #4

08004a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a90:	d3fb      	bcc.n	8004a8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004a92:	f003 fa89 	bl	8007fa8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004a96:	f7ff f991 	bl	8003dbc <main>

08004a9a <LoopForever>:

LoopForever:
  b LoopForever
 8004a9a:	e7fe      	b.n	8004a9a <LoopForever>
  ldr   r0, =_estack
 8004a9c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004aa4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8004aa8:	080081f0 	.word	0x080081f0
  ldr r2, =_sbss
 8004aac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8004ab0:	200001c8 	.word	0x200001c8

08004ab4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ab4:	e7fe      	b.n	8004ab4 <ADC1_COMP_IRQHandler>
	...

08004ab8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004abe:	1dfb      	adds	r3, r7, #7
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <HAL_Init+0x3c>)
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <HAL_Init+0x3c>)
 8004aca:	2180      	movs	r1, #128	; 0x80
 8004acc:	0049      	lsls	r1, r1, #1
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ad2:	2003      	movs	r0, #3
 8004ad4:	f000 f810 	bl	8004af8 <HAL_InitTick>
 8004ad8:	1e03      	subs	r3, r0, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004adc:	1dfb      	adds	r3, r7, #7
 8004ade:	2201      	movs	r2, #1
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	e001      	b.n	8004ae8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004ae4:	f7ff fea2 	bl	800482c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004ae8:	1dfb      	adds	r3, r7, #7
 8004aea:	781b      	ldrb	r3, [r3, #0]
}
 8004aec:	0018      	movs	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b002      	add	sp, #8
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40022000 	.word	0x40022000

08004af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004af8:	b590      	push	{r4, r7, lr}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004b00:	230f      	movs	r3, #15
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004b08:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <HAL_InitTick+0x88>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d02b      	beq.n	8004b68 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004b10:	4b1c      	ldr	r3, [pc, #112]	; (8004b84 <HAL_InitTick+0x8c>)
 8004b12:	681c      	ldr	r4, [r3, #0]
 8004b14:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <HAL_InitTick+0x88>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	0019      	movs	r1, r3
 8004b1a:	23fa      	movs	r3, #250	; 0xfa
 8004b1c:	0098      	lsls	r0, r3, #2
 8004b1e:	f7fb faf1 	bl	8000104 <__udivsi3>
 8004b22:	0003      	movs	r3, r0
 8004b24:	0019      	movs	r1, r3
 8004b26:	0020      	movs	r0, r4
 8004b28:	f7fb faec 	bl	8000104 <__udivsi3>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f001 f973 	bl	8005e1a <HAL_SYSTICK_Config>
 8004b34:	1e03      	subs	r3, r0, #0
 8004b36:	d112      	bne.n	8004b5e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d80a      	bhi.n	8004b54 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	2301      	movs	r3, #1
 8004b42:	425b      	negs	r3, r3
 8004b44:	2200      	movs	r2, #0
 8004b46:	0018      	movs	r0, r3
 8004b48:	f001 f952 	bl	8005df0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <HAL_InitTick+0x90>)
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e00d      	b.n	8004b70 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004b54:	230f      	movs	r3, #15
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	2201      	movs	r2, #1
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	e008      	b.n	8004b70 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004b5e:	230f      	movs	r3, #15
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	2201      	movs	r2, #1
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	e003      	b.n	8004b70 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b68:	230f      	movs	r3, #15
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004b70:	230f      	movs	r3, #15
 8004b72:	18fb      	adds	r3, r7, r3
 8004b74:	781b      	ldrb	r3, [r3, #0]
}
 8004b76:	0018      	movs	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b005      	add	sp, #20
 8004b7c:	bd90      	pop	{r4, r7, pc}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	2000000c 	.word	0x2000000c
 8004b84:	20000004 	.word	0x20000004
 8004b88:	20000008 	.word	0x20000008

08004b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_IncTick+0x1c>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	001a      	movs	r2, r3
 8004b96:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_IncTick+0x20>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	18d2      	adds	r2, r2, r3
 8004b9c:	4b03      	ldr	r3, [pc, #12]	; (8004bac <HAL_IncTick+0x20>)
 8004b9e:	601a      	str	r2, [r3, #0]
}
 8004ba0:	46c0      	nop			; (mov r8, r8)
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	2000000c 	.word	0x2000000c
 8004bac:	200001c4 	.word	0x200001c4

08004bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8004bb4:	4b02      	ldr	r3, [pc, #8]	; (8004bc0 <HAL_GetTick+0x10>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
}
 8004bb8:	0018      	movs	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	200001c4 	.word	0x200001c4

08004bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bcc:	f7ff fff0 	bl	8004bb0 <HAL_GetTick>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	d005      	beq.n	8004bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bde:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <HAL_Delay+0x44>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	001a      	movs	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	189b      	adds	r3, r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
  }


  while ((HAL_GetTick() - tickstart) < wait)
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	f7ff ffe0 	bl	8004bb0 <HAL_GetTick>
 8004bf0:	0002      	movs	r2, r0
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d8f7      	bhi.n	8004bec <HAL_Delay+0x28>
  {
  }
}
 8004bfc:	46c0      	nop			; (mov r8, r8)
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b004      	add	sp, #16
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	2000000c 	.word	0x2000000c

08004c0c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8004c14:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	4393      	bics	r3, r2
 8004c1c:	0019      	movs	r1, r3
 8004c1e:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	601a      	str	r2, [r3, #0]
}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	b002      	add	sp, #8
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	40010030 	.word	0x40010030

08004c34 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8004c38:	4b04      	ldr	r3, [pc, #16]	; (8004c4c <HAL_SYSCFG_DisableVREFBUF+0x18>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	4b03      	ldr	r3, [pc, #12]	; (8004c4c <HAL_SYSCFG_DisableVREFBUF+0x18>)
 8004c3e:	2101      	movs	r1, #1
 8004c40:	438a      	bics	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]
}
 8004c44:	46c0      	nop			; (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	40010030 	.word	0x40010030

08004c50 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a05      	ldr	r2, [pc, #20]	; (8004c74 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004c60:	401a      	ands	r2, r3
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	b002      	add	sp, #8
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	fe3fffff 	.word	0xfe3fffff

08004c78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	23e0      	movs	r3, #224	; 0xe0
 8004c86:	045b      	lsls	r3, r3, #17
 8004c88:	4013      	ands	r3, r2
}
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b002      	add	sp, #8
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b084      	sub	sp, #16
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	2104      	movs	r1, #4
 8004ca6:	400a      	ands	r2, r1
 8004ca8:	2107      	movs	r1, #7
 8004caa:	4091      	lsls	r1, r2
 8004cac:	000a      	movs	r2, r1
 8004cae:	43d2      	mvns	r2, r2
 8004cb0:	401a      	ands	r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2104      	movs	r1, #4
 8004cb6:	400b      	ands	r3, r1
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4099      	lsls	r1, r3
 8004cbc:	000b      	movs	r3, r1
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004cc4:	46c0      	nop			; (mov r8, r8)
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b004      	add	sp, #16
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	2104      	movs	r1, #4
 8004cde:	400a      	ands	r2, r1
 8004ce0:	2107      	movs	r1, #7
 8004ce2:	4091      	lsls	r1, r2
 8004ce4:	000a      	movs	r2, r1
 8004ce6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2104      	movs	r1, #4
 8004cec:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004cee:	40da      	lsrs	r2, r3
 8004cf0:	0013      	movs	r3, r2
}
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b002      	add	sp, #8
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	23c0      	movs	r3, #192	; 0xc0
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d101      	bne.n	8004d12 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	0018      	movs	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b002      	add	sp, #8
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	211f      	movs	r1, #31
 8004d30:	400a      	ands	r2, r1
 8004d32:	210f      	movs	r1, #15
 8004d34:	4091      	lsls	r1, r2
 8004d36:	000a      	movs	r2, r1
 8004d38:	43d2      	mvns	r2, r2
 8004d3a:	401a      	ands	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	0e9b      	lsrs	r3, r3, #26
 8004d40:	210f      	movs	r1, #15
 8004d42:	4019      	ands	r1, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	201f      	movs	r0, #31
 8004d48:	4003      	ands	r3, r0
 8004d4a:	4099      	lsls	r1, r3
 8004d4c:	000b      	movs	r3, r1
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004d54:	46c0      	nop			; (mov r8, r8)
 8004d56:	46bd      	mov	sp, r7
 8004d58:	b004      	add	sp, #16
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	035b      	lsls	r3, r3, #13
 8004d6e:	0b5b      	lsrs	r3, r3, #13
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b002      	add	sp, #8
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	0352      	lsls	r2, r2, #13
 8004d90:	0b52      	lsrs	r2, r2, #13
 8004d92:	43d2      	mvns	r2, r2
 8004d94:	401a      	ands	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	b002      	add	sp, #8
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	0212      	lsls	r2, r2, #8
 8004db8:	43d2      	mvns	r2, r2
 8004dba:	401a      	ands	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	021b      	lsls	r3, r3, #8
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	400b      	ands	r3, r1
 8004dc4:	4904      	ldr	r1, [pc, #16]	; (8004dd8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8004dc6:	400b      	ands	r3, r1
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b004      	add	sp, #16
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	07ffff00 	.word	0x07ffff00

08004ddc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4a05      	ldr	r2, [pc, #20]	; (8004e00 <LL_ADC_EnableInternalRegulator+0x24>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	2280      	movs	r2, #128	; 0x80
 8004dee:	0552      	lsls	r2, r2, #21
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b002      	add	sp, #8
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	6fffffe8 	.word	0x6fffffe8

08004e04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	055b      	lsls	r3, r3, #21
 8004e14:	401a      	ands	r2, r3
 8004e16:	2380      	movs	r3, #128	; 0x80
 8004e18:	055b      	lsls	r3, r3, #21
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d101      	bne.n	8004e22 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	0018      	movs	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b002      	add	sp, #8
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <LL_ADC_Enable+0x20>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004e44:	46c0      	nop			; (mov r8, r8)
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	7fffffe8 	.word	0x7fffffe8

08004e50 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4a04      	ldr	r2, [pc, #16]	; (8004e70 <LL_ADC_Disable+0x20>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2202      	movs	r2, #2
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004e68:	46c0      	nop			; (mov r8, r8)
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b002      	add	sp, #8
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	7fffffe8 	.word	0x7fffffe8

08004e74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2201      	movs	r2, #1
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <LL_ADC_IsEnabled+0x18>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e000      	b.n	8004e8e <LL_ADC_IsEnabled+0x1a>
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	0018      	movs	r0, r3
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b002      	add	sp, #8
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d101      	bne.n	8004eae <LL_ADC_IsDisableOngoing+0x18>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <LL_ADC_IsDisableOngoing+0x1a>
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b002      	add	sp, #8
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */

	MODIFY_REG(ADCx->CR,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	4a04      	ldr	r2, [pc, #16]	; (8004ed8 <LL_ADC_REG_StartConversion+0x20>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2204      	movs	r2, #4
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004ed0:	46c0      	nop			; (mov r8, r8)
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b002      	add	sp, #8
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	7fffffe8 	.word	0x7fffffe8

08004edc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d101      	bne.n	8004ef4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b002      	add	sp, #8
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f08:	231f      	movs	r3, #31
 8004f0a:	18fb      	adds	r3, r7, r3
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e17f      	b.n	8005226 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10a      	bne.n	8004f44 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	0018      	movs	r0, r3
 8004f32:	f7ff fca3 	bl	800487c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2254      	movs	r2, #84	; 0x54
 8004f40:	2100      	movs	r1, #0
 8004f42:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f7ff ff5b 	bl	8004e04 <LL_ADC_IsInternalRegulatorEnabled>
 8004f4e:	1e03      	subs	r3, r0, #0
 8004f50:	d115      	bne.n	8004f7e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	0018      	movs	r0, r3
 8004f58:	f7ff ff40 	bl	8004ddc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f5c:	4bb4      	ldr	r3, [pc, #720]	; (8005230 <HAL_ADC_Init+0x330>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	49b4      	ldr	r1, [pc, #720]	; (8005234 <HAL_ADC_Init+0x334>)
 8004f62:	0018      	movs	r0, r3
 8004f64:	f7fb f8ce 	bl	8000104 <__udivsi3>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004f70:	e002      	b.n	8004f78 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f9      	bne.n	8004f72 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	0018      	movs	r0, r3
 8004f84:	f7ff ff3e 	bl	8004e04 <LL_ADC_IsInternalRegulatorEnabled>
 8004f88:	1e03      	subs	r3, r0, #0
 8004f8a:	d10f      	bne.n	8004fac <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f90:	2210      	movs	r2, #16
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004fa4:	231f      	movs	r3, #31
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	2201      	movs	r2, #1
 8004faa:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f7ff ff93 	bl	8004edc <LL_ADC_REG_IsConversionOngoing>
 8004fb6:	0003      	movs	r3, r0
 8004fb8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d000      	beq.n	8004fc6 <HAL_ADC_Init+0xc6>
 8004fc4:	e122      	b.n	800520c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d000      	beq.n	8004fce <HAL_ADC_Init+0xce>
 8004fcc:	e11e      	b.n	800520c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	4a99      	ldr	r2, [pc, #612]	; (8005238 <HAL_ADC_Init+0x338>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f7ff ff46 	bl	8004e74 <LL_ADC_IsEnabled>
 8004fe8:	1e03      	subs	r3, r0, #0
 8004fea:	d000      	beq.n	8004fee <HAL_ADC_Init+0xee>
 8004fec:	e0ad      	b.n	800514a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	7e1b      	ldrb	r3, [r3, #24]
 8004ff6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004ff8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	7e5b      	ldrb	r3, [r3, #25]
 8004ffe:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005000:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	7e9b      	ldrb	r3, [r3, #26]
 8005006:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005008:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <HAL_ADC_Init+0x118>
 8005012:	2380      	movs	r3, #128	; 0x80
 8005014:	015b      	lsls	r3, r3, #5
 8005016:	e000      	b.n	800501a <HAL_ADC_Init+0x11a>
 8005018:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800501a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005020:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	da04      	bge.n	8005034 <HAL_ADC_Init+0x134>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	085b      	lsrs	r3, r3, #1
 8005032:	e001      	b.n	8005038 <HAL_ADC_Init+0x138>
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8005038:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	212c      	movs	r1, #44	; 0x2c
 800503e:	5c5b      	ldrb	r3, [r3, r1]
 8005040:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005042:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4313      	orrs	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	5c9b      	ldrb	r3, [r3, r2]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d115      	bne.n	8005080 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	7e9b      	ldrb	r3, [r3, #26]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d105      	bne.n	8005068 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2280      	movs	r2, #128	; 0x80
 8005060:	0252      	lsls	r2, r2, #9
 8005062:	4313      	orrs	r3, r2
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	e00b      	b.n	8005080 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506c:	2220      	movs	r2, #32
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005078:	2201      	movs	r2, #1
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800508c:	23e0      	movs	r3, #224	; 0xe0
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005096:	4313      	orrs	r3, r2
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	4313      	orrs	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	4a65      	ldr	r2, [pc, #404]	; (800523c <HAL_ADC_Init+0x33c>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	0019      	movs	r1, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	0f9b      	lsrs	r3, r3, #30
 80050ba:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80050c0:	4313      	orrs	r3, r2
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	223c      	movs	r2, #60	; 0x3c
 80050cc:	5c9b      	ldrb	r3, [r3, r2]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d111      	bne.n	80050f6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	0f9b      	lsrs	r3, r3, #30
 80050d8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80050de:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 80050e4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80050ea:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	2201      	movs	r2, #1
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	4a50      	ldr	r2, [pc, #320]	; (8005240 <HAL_ADC_Init+0x340>)
 80050fe:	4013      	ands	r3, r2
 8005100:	0019      	movs	r1, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	430a      	orrs	r2, r1
 800510a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	23c0      	movs	r3, #192	; 0xc0
 8005112:	061b      	lsls	r3, r3, #24
 8005114:	429a      	cmp	r2, r3
 8005116:	d018      	beq.n	800514a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800511c:	2380      	movs	r3, #128	; 0x80
 800511e:	05db      	lsls	r3, r3, #23
 8005120:	429a      	cmp	r2, r3
 8005122:	d012      	beq.n	800514a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	061b      	lsls	r3, r3, #24
 800512c:	429a      	cmp	r2, r3
 800512e:	d00c      	beq.n	800514a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005130:	4b44      	ldr	r3, [pc, #272]	; (8005244 <HAL_ADC_Init+0x344>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a44      	ldr	r2, [pc, #272]	; (8005248 <HAL_ADC_Init+0x348>)
 8005136:	4013      	ands	r3, r2
 8005138:	0019      	movs	r1, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	23f0      	movs	r3, #240	; 0xf0
 8005140:	039b      	lsls	r3, r3, #14
 8005142:	401a      	ands	r2, r3
 8005144:	4b3f      	ldr	r3, [pc, #252]	; (8005244 <HAL_ADC_Init+0x344>)
 8005146:	430a      	orrs	r2, r1
 8005148:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005152:	001a      	movs	r2, r3
 8005154:	2100      	movs	r1, #0
 8005156:	f7ff fd9c 	bl	8004c92 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	493a      	ldr	r1, [pc, #232]	; (800524c <HAL_ADC_Init+0x34c>)
 8005164:	001a      	movs	r2, r3
 8005166:	f7ff fd94 	bl	8004c92 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d109      	bne.n	8005186 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2110      	movs	r1, #16
 800517e:	4249      	negs	r1, r1
 8005180:	430a      	orrs	r2, r1
 8005182:	629a      	str	r2, [r3, #40]	; 0x28
 8005184:	e018      	b.n	80051b8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	2380      	movs	r3, #128	; 0x80
 800518c:	039b      	lsls	r3, r3, #14
 800518e:	429a      	cmp	r2, r3
 8005190:	d112      	bne.n	80051b8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	3b01      	subs	r3, #1
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	221c      	movs	r2, #28
 80051a2:	4013      	ands	r3, r2
 80051a4:	2210      	movs	r2, #16
 80051a6:	4252      	negs	r2, r2
 80051a8:	409a      	lsls	r2, r3
 80051aa:	0011      	movs	r1, r2
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2100      	movs	r1, #0
 80051be:	0018      	movs	r0, r3
 80051c0:	f7ff fd84 	bl	8004ccc <LL_ADC_GetSamplingTimeCommonChannels>
 80051c4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d10b      	bne.n	80051e6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d8:	2203      	movs	r2, #3
 80051da:	4393      	bics	r3, r2
 80051dc:	2201      	movs	r2, #1
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80051e4:	e01c      	b.n	8005220 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ea:	2212      	movs	r2, #18
 80051ec:	4393      	bics	r3, r2
 80051ee:	2210      	movs	r2, #16
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fa:	2201      	movs	r2, #1
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005202:	231f      	movs	r3, #31
 8005204:	18fb      	adds	r3, r7, r3
 8005206:	2201      	movs	r2, #1
 8005208:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800520a:	e009      	b.n	8005220 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005210:	2210      	movs	r2, #16
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005218:	231f      	movs	r3, #31
 800521a:	18fb      	adds	r3, r7, r3
 800521c:	2201      	movs	r2, #1
 800521e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005220:	231f      	movs	r3, #31
 8005222:	18fb      	adds	r3, r7, r3
 8005224:	781b      	ldrb	r3, [r3, #0]
}
 8005226:	0018      	movs	r0, r3
 8005228:	46bd      	mov	sp, r7
 800522a:	b008      	add	sp, #32
 800522c:	bd80      	pop	{r7, pc}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	20000004 	.word	0x20000004
 8005234:	00030d40 	.word	0x00030d40
 8005238:	fffffefd 	.word	0xfffffefd
 800523c:	ffde0201 	.word	0xffde0201
 8005240:	1ffffc02 	.word	0x1ffffc02
 8005244:	40012708 	.word	0x40012708
 8005248:	ffc3ffff 	.word	0xffc3ffff
 800524c:	07ffff04 	.word	0x07ffff04

08005250 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005250:	b5b0      	push	{r4, r5, r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	0018      	movs	r0, r3
 800525e:	f7ff fe3d 	bl	8004edc <LL_ADC_REG_IsConversionOngoing>
 8005262:	1e03      	subs	r3, r0, #0
 8005264:	d135      	bne.n	80052d2 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2254      	movs	r2, #84	; 0x54
 800526a:	5c9b      	ldrb	r3, [r3, r2]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_ADC_Start+0x24>
 8005270:	2302      	movs	r3, #2
 8005272:	e035      	b.n	80052e0 <HAL_ADC_Start+0x90>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2254      	movs	r2, #84	; 0x54
 8005278:	2101      	movs	r1, #1
 800527a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800527c:	250f      	movs	r5, #15
 800527e:	197c      	adds	r4, r7, r5
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	0018      	movs	r0, r3
 8005284:	f000 faaa 	bl	80057dc <ADC_Enable>
 8005288:	0003      	movs	r3, r0
 800528a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800528c:	197b      	adds	r3, r7, r5
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d119      	bne.n	80052c8 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005298:	4a13      	ldr	r2, [pc, #76]	; (80052e8 <HAL_ADC_Start+0x98>)
 800529a:	4013      	ands	r3, r2
 800529c:	2280      	movs	r2, #128	; 0x80
 800529e:	0052      	lsls	r2, r2, #1
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	221c      	movs	r2, #28
 80052b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2254      	movs	r2, #84	; 0x54
 80052b8:	2100      	movs	r1, #0
 80052ba:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	0018      	movs	r0, r3
 80052c2:	f7ff fdf9 	bl	8004eb8 <LL_ADC_REG_StartConversion>
 80052c6:	e008      	b.n	80052da <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2254      	movs	r2, #84	; 0x54
 80052cc:	2100      	movs	r1, #0
 80052ce:	5499      	strb	r1, [r3, r2]
 80052d0:	e003      	b.n	80052da <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80052d2:	230f      	movs	r3, #15
 80052d4:	18fb      	adds	r3, r7, r3
 80052d6:	2202      	movs	r2, #2
 80052d8:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80052da:	230f      	movs	r3, #15
 80052dc:	18fb      	adds	r3, r7, r3
 80052de:	781b      	ldrb	r3, [r3, #0]
}
 80052e0:	0018      	movs	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b004      	add	sp, #16
 80052e6:	bdb0      	pop	{r4, r5, r7, pc}
 80052e8:	fffff0fe 	.word	0xfffff0fe

080052ec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d102      	bne.n	8005304 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80052fe:	2308      	movs	r3, #8
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	e00f      	b.n	8005324 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	4013      	ands	r3, r2
 800530e:	d007      	beq.n	8005320 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005314:	2220      	movs	r2, #32
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e072      	b.n	8005406 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8005320:	2304      	movs	r3, #4
 8005322:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005324:	f7ff fc44 	bl	8004bb0 <HAL_GetTick>
 8005328:	0003      	movs	r3, r0
 800532a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800532c:	e01f      	b.n	800536e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	d01c      	beq.n	800536e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005334:	f7ff fc3c 	bl	8004bb0 <HAL_GetTick>
 8005338:	0002      	movs	r2, r0
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d302      	bcc.n	800534a <HAL_ADC_PollForConversion+0x5e>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d111      	bne.n	800536e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4013      	ands	r3, r2
 8005354:	d10b      	bne.n	800536e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535a:	2204      	movs	r2, #4
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2254      	movs	r2, #84	; 0x54
 8005366:	2100      	movs	r1, #0
 8005368:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e04b      	b.n	8005406 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4013      	ands	r3, r2
 8005378:	d0d9      	beq.n	800532e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537e:	2280      	movs	r2, #128	; 0x80
 8005380:	0092      	lsls	r2, r2, #2
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	0018      	movs	r0, r3
 800538e:	f7ff fcb4 	bl	8004cfa <LL_ADC_REG_IsTriggerSourceSWStart>
 8005392:	1e03      	subs	r3, r0, #0
 8005394:	d02e      	beq.n	80053f4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	7e9b      	ldrb	r3, [r3, #26]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d12a      	bne.n	80053f4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2208      	movs	r2, #8
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d123      	bne.n	80053f4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	0018      	movs	r0, r3
 80053b2:	f7ff fd93 	bl	8004edc <LL_ADC_REG_IsConversionOngoing>
 80053b6:	1e03      	subs	r3, r0, #0
 80053b8:	d110      	bne.n	80053dc <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	210c      	movs	r1, #12
 80053c6:	438a      	bics	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ce:	4a10      	ldr	r2, [pc, #64]	; (8005410 <HAL_ADC_PollForConversion+0x124>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	2201      	movs	r2, #1
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	659a      	str	r2, [r3, #88]	; 0x58
 80053da:	e00b      	b.n	80053f4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e0:	2220      	movs	r2, #32
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ec:	2201      	movs	r2, #1
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	7e1b      	ldrb	r3, [r3, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d103      	bne.n	8005404 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	220c      	movs	r2, #12
 8005402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	0018      	movs	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	b004      	add	sp, #16
 800540c:	bd80      	pop	{r7, pc}
 800540e:	46c0      	nop			; (mov r8, r8)
 8005410:	fffffefe 	.word	0xfffffefe

08005414 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005422:	0018      	movs	r0, r3
 8005424:	46bd      	mov	sp, r7
 8005426:	b002      	add	sp, #8
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005436:	2317      	movs	r3, #23
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2254      	movs	r2, #84	; 0x54
 8005446:	5c9b      	ldrb	r3, [r3, r2]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_ADC_ConfigChannel+0x24>
 800544c:	2302      	movs	r3, #2
 800544e:	e1c0      	b.n	80057d2 <HAL_ADC_ConfigChannel+0x3a6>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2254      	movs	r2, #84	; 0x54
 8005454:	2101      	movs	r1, #1
 8005456:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	0018      	movs	r0, r3
 800545e:	f7ff fd3d 	bl	8004edc <LL_ADC_REG_IsConversionOngoing>
 8005462:	1e03      	subs	r3, r0, #0
 8005464:	d000      	beq.n	8005468 <HAL_ADC_ConfigChannel+0x3c>
 8005466:	e1a3      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d100      	bne.n	8005472 <HAL_ADC_ConfigChannel+0x46>
 8005470:	e143      	b.n	80056fa <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691a      	ldr	r2, [r3, #16]
 8005476:	2380      	movs	r3, #128	; 0x80
 8005478:	061b      	lsls	r3, r3, #24
 800547a:	429a      	cmp	r2, r3
 800547c:	d004      	beq.n	8005488 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005482:	4ac1      	ldr	r2, [pc, #772]	; (8005788 <HAL_ADC_ConfigChannel+0x35c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d108      	bne.n	800549a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	0019      	movs	r1, r3
 8005492:	0010      	movs	r0, r2
 8005494:	f7ff fc62 	bl	8004d5c <LL_ADC_REG_SetSequencerChAdd>
 8005498:	e0c9      	b.n	800562e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	211f      	movs	r1, #31
 80054a4:	400b      	ands	r3, r1
 80054a6:	210f      	movs	r1, #15
 80054a8:	4099      	lsls	r1, r3
 80054aa:	000b      	movs	r3, r1
 80054ac:	43db      	mvns	r3, r3
 80054ae:	4013      	ands	r3, r2
 80054b0:	0019      	movs	r1, r3
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	035b      	lsls	r3, r3, #13
 80054b8:	0b5b      	lsrs	r3, r3, #13
 80054ba:	d105      	bne.n	80054c8 <HAL_ADC_ConfigChannel+0x9c>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	0e9b      	lsrs	r3, r3, #26
 80054c2:	221f      	movs	r2, #31
 80054c4:	4013      	ands	r3, r2
 80054c6:	e098      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2201      	movs	r2, #1
 80054ce:	4013      	ands	r3, r2
 80054d0:	d000      	beq.n	80054d4 <HAL_ADC_ConfigChannel+0xa8>
 80054d2:	e091      	b.n	80055f8 <HAL_ADC_ConfigChannel+0x1cc>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2202      	movs	r2, #2
 80054da:	4013      	ands	r3, r2
 80054dc:	d000      	beq.n	80054e0 <HAL_ADC_ConfigChannel+0xb4>
 80054de:	e089      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x1c8>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2204      	movs	r2, #4
 80054e6:	4013      	ands	r3, r2
 80054e8:	d000      	beq.n	80054ec <HAL_ADC_ConfigChannel+0xc0>
 80054ea:	e081      	b.n	80055f0 <HAL_ADC_ConfigChannel+0x1c4>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2208      	movs	r2, #8
 80054f2:	4013      	ands	r3, r2
 80054f4:	d000      	beq.n	80054f8 <HAL_ADC_ConfigChannel+0xcc>
 80054f6:	e079      	b.n	80055ec <HAL_ADC_ConfigChannel+0x1c0>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2210      	movs	r2, #16
 80054fe:	4013      	ands	r3, r2
 8005500:	d000      	beq.n	8005504 <HAL_ADC_ConfigChannel+0xd8>
 8005502:	e071      	b.n	80055e8 <HAL_ADC_ConfigChannel+0x1bc>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2220      	movs	r2, #32
 800550a:	4013      	ands	r3, r2
 800550c:	d000      	beq.n	8005510 <HAL_ADC_ConfigChannel+0xe4>
 800550e:	e069      	b.n	80055e4 <HAL_ADC_ConfigChannel+0x1b8>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2240      	movs	r2, #64	; 0x40
 8005516:	4013      	ands	r3, r2
 8005518:	d000      	beq.n	800551c <HAL_ADC_ConfigChannel+0xf0>
 800551a:	e061      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x1b4>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2280      	movs	r2, #128	; 0x80
 8005522:	4013      	ands	r3, r2
 8005524:	d000      	beq.n	8005528 <HAL_ADC_ConfigChannel+0xfc>
 8005526:	e059      	b.n	80055dc <HAL_ADC_ConfigChannel+0x1b0>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	2380      	movs	r3, #128	; 0x80
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	4013      	ands	r3, r2
 8005532:	d151      	bne.n	80055d8 <HAL_ADC_ConfigChannel+0x1ac>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	2380      	movs	r3, #128	; 0x80
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4013      	ands	r3, r2
 800553e:	d149      	bne.n	80055d4 <HAL_ADC_ConfigChannel+0x1a8>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	4013      	ands	r3, r2
 800554a:	d141      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x1a4>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	2380      	movs	r3, #128	; 0x80
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	4013      	ands	r3, r2
 8005556:	d139      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x1a0>
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	2380      	movs	r3, #128	; 0x80
 800555e:	015b      	lsls	r3, r3, #5
 8005560:	4013      	ands	r3, r2
 8005562:	d131      	bne.n	80055c8 <HAL_ADC_ConfigChannel+0x19c>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	2380      	movs	r3, #128	; 0x80
 800556a:	019b      	lsls	r3, r3, #6
 800556c:	4013      	ands	r3, r2
 800556e:	d129      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x198>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	01db      	lsls	r3, r3, #7
 8005578:	4013      	ands	r3, r2
 800557a:	d121      	bne.n	80055c0 <HAL_ADC_ConfigChannel+0x194>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	2380      	movs	r3, #128	; 0x80
 8005582:	021b      	lsls	r3, r3, #8
 8005584:	4013      	ands	r3, r2
 8005586:	d119      	bne.n	80055bc <HAL_ADC_ConfigChannel+0x190>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	025b      	lsls	r3, r3, #9
 8005590:	4013      	ands	r3, r2
 8005592:	d111      	bne.n	80055b8 <HAL_ADC_ConfigChannel+0x18c>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	2380      	movs	r3, #128	; 0x80
 800559a:	029b      	lsls	r3, r3, #10
 800559c:	4013      	ands	r3, r2
 800559e:	d109      	bne.n	80055b4 <HAL_ADC_ConfigChannel+0x188>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	2380      	movs	r3, #128	; 0x80
 80055a6:	02db      	lsls	r3, r3, #11
 80055a8:	4013      	ands	r3, r2
 80055aa:	d001      	beq.n	80055b0 <HAL_ADC_ConfigChannel+0x184>
 80055ac:	2312      	movs	r3, #18
 80055ae:	e024      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055b0:	2300      	movs	r3, #0
 80055b2:	e022      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055b4:	2311      	movs	r3, #17
 80055b6:	e020      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055b8:	2310      	movs	r3, #16
 80055ba:	e01e      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055bc:	230f      	movs	r3, #15
 80055be:	e01c      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055c0:	230e      	movs	r3, #14
 80055c2:	e01a      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055c4:	230d      	movs	r3, #13
 80055c6:	e018      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055c8:	230c      	movs	r3, #12
 80055ca:	e016      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055cc:	230b      	movs	r3, #11
 80055ce:	e014      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055d0:	230a      	movs	r3, #10
 80055d2:	e012      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055d4:	2309      	movs	r3, #9
 80055d6:	e010      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055d8:	2308      	movs	r3, #8
 80055da:	e00e      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055dc:	2307      	movs	r3, #7
 80055de:	e00c      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055e0:	2306      	movs	r3, #6
 80055e2:	e00a      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055e4:	2305      	movs	r3, #5
 80055e6:	e008      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055e8:	2304      	movs	r3, #4
 80055ea:	e006      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055ec:	2303      	movs	r3, #3
 80055ee:	e004      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e002      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <HAL_ADC_ConfigChannel+0x1ce>
 80055f8:	2300      	movs	r3, #0
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	6852      	ldr	r2, [r2, #4]
 80055fe:	201f      	movs	r0, #31
 8005600:	4002      	ands	r2, r0
 8005602:	4093      	lsls	r3, r2
 8005604:	000a      	movs	r2, r1
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	089b      	lsrs	r3, r3, #2
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	429a      	cmp	r2, r3
 800561a:	d808      	bhi.n	800562e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	6859      	ldr	r1, [r3, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	001a      	movs	r2, r3
 800562a:	f7ff fb77 	bl	8004d1c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6819      	ldr	r1, [r3, #0]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	001a      	movs	r2, r3
 800563c:	f7ff fbb2 	bl	8004da4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	db00      	blt.n	800564a <HAL_ADC_ConfigChannel+0x21e>
 8005648:	e0bc      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800564a:	4b50      	ldr	r3, [pc, #320]	; (800578c <HAL_ADC_ConfigChannel+0x360>)
 800564c:	0018      	movs	r0, r3
 800564e:	f7ff fb13 	bl	8004c78 <LL_ADC_GetCommonPathInternalCh>
 8005652:	0003      	movs	r3, r0
 8005654:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a4d      	ldr	r2, [pc, #308]	; (8005790 <HAL_ADC_ConfigChannel+0x364>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d122      	bne.n	80056a6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	2380      	movs	r3, #128	; 0x80
 8005664:	041b      	lsls	r3, r3, #16
 8005666:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005668:	d11d      	bne.n	80056a6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2280      	movs	r2, #128	; 0x80
 800566e:	0412      	lsls	r2, r2, #16
 8005670:	4313      	orrs	r3, r2
 8005672:	4a46      	ldr	r2, [pc, #280]	; (800578c <HAL_ADC_ConfigChannel+0x360>)
 8005674:	0019      	movs	r1, r3
 8005676:	0010      	movs	r0, r2
 8005678:	f7ff faea 	bl	8004c50 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800567c:	4b45      	ldr	r3, [pc, #276]	; (8005794 <HAL_ADC_ConfigChannel+0x368>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4945      	ldr	r1, [pc, #276]	; (8005798 <HAL_ADC_ConfigChannel+0x36c>)
 8005682:	0018      	movs	r0, r3
 8005684:	f7fa fd3e 	bl	8000104 <__udivsi3>
 8005688:	0003      	movs	r3, r0
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	0013      	movs	r3, r2
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	189b      	adds	r3, r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005696:	e002      	b.n	800569e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3b01      	subs	r3, #1
 800569c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f9      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80056a4:	e08e      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a3c      	ldr	r2, [pc, #240]	; (800579c <HAL_ADC_ConfigChannel+0x370>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d10e      	bne.n	80056ce <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	2380      	movs	r3, #128	; 0x80
 80056b4:	045b      	lsls	r3, r3, #17
 80056b6:	4013      	ands	r3, r2
 80056b8:	d109      	bne.n	80056ce <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2280      	movs	r2, #128	; 0x80
 80056be:	0452      	lsls	r2, r2, #17
 80056c0:	4313      	orrs	r3, r2
 80056c2:	4a32      	ldr	r2, [pc, #200]	; (800578c <HAL_ADC_ConfigChannel+0x360>)
 80056c4:	0019      	movs	r1, r3
 80056c6:	0010      	movs	r0, r2
 80056c8:	f7ff fac2 	bl	8004c50 <LL_ADC_SetCommonPathInternalCh>
 80056cc:	e07a      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a33      	ldr	r2, [pc, #204]	; (80057a0 <HAL_ADC_ConfigChannel+0x374>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d000      	beq.n	80056da <HAL_ADC_ConfigChannel+0x2ae>
 80056d8:	e074      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	03db      	lsls	r3, r3, #15
 80056e0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80056e2:	d000      	beq.n	80056e6 <HAL_ADC_ConfigChannel+0x2ba>
 80056e4:	e06e      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	2280      	movs	r2, #128	; 0x80
 80056ea:	03d2      	lsls	r2, r2, #15
 80056ec:	4313      	orrs	r3, r2
 80056ee:	4a27      	ldr	r2, [pc, #156]	; (800578c <HAL_ADC_ConfigChannel+0x360>)
 80056f0:	0019      	movs	r1, r3
 80056f2:	0010      	movs	r0, r2
 80056f4:	f7ff faac 	bl	8004c50 <LL_ADC_SetCommonPathInternalCh>
 80056f8:	e064      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	2380      	movs	r3, #128	; 0x80
 8005700:	061b      	lsls	r3, r3, #24
 8005702:	429a      	cmp	r2, r3
 8005704:	d004      	beq.n	8005710 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800570a:	4a1f      	ldr	r2, [pc, #124]	; (8005788 <HAL_ADC_ConfigChannel+0x35c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d107      	bne.n	8005720 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	0019      	movs	r1, r3
 800571a:	0010      	movs	r0, r2
 800571c:	f7ff fb2f 	bl	8004d7e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	da4d      	bge.n	80057c4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005728:	4b18      	ldr	r3, [pc, #96]	; (800578c <HAL_ADC_ConfigChannel+0x360>)
 800572a:	0018      	movs	r0, r3
 800572c:	f7ff faa4 	bl	8004c78 <LL_ADC_GetCommonPathInternalCh>
 8005730:	0003      	movs	r3, r0
 8005732:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a15      	ldr	r2, [pc, #84]	; (8005790 <HAL_ADC_ConfigChannel+0x364>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d108      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <HAL_ADC_ConfigChannel+0x378>)
 8005742:	4013      	ands	r3, r2
 8005744:	4a11      	ldr	r2, [pc, #68]	; (800578c <HAL_ADC_ConfigChannel+0x360>)
 8005746:	0019      	movs	r1, r3
 8005748:	0010      	movs	r0, r2
 800574a:	f7ff fa81 	bl	8004c50 <LL_ADC_SetCommonPathInternalCh>
 800574e:	e039      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a11      	ldr	r2, [pc, #68]	; (800579c <HAL_ADC_ConfigChannel+0x370>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d108      	bne.n	800576c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4a12      	ldr	r2, [pc, #72]	; (80057a8 <HAL_ADC_ConfigChannel+0x37c>)
 800575e:	4013      	ands	r3, r2
 8005760:	4a0a      	ldr	r2, [pc, #40]	; (800578c <HAL_ADC_ConfigChannel+0x360>)
 8005762:	0019      	movs	r1, r3
 8005764:	0010      	movs	r0, r2
 8005766:	f7ff fa73 	bl	8004c50 <LL_ADC_SetCommonPathInternalCh>
 800576a:	e02b      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a0b      	ldr	r2, [pc, #44]	; (80057a0 <HAL_ADC_ConfigChannel+0x374>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d126      	bne.n	80057c4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	4a0c      	ldr	r2, [pc, #48]	; (80057ac <HAL_ADC_ConfigChannel+0x380>)
 800577a:	4013      	ands	r3, r2
 800577c:	4a03      	ldr	r2, [pc, #12]	; (800578c <HAL_ADC_ConfigChannel+0x360>)
 800577e:	0019      	movs	r1, r3
 8005780:	0010      	movs	r0, r2
 8005782:	f7ff fa65 	bl	8004c50 <LL_ADC_SetCommonPathInternalCh>
 8005786:	e01d      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x398>
 8005788:	80000004 	.word	0x80000004
 800578c:	40012708 	.word	0x40012708
 8005790:	b0001000 	.word	0xb0001000
 8005794:	20000004 	.word	0x20000004
 8005798:	00030d40 	.word	0x00030d40
 800579c:	b8004000 	.word	0xb8004000
 80057a0:	b4002000 	.word	0xb4002000
 80057a4:	ff7fffff 	.word	0xff7fffff
 80057a8:	feffffff 	.word	0xfeffffff
 80057ac:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b4:	2220      	movs	r2, #32
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80057bc:	2317      	movs	r3, #23
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	2201      	movs	r2, #1
 80057c2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2254      	movs	r2, #84	; 0x54
 80057c8:	2100      	movs	r1, #0
 80057ca:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80057cc:	2317      	movs	r3, #23
 80057ce:	18fb      	adds	r3, r7, r3
 80057d0:	781b      	ldrb	r3, [r3, #0]
}
 80057d2:	0018      	movs	r0, r3
 80057d4:	46bd      	mov	sp, r7
 80057d6:	b006      	add	sp, #24
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	46c0      	nop			; (mov r8, r8)

080057dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	0018      	movs	r0, r3
 80057ee:	f7ff fb41 	bl	8004e74 <LL_ADC_IsEnabled>
 80057f2:	1e03      	subs	r3, r0, #0
 80057f4:	d000      	beq.n	80057f8 <ADC_Enable+0x1c>
 80057f6:	e069      	b.n	80058cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	4a36      	ldr	r2, [pc, #216]	; (80058d8 <ADC_Enable+0xfc>)
 8005800:	4013      	ands	r3, r2
 8005802:	d00d      	beq.n	8005820 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005808:	2210      	movs	r2, #16
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005814:	2201      	movs	r2, #1
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e056      	b.n	80058ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	0018      	movs	r0, r3
 8005826:	f7ff fb01 	bl	8004e2c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800582a:	4b2c      	ldr	r3, [pc, #176]	; (80058dc <ADC_Enable+0x100>)
 800582c:	0018      	movs	r0, r3
 800582e:	f7ff fa23 	bl	8004c78 <LL_ADC_GetCommonPathInternalCh>
 8005832:	0002      	movs	r2, r0
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	041b      	lsls	r3, r3, #16
 8005838:	4013      	ands	r3, r2
 800583a:	d00f      	beq.n	800585c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800583c:	4b28      	ldr	r3, [pc, #160]	; (80058e0 <ADC_Enable+0x104>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4928      	ldr	r1, [pc, #160]	; (80058e4 <ADC_Enable+0x108>)
 8005842:	0018      	movs	r0, r3
 8005844:	f7fa fc5e 	bl	8000104 <__udivsi3>
 8005848:	0003      	movs	r3, r0
 800584a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800584c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800584e:	e002      	b.n	8005856 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	3b01      	subs	r3, #1
 8005854:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f9      	bne.n	8005850 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	7e5b      	ldrb	r3, [r3, #25]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d033      	beq.n	80058cc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005864:	f7ff f9a4 	bl	8004bb0 <HAL_GetTick>
 8005868:	0003      	movs	r3, r0
 800586a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800586c:	e027      	b.n	80058be <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	0018      	movs	r0, r3
 8005874:	f7ff fafe 	bl	8004e74 <LL_ADC_IsEnabled>
 8005878:	1e03      	subs	r3, r0, #0
 800587a:	d104      	bne.n	8005886 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	0018      	movs	r0, r3
 8005882:	f7ff fad3 	bl	8004e2c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005886:	f7ff f993 	bl	8004bb0 <HAL_GetTick>
 800588a:	0002      	movs	r2, r0
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d914      	bls.n	80058be <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2201      	movs	r2, #1
 800589c:	4013      	ands	r3, r2
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d00d      	beq.n	80058be <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a6:	2210      	movs	r2, #16
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b2:	2201      	movs	r2, #1
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e007      	b.n	80058ce <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2201      	movs	r2, #1
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d1d0      	bne.n	800586e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	0018      	movs	r0, r3
 80058d0:	46bd      	mov	sp, r7
 80058d2:	b004      	add	sp, #16
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	80000017 	.word	0x80000017
 80058dc:	40012708 	.word	0x40012708
 80058e0:	20000004 	.word	0x20000004
 80058e4:	00030d40 	.word	0x00030d40

080058e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	0018      	movs	r0, r3
 80058f6:	f7ff face 	bl	8004e96 <LL_ADC_IsDisableOngoing>
 80058fa:	0003      	movs	r3, r0
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	0018      	movs	r0, r3
 8005904:	f7ff fab6 	bl	8004e74 <LL_ADC_IsEnabled>
 8005908:	1e03      	subs	r3, r0, #0
 800590a:	d046      	beq.n	800599a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d143      	bne.n	800599a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2205      	movs	r2, #5
 800591a:	4013      	ands	r3, r2
 800591c:	2b01      	cmp	r3, #1
 800591e:	d10d      	bne.n	800593c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	0018      	movs	r0, r3
 8005926:	f7ff fa93 	bl	8004e50 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2203      	movs	r2, #3
 8005930:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005932:	f7ff f93d 	bl	8004bb0 <HAL_GetTick>
 8005936:	0003      	movs	r3, r0
 8005938:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800593a:	e028      	b.n	800598e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005940:	2210      	movs	r2, #16
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594c:	2201      	movs	r2, #1
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e021      	b.n	800599c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005958:	f7ff f92a 	bl	8004bb0 <HAL_GetTick>
 800595c:	0002      	movs	r2, r0
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d913      	bls.n	800598e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	2201      	movs	r2, #1
 800596e:	4013      	ands	r3, r2
 8005970:	d00d      	beq.n	800598e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	2210      	movs	r2, #16
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005982:	2201      	movs	r2, #1
 8005984:	431a      	orrs	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e006      	b.n	800599c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2201      	movs	r2, #1
 8005996:	4013      	ands	r3, r2
 8005998:	d1de      	bne.n	8005958 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	0018      	movs	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	b004      	add	sp, #16
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <LL_ADC_GetCommonClock>:
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	23f0      	movs	r3, #240	; 0xf0
 80059b2:	039b      	lsls	r3, r3, #14
 80059b4:	4013      	ands	r3, r2
}
 80059b6:	0018      	movs	r0, r3
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b002      	add	sp, #8
 80059bc:	bd80      	pop	{r7, pc}

080059be <LL_ADC_GetClock>:
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b082      	sub	sp, #8
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	0f9b      	lsrs	r3, r3, #30
 80059cc:	079b      	lsls	r3, r3, #30
}
 80059ce:	0018      	movs	r0, r3
 80059d0:	46bd      	mov	sp, r7
 80059d2:	b002      	add	sp, #8
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <LL_ADC_SetCalibrationFactor>:
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	22b4      	movs	r2, #180	; 0xb4
 80059e4:	589b      	ldr	r3, [r3, r2]
 80059e6:	227f      	movs	r2, #127	; 0x7f
 80059e8:	4393      	bics	r3, r2
 80059ea:	001a      	movs	r2, r3
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	21b4      	movs	r1, #180	; 0xb4
 80059f4:	505a      	str	r2, [r3, r1]
}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b002      	add	sp, #8
 80059fc:	bd80      	pop	{r7, pc}

080059fe <LL_ADC_GetCalibrationFactor>:
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b082      	sub	sp, #8
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	22b4      	movs	r2, #180	; 0xb4
 8005a0a:	589b      	ldr	r3, [r3, r2]
 8005a0c:	227f      	movs	r2, #127	; 0x7f
 8005a0e:	4013      	ands	r3, r2
}
 8005a10:	0018      	movs	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b002      	add	sp, #8
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <LL_ADC_Enable>:
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	4a04      	ldr	r2, [pc, #16]	; (8005a38 <LL_ADC_Enable+0x20>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	2201      	movs	r2, #1
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	609a      	str	r2, [r3, #8]
}
 8005a30:	46c0      	nop			; (mov r8, r8)
 8005a32:	46bd      	mov	sp, r7
 8005a34:	b002      	add	sp, #8
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	7fffffe8 	.word	0x7fffffe8

08005a3c <LL_ADC_Disable>:
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	4a04      	ldr	r2, [pc, #16]	; (8005a5c <LL_ADC_Disable+0x20>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	609a      	str	r2, [r3, #8]
}
 8005a54:	46c0      	nop			; (mov r8, r8)
 8005a56:	46bd      	mov	sp, r7
 8005a58:	b002      	add	sp, #8
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	7fffffe8 	.word	0x7fffffe8

08005a60 <LL_ADC_IsEnabled>:
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <LL_ADC_IsEnabled+0x18>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <LL_ADC_IsEnabled+0x1a>
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	b002      	add	sp, #8
 8005a80:	bd80      	pop	{r7, pc}
	...

08005a84 <LL_ADC_StartCalibration>:
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4a05      	ldr	r2, [pc, #20]	; (8005aa8 <LL_ADC_StartCalibration+0x24>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	2280      	movs	r2, #128	; 0x80
 8005a96:	0612      	lsls	r2, r2, #24
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	609a      	str	r2, [r3, #8]
}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	b002      	add	sp, #8
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	7fffffe8 	.word	0x7fffffe8

08005aac <LL_ADC_IsCalibrationOnGoing>:
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	0fdb      	lsrs	r3, r3, #31
 8005aba:	07da      	lsls	r2, r3, #31
 8005abc:	2380      	movs	r3, #128	; 0x80
 8005abe:	061b      	lsls	r3, r3, #24
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d101      	bne.n	8005ac8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e000      	b.n	8005aca <LL_ADC_IsCalibrationOnGoing+0x1e>
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	0018      	movs	r0, r3
 8005acc:	46bd      	mov	sp, r7
 8005ace:	b002      	add	sp, #8
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	b08b      	sub	sp, #44	; 0x2c
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2254      	movs	r2, #84	; 0x54
 8005ae8:	5c9b      	ldrb	r3, [r3, r2]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_ADCEx_Calibration_Start+0x1e>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e0dd      	b.n	8005cae <HAL_ADCEx_Calibration_Start+0x1da>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2254      	movs	r2, #84	; 0x54
 8005af6:	2101      	movs	r1, #1
 8005af8:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005afa:	231f      	movs	r3, #31
 8005afc:	18fc      	adds	r4, r7, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	0018      	movs	r0, r3
 8005b02:	f7ff fef1 	bl	80058e8 <ADC_Disable>
 8005b06:	0003      	movs	r3, r0
 8005b08:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	0018      	movs	r0, r3
 8005b10:	f7ff ffa6 	bl	8005a60 <LL_ADC_IsEnabled>
 8005b14:	1e03      	subs	r3, r0, #0
 8005b16:	d000      	beq.n	8005b1a <HAL_ADCEx_Calibration_Start+0x46>
 8005b18:	e0bc      	b.n	8005c94 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1e:	4a66      	ldr	r2, [pc, #408]	; (8005cb8 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	2202      	movs	r2, #2
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	4a62      	ldr	r2, [pc, #392]	; (8005cbc <HAL_ADCEx_Calibration_Start+0x1e8>)
 8005b32:	4013      	ands	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	495f      	ldr	r1, [pc, #380]	; (8005cc0 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8005b42:	400a      	ands	r2, r1
 8005b44:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005b46:	2300      	movs	r3, #0
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4a:	e02d      	b.n	8005ba8 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	0018      	movs	r0, r3
 8005b52:	f7ff ff97 	bl	8005a84 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005b56:	e014      	b.n	8005b82 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4a58      	ldr	r2, [pc, #352]	; (8005cc4 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d90d      	bls.n	8005b82 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6a:	2212      	movs	r2, #18
 8005b6c:	4393      	bics	r3, r2
 8005b6e:	2210      	movs	r2, #16
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2254      	movs	r2, #84	; 0x54
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e095      	b.n	8005cae <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	0018      	movs	r0, r3
 8005b88:	f7ff ff90 	bl	8005aac <LL_ADC_IsCalibrationOnGoing>
 8005b8c:	1e03      	subs	r3, r0, #0
 8005b8e:	d1e3      	bne.n	8005b58 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	0018      	movs	r0, r3
 8005b96:	f7ff ff32 	bl	80059fe <LL_ADC_GetCalibrationFactor>
 8005b9a:	0002      	movs	r2, r0
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	189b      	adds	r3, r3, r2
 8005ba0:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	2b07      	cmp	r3, #7
 8005bac:	d9ce      	bls.n	8005b4c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8005bae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bb0:	6a38      	ldr	r0, [r7, #32]
 8005bb2:	f7fa faa7 	bl	8000104 <__udivsi3>
 8005bb6:	0003      	movs	r3, r0
 8005bb8:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f7ff ff2a 	bl	8005a18 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f7ff fef8 	bl	80059be <LL_ADC_GetClock>
 8005bce:	1e03      	subs	r3, r0, #0
 8005bd0:	d11b      	bne.n	8005c0a <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bd2:	4b3d      	ldr	r3, [pc, #244]	; (8005cc8 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f7ff fee5 	bl	80059a4 <LL_ADC_GetCommonClock>
 8005bda:	0003      	movs	r3, r0
 8005bdc:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	23e0      	movs	r3, #224	; 0xe0
 8005be2:	035b      	lsls	r3, r3, #13
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d310      	bcc.n	8005c0a <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	0c9b      	lsrs	r3, r3, #18
 8005bec:	3b03      	subs	r3, #3
 8005bee:	2201      	movs	r2, #1
 8005bf0:	409a      	lsls	r2, r3
 8005bf2:	0013      	movs	r3, r2
 8005bf4:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	085b      	lsrs	r3, r3, #1
 8005bfa:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8005bfc:	e002      	b.n	8005c04 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f9      	bne.n	8005bfe <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6a3a      	ldr	r2, [r7, #32]
 8005c10:	0011      	movs	r1, r2
 8005c12:	0018      	movs	r0, r3
 8005c14:	f7ff fedf 	bl	80059d6 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f7ff ff0d 	bl	8005a3c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005c22:	f7fe ffc5 	bl	8004bb0 <HAL_GetTick>
 8005c26:	0003      	movs	r3, r0
 8005c28:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005c2a:	e01b      	b.n	8005c64 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005c2c:	f7fe ffc0 	bl	8004bb0 <HAL_GetTick>
 8005c30:	0002      	movs	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d914      	bls.n	8005c64 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f7ff ff0e 	bl	8005a60 <LL_ADC_IsEnabled>
 8005c44:	1e03      	subs	r3, r0, #0
 8005c46:	d00d      	beq.n	8005c64 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c58:	2201      	movs	r2, #1
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e024      	b.n	8005cae <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f7ff fef9 	bl	8005a60 <LL_ADC_IsEnabled>
 8005c6e:	1e03      	subs	r3, r0, #0
 8005c70:	d1dc      	bne.n	8005c2c <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68d9      	ldr	r1, [r3, #12]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c86:	2203      	movs	r2, #3
 8005c88:	4393      	bics	r3, r2
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	659a      	str	r2, [r3, #88]	; 0x58
 8005c92:	e005      	b.n	8005ca0 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c98:	2210      	movs	r2, #16
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2254      	movs	r2, #84	; 0x54
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005ca8:	231f      	movs	r3, #31
 8005caa:	18fb      	adds	r3, r7, r3
 8005cac:	781b      	ldrb	r3, [r3, #0]
}
 8005cae:	0018      	movs	r0, r3
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b00b      	add	sp, #44	; 0x2c
 8005cb4:	bd90      	pop	{r4, r7, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	fffffefd 	.word	0xfffffefd
 8005cbc:	00008003 	.word	0x00008003
 8005cc0:	ffff7ffc 	.word	0xffff7ffc
 8005cc4:	0002f1ff 	.word	0x0002f1ff
 8005cc8:	40012708 	.word	0x40012708

08005ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ccc:	b590      	push	{r4, r7, lr}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	0002      	movs	r2, r0
 8005cd4:	6039      	str	r1, [r7, #0]
 8005cd6:	1dfb      	adds	r3, r7, #7
 8005cd8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005cda:	1dfb      	adds	r3, r7, #7
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce0:	d828      	bhi.n	8005d34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005ce2:	4a2f      	ldr	r2, [pc, #188]	; (8005da0 <__NVIC_SetPriority+0xd4>)
 8005ce4:	1dfb      	adds	r3, r7, #7
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	b25b      	sxtb	r3, r3
 8005cea:	089b      	lsrs	r3, r3, #2
 8005cec:	33c0      	adds	r3, #192	; 0xc0
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	589b      	ldr	r3, [r3, r2]
 8005cf2:	1dfa      	adds	r2, r7, #7
 8005cf4:	7812      	ldrb	r2, [r2, #0]
 8005cf6:	0011      	movs	r1, r2
 8005cf8:	2203      	movs	r2, #3
 8005cfa:	400a      	ands	r2, r1
 8005cfc:	00d2      	lsls	r2, r2, #3
 8005cfe:	21ff      	movs	r1, #255	; 0xff
 8005d00:	4091      	lsls	r1, r2
 8005d02:	000a      	movs	r2, r1
 8005d04:	43d2      	mvns	r2, r2
 8005d06:	401a      	ands	r2, r3
 8005d08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	019b      	lsls	r3, r3, #6
 8005d0e:	22ff      	movs	r2, #255	; 0xff
 8005d10:	401a      	ands	r2, r3
 8005d12:	1dfb      	adds	r3, r7, #7
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	0018      	movs	r0, r3
 8005d18:	2303      	movs	r3, #3
 8005d1a:	4003      	ands	r3, r0
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d20:	481f      	ldr	r0, [pc, #124]	; (8005da0 <__NVIC_SetPriority+0xd4>)
 8005d22:	1dfb      	adds	r3, r7, #7
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	b25b      	sxtb	r3, r3
 8005d28:	089b      	lsrs	r3, r3, #2
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	33c0      	adds	r3, #192	; 0xc0
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005d32:	e031      	b.n	8005d98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d34:	4a1b      	ldr	r2, [pc, #108]	; (8005da4 <__NVIC_SetPriority+0xd8>)
 8005d36:	1dfb      	adds	r3, r7, #7
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	230f      	movs	r3, #15
 8005d3e:	400b      	ands	r3, r1
 8005d40:	3b08      	subs	r3, #8
 8005d42:	089b      	lsrs	r3, r3, #2
 8005d44:	3306      	adds	r3, #6
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	18d3      	adds	r3, r2, r3
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	1dfa      	adds	r2, r7, #7
 8005d50:	7812      	ldrb	r2, [r2, #0]
 8005d52:	0011      	movs	r1, r2
 8005d54:	2203      	movs	r2, #3
 8005d56:	400a      	ands	r2, r1
 8005d58:	00d2      	lsls	r2, r2, #3
 8005d5a:	21ff      	movs	r1, #255	; 0xff
 8005d5c:	4091      	lsls	r1, r2
 8005d5e:	000a      	movs	r2, r1
 8005d60:	43d2      	mvns	r2, r2
 8005d62:	401a      	ands	r2, r3
 8005d64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	019b      	lsls	r3, r3, #6
 8005d6a:	22ff      	movs	r2, #255	; 0xff
 8005d6c:	401a      	ands	r2, r3
 8005d6e:	1dfb      	adds	r3, r7, #7
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	0018      	movs	r0, r3
 8005d74:	2303      	movs	r3, #3
 8005d76:	4003      	ands	r3, r0
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d7c:	4809      	ldr	r0, [pc, #36]	; (8005da4 <__NVIC_SetPriority+0xd8>)
 8005d7e:	1dfb      	adds	r3, r7, #7
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	001c      	movs	r4, r3
 8005d84:	230f      	movs	r3, #15
 8005d86:	4023      	ands	r3, r4
 8005d88:	3b08      	subs	r3, #8
 8005d8a:	089b      	lsrs	r3, r3, #2
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	3306      	adds	r3, #6
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	18c3      	adds	r3, r0, r3
 8005d94:	3304      	adds	r3, #4
 8005d96:	601a      	str	r2, [r3, #0]
}
 8005d98:	46c0      	nop			; (mov r8, r8)
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	b003      	add	sp, #12
 8005d9e:	bd90      	pop	{r4, r7, pc}
 8005da0:	e000e100 	.word	0xe000e100
 8005da4:	e000ed00 	.word	0xe000ed00

08005da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	1e5a      	subs	r2, r3, #1
 8005db4:	2380      	movs	r3, #128	; 0x80
 8005db6:	045b      	lsls	r3, r3, #17
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d301      	bcc.n	8005dc0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e010      	b.n	8005de2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <SysTick_Config+0x44>)
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	3a01      	subs	r2, #1
 8005dc6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dc8:	2301      	movs	r3, #1
 8005dca:	425b      	negs	r3, r3
 8005dcc:	2103      	movs	r1, #3
 8005dce:	0018      	movs	r0, r3
 8005dd0:	f7ff ff7c 	bl	8005ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dd4:	4b05      	ldr	r3, [pc, #20]	; (8005dec <SysTick_Config+0x44>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dda:	4b04      	ldr	r3, [pc, #16]	; (8005dec <SysTick_Config+0x44>)
 8005ddc:	2207      	movs	r2, #7
 8005dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	0018      	movs	r0, r3
 8005de4:	46bd      	mov	sp, r7
 8005de6:	b002      	add	sp, #8
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	46c0      	nop			; (mov r8, r8)
 8005dec:	e000e010 	.word	0xe000e010

08005df0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
 8005dfa:	210f      	movs	r1, #15
 8005dfc:	187b      	adds	r3, r7, r1
 8005dfe:	1c02      	adds	r2, r0, #0
 8005e00:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	187b      	adds	r3, r7, r1
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	b25b      	sxtb	r3, r3
 8005e0a:	0011      	movs	r1, r2
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f7ff ff5d 	bl	8005ccc <__NVIC_SetPriority>
}
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	46bd      	mov	sp, r7
 8005e16:	b004      	add	sp, #16
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	0018      	movs	r0, r3
 8005e26:	f7ff ffbf 	bl	8005da8 <SysTick_Config>
 8005e2a:	0003      	movs	r3, r0
}
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	b002      	add	sp, #8
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e42:	e14d      	b.n	80060e0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2101      	movs	r1, #1
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4091      	lsls	r1, r2
 8005e4e:	000a      	movs	r2, r1
 8005e50:	4013      	ands	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d100      	bne.n	8005e5c <HAL_GPIO_Init+0x28>
 8005e5a:	e13e      	b.n	80060da <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2203      	movs	r2, #3
 8005e62:	4013      	ands	r3, r2
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d005      	beq.n	8005e74 <HAL_GPIO_Init+0x40>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	4013      	ands	r3, r2
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d130      	bne.n	8005ed6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	2203      	movs	r2, #3
 8005e80:	409a      	lsls	r2, r3
 8005e82:	0013      	movs	r3, r2
 8005e84:	43da      	mvns	r2, r3
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	409a      	lsls	r2, r3
 8005e96:	0013      	movs	r3, r2
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005eaa:	2201      	movs	r2, #1
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	409a      	lsls	r2, r3
 8005eb0:	0013      	movs	r3, r2
 8005eb2:	43da      	mvns	r2, r3
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	091b      	lsrs	r3, r3, #4
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	401a      	ands	r2, r3
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	409a      	lsls	r2, r3
 8005ec8:	0013      	movs	r3, r2
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2203      	movs	r2, #3
 8005edc:	4013      	ands	r3, r2
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d017      	beq.n	8005f12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	2203      	movs	r2, #3
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	0013      	movs	r3, r2
 8005ef2:	43da      	mvns	r2, r3
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	409a      	lsls	r2, r3
 8005f04:	0013      	movs	r3, r2
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2203      	movs	r2, #3
 8005f18:	4013      	ands	r3, r2
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d123      	bne.n	8005f66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	08da      	lsrs	r2, r3, #3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	3208      	adds	r2, #8
 8005f26:	0092      	lsls	r2, r2, #2
 8005f28:	58d3      	ldr	r3, [r2, r3]
 8005f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2207      	movs	r2, #7
 8005f30:	4013      	ands	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	220f      	movs	r2, #15
 8005f36:	409a      	lsls	r2, r3
 8005f38:	0013      	movs	r3, r2
 8005f3a:	43da      	mvns	r2, r3
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2107      	movs	r1, #7
 8005f4a:	400b      	ands	r3, r1
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	409a      	lsls	r2, r3
 8005f50:	0013      	movs	r3, r2
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	08da      	lsrs	r2, r3, #3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3208      	adds	r2, #8
 8005f60:	0092      	lsls	r2, r2, #2
 8005f62:	6939      	ldr	r1, [r7, #16]
 8005f64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	2203      	movs	r2, #3
 8005f72:	409a      	lsls	r2, r3
 8005f74:	0013      	movs	r3, r2
 8005f76:	43da      	mvns	r2, r3
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2203      	movs	r2, #3
 8005f84:	401a      	ands	r2, r3
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	409a      	lsls	r2, r3
 8005f8c:	0013      	movs	r3, r2
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	23c0      	movs	r3, #192	; 0xc0
 8005fa0:	029b      	lsls	r3, r3, #10
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	d100      	bne.n	8005fa8 <HAL_GPIO_Init+0x174>
 8005fa6:	e098      	b.n	80060da <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005fa8:	4a53      	ldr	r2, [pc, #332]	; (80060f8 <HAL_GPIO_Init+0x2c4>)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	089b      	lsrs	r3, r3, #2
 8005fae:	3318      	adds	r3, #24
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	589b      	ldr	r3, [r3, r2]
 8005fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2203      	movs	r2, #3
 8005fba:	4013      	ands	r3, r2
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	220f      	movs	r2, #15
 8005fc0:	409a      	lsls	r2, r3
 8005fc2:	0013      	movs	r3, r2
 8005fc4:	43da      	mvns	r2, r3
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	23a0      	movs	r3, #160	; 0xa0
 8005fd0:	05db      	lsls	r3, r3, #23
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d019      	beq.n	800600a <HAL_GPIO_Init+0x1d6>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a48      	ldr	r2, [pc, #288]	; (80060fc <HAL_GPIO_Init+0x2c8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d013      	beq.n	8006006 <HAL_GPIO_Init+0x1d2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a47      	ldr	r2, [pc, #284]	; (8006100 <HAL_GPIO_Init+0x2cc>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00d      	beq.n	8006002 <HAL_GPIO_Init+0x1ce>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a46      	ldr	r2, [pc, #280]	; (8006104 <HAL_GPIO_Init+0x2d0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d007      	beq.n	8005ffe <HAL_GPIO_Init+0x1ca>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a45      	ldr	r2, [pc, #276]	; (8006108 <HAL_GPIO_Init+0x2d4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d101      	bne.n	8005ffa <HAL_GPIO_Init+0x1c6>
 8005ff6:	2304      	movs	r3, #4
 8005ff8:	e008      	b.n	800600c <HAL_GPIO_Init+0x1d8>
 8005ffa:	2305      	movs	r3, #5
 8005ffc:	e006      	b.n	800600c <HAL_GPIO_Init+0x1d8>
 8005ffe:	2303      	movs	r3, #3
 8006000:	e004      	b.n	800600c <HAL_GPIO_Init+0x1d8>
 8006002:	2302      	movs	r3, #2
 8006004:	e002      	b.n	800600c <HAL_GPIO_Init+0x1d8>
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <HAL_GPIO_Init+0x1d8>
 800600a:	2300      	movs	r3, #0
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	2103      	movs	r1, #3
 8006010:	400a      	ands	r2, r1
 8006012:	00d2      	lsls	r2, r2, #3
 8006014:	4093      	lsls	r3, r2
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800601c:	4936      	ldr	r1, [pc, #216]	; (80060f8 <HAL_GPIO_Init+0x2c4>)
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	089b      	lsrs	r3, r3, #2
 8006022:	3318      	adds	r3, #24
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800602a:	4b33      	ldr	r3, [pc, #204]	; (80060f8 <HAL_GPIO_Init+0x2c4>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	43da      	mvns	r2, r3
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4013      	ands	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	2380      	movs	r3, #128	; 0x80
 8006040:	035b      	lsls	r3, r3, #13
 8006042:	4013      	ands	r3, r2
 8006044:	d003      	beq.n	800604e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800604e:	4b2a      	ldr	r3, [pc, #168]	; (80060f8 <HAL_GPIO_Init+0x2c4>)
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006054:	4b28      	ldr	r3, [pc, #160]	; (80060f8 <HAL_GPIO_Init+0x2c4>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	43da      	mvns	r2, r3
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4013      	ands	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	2380      	movs	r3, #128	; 0x80
 800606a:	039b      	lsls	r3, r3, #14
 800606c:	4013      	ands	r3, r2
 800606e:	d003      	beq.n	8006078 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006078:	4b1f      	ldr	r3, [pc, #124]	; (80060f8 <HAL_GPIO_Init+0x2c4>)
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800607e:	4a1e      	ldr	r2, [pc, #120]	; (80060f8 <HAL_GPIO_Init+0x2c4>)
 8006080:	2384      	movs	r3, #132	; 0x84
 8006082:	58d3      	ldr	r3, [r2, r3]
 8006084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	43da      	mvns	r2, r3
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	4013      	ands	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	2380      	movs	r3, #128	; 0x80
 8006096:	029b      	lsls	r3, r3, #10
 8006098:	4013      	ands	r3, r2
 800609a:	d003      	beq.n	80060a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80060a4:	4914      	ldr	r1, [pc, #80]	; (80060f8 <HAL_GPIO_Init+0x2c4>)
 80060a6:	2284      	movs	r2, #132	; 0x84
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80060ac:	4a12      	ldr	r2, [pc, #72]	; (80060f8 <HAL_GPIO_Init+0x2c4>)
 80060ae:	2380      	movs	r3, #128	; 0x80
 80060b0:	58d3      	ldr	r3, [r2, r3]
 80060b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	43da      	mvns	r2, r3
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4013      	ands	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	025b      	lsls	r3, r3, #9
 80060c6:	4013      	ands	r3, r2
 80060c8:	d003      	beq.n	80060d2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80060d2:	4909      	ldr	r1, [pc, #36]	; (80060f8 <HAL_GPIO_Init+0x2c4>)
 80060d4:	2280      	movs	r2, #128	; 0x80
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	3301      	adds	r3, #1
 80060de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	40da      	lsrs	r2, r3
 80060e8:	1e13      	subs	r3, r2, #0
 80060ea:	d000      	beq.n	80060ee <HAL_GPIO_Init+0x2ba>
 80060ec:	e6aa      	b.n	8005e44 <HAL_GPIO_Init+0x10>
  }
}
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	46c0      	nop			; (mov r8, r8)
 80060f2:	46bd      	mov	sp, r7
 80060f4:	b006      	add	sp, #24
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40021800 	.word	0x40021800
 80060fc:	50000400 	.word	0x50000400
 8006100:	50000800 	.word	0x50000800
 8006104:	50000c00 	.word	0x50000c00
 8006108:	50001000 	.word	0x50001000

0800610c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	000a      	movs	r2, r1
 8006116:	1cbb      	adds	r3, r7, #2
 8006118:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	1cba      	adds	r2, r7, #2
 8006120:	8812      	ldrh	r2, [r2, #0]
 8006122:	4013      	ands	r3, r2
 8006124:	d004      	beq.n	8006130 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006126:	230f      	movs	r3, #15
 8006128:	18fb      	adds	r3, r7, r3
 800612a:	2201      	movs	r2, #1
 800612c:	701a      	strb	r2, [r3, #0]
 800612e:	e003      	b.n	8006138 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006130:	230f      	movs	r3, #15
 8006132:	18fb      	adds	r3, r7, r3
 8006134:	2200      	movs	r2, #0
 8006136:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006138:	230f      	movs	r3, #15
 800613a:	18fb      	adds	r3, r7, r3
 800613c:	781b      	ldrb	r3, [r3, #0]
}
 800613e:	0018      	movs	r0, r3
 8006140:	46bd      	mov	sp, r7
 8006142:	b004      	add	sp, #16
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006150:	4b19      	ldr	r3, [pc, #100]	; (80061b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a19      	ldr	r2, [pc, #100]	; (80061bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006156:	4013      	ands	r3, r2
 8006158:	0019      	movs	r1, r3
 800615a:	4b17      	ldr	r3, [pc, #92]	; (80061b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	430a      	orrs	r2, r1
 8006160:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	2380      	movs	r3, #128	; 0x80
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	429a      	cmp	r2, r3
 800616a:	d11f      	bne.n	80061ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800616c:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	0013      	movs	r3, r2
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	189b      	adds	r3, r3, r2
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	4912      	ldr	r1, [pc, #72]	; (80061c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800617a:	0018      	movs	r0, r3
 800617c:	f7f9 ffc2 	bl	8000104 <__udivsi3>
 8006180:	0003      	movs	r3, r0
 8006182:	3301      	adds	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006186:	e008      	b.n	800619a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3b01      	subs	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	e001      	b.n	800619a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e009      	b.n	80061ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800619a:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800619c:	695a      	ldr	r2, [r3, #20]
 800619e:	2380      	movs	r3, #128	; 0x80
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	401a      	ands	r2, r3
 80061a4:	2380      	movs	r3, #128	; 0x80
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d0ed      	beq.n	8006188 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	0018      	movs	r0, r3
 80061b0:	46bd      	mov	sp, r7
 80061b2:	b004      	add	sp, #16
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	40007000 	.word	0x40007000
 80061bc:	fffff9ff 	.word	0xfffff9ff
 80061c0:	20000004 	.word	0x20000004
 80061c4:	000f4240 	.word	0x000f4240

080061c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80061cc:	4b03      	ldr	r3, [pc, #12]	; (80061dc <LL_RCC_GetAPB1Prescaler+0x14>)
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	23e0      	movs	r3, #224	; 0xe0
 80061d2:	01db      	lsls	r3, r3, #7
 80061d4:	4013      	ands	r3, r2
}
 80061d6:	0018      	movs	r0, r3
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40021000 	.word	0x40021000

080061e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d102      	bne.n	80061f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	f000 fb50 	bl	8006894 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2201      	movs	r2, #1
 80061fa:	4013      	ands	r3, r2
 80061fc:	d100      	bne.n	8006200 <HAL_RCC_OscConfig+0x20>
 80061fe:	e07c      	b.n	80062fa <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006200:	4bc3      	ldr	r3, [pc, #780]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2238      	movs	r2, #56	; 0x38
 8006206:	4013      	ands	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800620a:	4bc1      	ldr	r3, [pc, #772]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	2203      	movs	r2, #3
 8006210:	4013      	ands	r3, r2
 8006212:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2b10      	cmp	r3, #16
 8006218:	d102      	bne.n	8006220 <HAL_RCC_OscConfig+0x40>
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b03      	cmp	r3, #3
 800621e:	d002      	beq.n	8006226 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2b08      	cmp	r3, #8
 8006224:	d10b      	bne.n	800623e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006226:	4bba      	ldr	r3, [pc, #744]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	2380      	movs	r3, #128	; 0x80
 800622c:	029b      	lsls	r3, r3, #10
 800622e:	4013      	ands	r3, r2
 8006230:	d062      	beq.n	80062f8 <HAL_RCC_OscConfig+0x118>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d15e      	bne.n	80062f8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e32a      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	2380      	movs	r3, #128	; 0x80
 8006244:	025b      	lsls	r3, r3, #9
 8006246:	429a      	cmp	r2, r3
 8006248:	d107      	bne.n	800625a <HAL_RCC_OscConfig+0x7a>
 800624a:	4bb1      	ldr	r3, [pc, #708]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4bb0      	ldr	r3, [pc, #704]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006250:	2180      	movs	r1, #128	; 0x80
 8006252:	0249      	lsls	r1, r1, #9
 8006254:	430a      	orrs	r2, r1
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	e020      	b.n	800629c <HAL_RCC_OscConfig+0xbc>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	23a0      	movs	r3, #160	; 0xa0
 8006260:	02db      	lsls	r3, r3, #11
 8006262:	429a      	cmp	r2, r3
 8006264:	d10e      	bne.n	8006284 <HAL_RCC_OscConfig+0xa4>
 8006266:	4baa      	ldr	r3, [pc, #680]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	4ba9      	ldr	r3, [pc, #676]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 800626c:	2180      	movs	r1, #128	; 0x80
 800626e:	02c9      	lsls	r1, r1, #11
 8006270:	430a      	orrs	r2, r1
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	4ba6      	ldr	r3, [pc, #664]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	4ba5      	ldr	r3, [pc, #660]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 800627a:	2180      	movs	r1, #128	; 0x80
 800627c:	0249      	lsls	r1, r1, #9
 800627e:	430a      	orrs	r2, r1
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	e00b      	b.n	800629c <HAL_RCC_OscConfig+0xbc>
 8006284:	4ba2      	ldr	r3, [pc, #648]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	4ba1      	ldr	r3, [pc, #644]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 800628a:	49a2      	ldr	r1, [pc, #648]	; (8006514 <HAL_RCC_OscConfig+0x334>)
 800628c:	400a      	ands	r2, r1
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	4b9f      	ldr	r3, [pc, #636]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4b9e      	ldr	r3, [pc, #632]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006296:	49a0      	ldr	r1, [pc, #640]	; (8006518 <HAL_RCC_OscConfig+0x338>)
 8006298:	400a      	ands	r2, r1
 800629a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d014      	beq.n	80062ce <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a4:	f7fe fc84 	bl	8004bb0 <HAL_GetTick>
 80062a8:	0003      	movs	r3, r0
 80062aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062ac:	e008      	b.n	80062c0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062ae:	f7fe fc7f 	bl	8004bb0 <HAL_GetTick>
 80062b2:	0002      	movs	r2, r0
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b64      	cmp	r3, #100	; 0x64
 80062ba:	d901      	bls.n	80062c0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e2e9      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062c0:	4b93      	ldr	r3, [pc, #588]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	2380      	movs	r3, #128	; 0x80
 80062c6:	029b      	lsls	r3, r3, #10
 80062c8:	4013      	ands	r3, r2
 80062ca:	d0f0      	beq.n	80062ae <HAL_RCC_OscConfig+0xce>
 80062cc:	e015      	b.n	80062fa <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ce:	f7fe fc6f 	bl	8004bb0 <HAL_GetTick>
 80062d2:	0003      	movs	r3, r0
 80062d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062d8:	f7fe fc6a 	bl	8004bb0 <HAL_GetTick>
 80062dc:	0002      	movs	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b64      	cmp	r3, #100	; 0x64
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e2d4      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062ea:	4b89      	ldr	r3, [pc, #548]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	2380      	movs	r3, #128	; 0x80
 80062f0:	029b      	lsls	r3, r3, #10
 80062f2:	4013      	ands	r3, r2
 80062f4:	d1f0      	bne.n	80062d8 <HAL_RCC_OscConfig+0xf8>
 80062f6:	e000      	b.n	80062fa <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2202      	movs	r2, #2
 8006300:	4013      	ands	r3, r2
 8006302:	d100      	bne.n	8006306 <HAL_RCC_OscConfig+0x126>
 8006304:	e099      	b.n	800643a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006306:	4b82      	ldr	r3, [pc, #520]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2238      	movs	r2, #56	; 0x38
 800630c:	4013      	ands	r3, r2
 800630e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006310:	4b7f      	ldr	r3, [pc, #508]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	2203      	movs	r2, #3
 8006316:	4013      	ands	r3, r2
 8006318:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b10      	cmp	r3, #16
 800631e:	d102      	bne.n	8006326 <HAL_RCC_OscConfig+0x146>
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d002      	beq.n	800632c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d135      	bne.n	8006398 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800632c:	4b78      	ldr	r3, [pc, #480]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	2380      	movs	r3, #128	; 0x80
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	4013      	ands	r3, r2
 8006336:	d005      	beq.n	8006344 <HAL_RCC_OscConfig+0x164>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e2a7      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006344:	4b72      	ldr	r3, [pc, #456]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	4a74      	ldr	r2, [pc, #464]	; (800651c <HAL_RCC_OscConfig+0x33c>)
 800634a:	4013      	ands	r3, r2
 800634c:	0019      	movs	r1, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	021a      	lsls	r2, r3, #8
 8006354:	4b6e      	ldr	r3, [pc, #440]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006356:	430a      	orrs	r2, r1
 8006358:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d112      	bne.n	8006386 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006360:	4b6b      	ldr	r3, [pc, #428]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a6e      	ldr	r2, [pc, #440]	; (8006520 <HAL_RCC_OscConfig+0x340>)
 8006366:	4013      	ands	r3, r2
 8006368:	0019      	movs	r1, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691a      	ldr	r2, [r3, #16]
 800636e:	4b68      	ldr	r3, [pc, #416]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006370:	430a      	orrs	r2, r1
 8006372:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006374:	4b66      	ldr	r3, [pc, #408]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	0adb      	lsrs	r3, r3, #11
 800637a:	2207      	movs	r2, #7
 800637c:	4013      	ands	r3, r2
 800637e:	4a69      	ldr	r2, [pc, #420]	; (8006524 <HAL_RCC_OscConfig+0x344>)
 8006380:	40da      	lsrs	r2, r3
 8006382:	4b69      	ldr	r3, [pc, #420]	; (8006528 <HAL_RCC_OscConfig+0x348>)
 8006384:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006386:	4b69      	ldr	r3, [pc, #420]	; (800652c <HAL_RCC_OscConfig+0x34c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	0018      	movs	r0, r3
 800638c:	f7fe fbb4 	bl	8004af8 <HAL_InitTick>
 8006390:	1e03      	subs	r3, r0, #0
 8006392:	d051      	beq.n	8006438 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e27d      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d030      	beq.n	8006402 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80063a0:	4b5b      	ldr	r3, [pc, #364]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a5e      	ldr	r2, [pc, #376]	; (8006520 <HAL_RCC_OscConfig+0x340>)
 80063a6:	4013      	ands	r3, r2
 80063a8:	0019      	movs	r1, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691a      	ldr	r2, [r3, #16]
 80063ae:	4b58      	ldr	r3, [pc, #352]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 80063b0:	430a      	orrs	r2, r1
 80063b2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80063b4:	4b56      	ldr	r3, [pc, #344]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	4b55      	ldr	r3, [pc, #340]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 80063ba:	2180      	movs	r1, #128	; 0x80
 80063bc:	0049      	lsls	r1, r1, #1
 80063be:	430a      	orrs	r2, r1
 80063c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c2:	f7fe fbf5 	bl	8004bb0 <HAL_GetTick>
 80063c6:	0003      	movs	r3, r0
 80063c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063cc:	f7fe fbf0 	bl	8004bb0 <HAL_GetTick>
 80063d0:	0002      	movs	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e25a      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063de:	4b4c      	ldr	r3, [pc, #304]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	2380      	movs	r3, #128	; 0x80
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	4013      	ands	r3, r2
 80063e8:	d0f0      	beq.n	80063cc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ea:	4b49      	ldr	r3, [pc, #292]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	4a4b      	ldr	r2, [pc, #300]	; (800651c <HAL_RCC_OscConfig+0x33c>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	0019      	movs	r1, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	021a      	lsls	r2, r3, #8
 80063fa:	4b45      	ldr	r3, [pc, #276]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 80063fc:	430a      	orrs	r2, r1
 80063fe:	605a      	str	r2, [r3, #4]
 8006400:	e01b      	b.n	800643a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006402:	4b43      	ldr	r3, [pc, #268]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	4b42      	ldr	r3, [pc, #264]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006408:	4949      	ldr	r1, [pc, #292]	; (8006530 <HAL_RCC_OscConfig+0x350>)
 800640a:	400a      	ands	r2, r1
 800640c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640e:	f7fe fbcf 	bl	8004bb0 <HAL_GetTick>
 8006412:	0003      	movs	r3, r0
 8006414:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006418:	f7fe fbca 	bl	8004bb0 <HAL_GetTick>
 800641c:	0002      	movs	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e234      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800642a:	4b39      	ldr	r3, [pc, #228]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	2380      	movs	r3, #128	; 0x80
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	4013      	ands	r3, r2
 8006434:	d1f0      	bne.n	8006418 <HAL_RCC_OscConfig+0x238>
 8006436:	e000      	b.n	800643a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006438:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2208      	movs	r2, #8
 8006440:	4013      	ands	r3, r2
 8006442:	d047      	beq.n	80064d4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006444:	4b32      	ldr	r3, [pc, #200]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	2238      	movs	r2, #56	; 0x38
 800644a:	4013      	ands	r3, r2
 800644c:	2b18      	cmp	r3, #24
 800644e:	d10a      	bne.n	8006466 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006450:	4b2f      	ldr	r3, [pc, #188]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006454:	2202      	movs	r2, #2
 8006456:	4013      	ands	r3, r2
 8006458:	d03c      	beq.n	80064d4 <HAL_RCC_OscConfig+0x2f4>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d138      	bne.n	80064d4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e216      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d019      	beq.n	80064a2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800646e:	4b28      	ldr	r3, [pc, #160]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006470:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006472:	4b27      	ldr	r3, [pc, #156]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006474:	2101      	movs	r1, #1
 8006476:	430a      	orrs	r2, r1
 8006478:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647a:	f7fe fb99 	bl	8004bb0 <HAL_GetTick>
 800647e:	0003      	movs	r3, r0
 8006480:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006484:	f7fe fb94 	bl	8004bb0 <HAL_GetTick>
 8006488:	0002      	movs	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e1fe      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006496:	4b1e      	ldr	r3, [pc, #120]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 8006498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800649a:	2202      	movs	r2, #2
 800649c:	4013      	ands	r3, r2
 800649e:	d0f1      	beq.n	8006484 <HAL_RCC_OscConfig+0x2a4>
 80064a0:	e018      	b.n	80064d4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80064a2:	4b1b      	ldr	r3, [pc, #108]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 80064a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064a6:	4b1a      	ldr	r3, [pc, #104]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 80064a8:	2101      	movs	r1, #1
 80064aa:	438a      	bics	r2, r1
 80064ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ae:	f7fe fb7f 	bl	8004bb0 <HAL_GetTick>
 80064b2:	0003      	movs	r3, r0
 80064b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064b8:	f7fe fb7a 	bl	8004bb0 <HAL_GetTick>
 80064bc:	0002      	movs	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e1e4      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064ca:	4b11      	ldr	r3, [pc, #68]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 80064cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ce:	2202      	movs	r2, #2
 80064d0:	4013      	ands	r3, r2
 80064d2:	d1f1      	bne.n	80064b8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2204      	movs	r2, #4
 80064da:	4013      	ands	r3, r2
 80064dc:	d100      	bne.n	80064e0 <HAL_RCC_OscConfig+0x300>
 80064de:	e0c7      	b.n	8006670 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064e0:	231f      	movs	r3, #31
 80064e2:	18fb      	adds	r3, r7, r3
 80064e4:	2200      	movs	r2, #0
 80064e6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80064e8:	4b09      	ldr	r3, [pc, #36]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	2238      	movs	r2, #56	; 0x38
 80064ee:	4013      	ands	r3, r2
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	d11f      	bne.n	8006534 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80064f4:	4b06      	ldr	r3, [pc, #24]	; (8006510 <HAL_RCC_OscConfig+0x330>)
 80064f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f8:	2202      	movs	r2, #2
 80064fa:	4013      	ands	r3, r2
 80064fc:	d100      	bne.n	8006500 <HAL_RCC_OscConfig+0x320>
 80064fe:	e0b7      	b.n	8006670 <HAL_RCC_OscConfig+0x490>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d000      	beq.n	800650a <HAL_RCC_OscConfig+0x32a>
 8006508:	e0b2      	b.n	8006670 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e1c2      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
 800650e:	46c0      	nop			; (mov r8, r8)
 8006510:	40021000 	.word	0x40021000
 8006514:	fffeffff 	.word	0xfffeffff
 8006518:	fffbffff 	.word	0xfffbffff
 800651c:	ffff80ff 	.word	0xffff80ff
 8006520:	ffffc7ff 	.word	0xffffc7ff
 8006524:	00f42400 	.word	0x00f42400
 8006528:	20000004 	.word	0x20000004
 800652c:	20000008 	.word	0x20000008
 8006530:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006534:	4bb5      	ldr	r3, [pc, #724]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006538:	2380      	movs	r3, #128	; 0x80
 800653a:	055b      	lsls	r3, r3, #21
 800653c:	4013      	ands	r3, r2
 800653e:	d101      	bne.n	8006544 <HAL_RCC_OscConfig+0x364>
 8006540:	2301      	movs	r3, #1
 8006542:	e000      	b.n	8006546 <HAL_RCC_OscConfig+0x366>
 8006544:	2300      	movs	r3, #0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d011      	beq.n	800656e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800654a:	4bb0      	ldr	r3, [pc, #704]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 800654c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800654e:	4baf      	ldr	r3, [pc, #700]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006550:	2180      	movs	r1, #128	; 0x80
 8006552:	0549      	lsls	r1, r1, #21
 8006554:	430a      	orrs	r2, r1
 8006556:	63da      	str	r2, [r3, #60]	; 0x3c
 8006558:	4bac      	ldr	r3, [pc, #688]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 800655a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800655c:	2380      	movs	r3, #128	; 0x80
 800655e:	055b      	lsls	r3, r3, #21
 8006560:	4013      	ands	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006566:	231f      	movs	r3, #31
 8006568:	18fb      	adds	r3, r7, r3
 800656a:	2201      	movs	r2, #1
 800656c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800656e:	4ba8      	ldr	r3, [pc, #672]	; (8006810 <HAL_RCC_OscConfig+0x630>)
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	2380      	movs	r3, #128	; 0x80
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	4013      	ands	r3, r2
 8006578:	d11a      	bne.n	80065b0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800657a:	4ba5      	ldr	r3, [pc, #660]	; (8006810 <HAL_RCC_OscConfig+0x630>)
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4ba4      	ldr	r3, [pc, #656]	; (8006810 <HAL_RCC_OscConfig+0x630>)
 8006580:	2180      	movs	r1, #128	; 0x80
 8006582:	0049      	lsls	r1, r1, #1
 8006584:	430a      	orrs	r2, r1
 8006586:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006588:	f7fe fb12 	bl	8004bb0 <HAL_GetTick>
 800658c:	0003      	movs	r3, r0
 800658e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006590:	e008      	b.n	80065a4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006592:	f7fe fb0d 	bl	8004bb0 <HAL_GetTick>
 8006596:	0002      	movs	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e177      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065a4:	4b9a      	ldr	r3, [pc, #616]	; (8006810 <HAL_RCC_OscConfig+0x630>)
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	2380      	movs	r3, #128	; 0x80
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	4013      	ands	r3, r2
 80065ae:	d0f0      	beq.n	8006592 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d106      	bne.n	80065c6 <HAL_RCC_OscConfig+0x3e6>
 80065b8:	4b94      	ldr	r3, [pc, #592]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80065ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065bc:	4b93      	ldr	r3, [pc, #588]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80065be:	2101      	movs	r1, #1
 80065c0:	430a      	orrs	r2, r1
 80065c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80065c4:	e01c      	b.n	8006600 <HAL_RCC_OscConfig+0x420>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b05      	cmp	r3, #5
 80065cc:	d10c      	bne.n	80065e8 <HAL_RCC_OscConfig+0x408>
 80065ce:	4b8f      	ldr	r3, [pc, #572]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80065d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065d2:	4b8e      	ldr	r3, [pc, #568]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80065d4:	2104      	movs	r1, #4
 80065d6:	430a      	orrs	r2, r1
 80065d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80065da:	4b8c      	ldr	r3, [pc, #560]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80065dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065de:	4b8b      	ldr	r3, [pc, #556]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80065e0:	2101      	movs	r1, #1
 80065e2:	430a      	orrs	r2, r1
 80065e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80065e6:	e00b      	b.n	8006600 <HAL_RCC_OscConfig+0x420>
 80065e8:	4b88      	ldr	r3, [pc, #544]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80065ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065ec:	4b87      	ldr	r3, [pc, #540]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80065ee:	2101      	movs	r1, #1
 80065f0:	438a      	bics	r2, r1
 80065f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80065f4:	4b85      	ldr	r3, [pc, #532]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80065f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065f8:	4b84      	ldr	r3, [pc, #528]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80065fa:	2104      	movs	r1, #4
 80065fc:	438a      	bics	r2, r1
 80065fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d014      	beq.n	8006632 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006608:	f7fe fad2 	bl	8004bb0 <HAL_GetTick>
 800660c:	0003      	movs	r3, r0
 800660e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006610:	e009      	b.n	8006626 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006612:	f7fe facd 	bl	8004bb0 <HAL_GetTick>
 8006616:	0002      	movs	r2, r0
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	4a7d      	ldr	r2, [pc, #500]	; (8006814 <HAL_RCC_OscConfig+0x634>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e136      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006626:	4b79      	ldr	r3, [pc, #484]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662a:	2202      	movs	r2, #2
 800662c:	4013      	ands	r3, r2
 800662e:	d0f0      	beq.n	8006612 <HAL_RCC_OscConfig+0x432>
 8006630:	e013      	b.n	800665a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006632:	f7fe fabd 	bl	8004bb0 <HAL_GetTick>
 8006636:	0003      	movs	r3, r0
 8006638:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800663a:	e009      	b.n	8006650 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800663c:	f7fe fab8 	bl	8004bb0 <HAL_GetTick>
 8006640:	0002      	movs	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	4a73      	ldr	r2, [pc, #460]	; (8006814 <HAL_RCC_OscConfig+0x634>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e121      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006650:	4b6e      	ldr	r3, [pc, #440]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006654:	2202      	movs	r2, #2
 8006656:	4013      	ands	r3, r2
 8006658:	d1f0      	bne.n	800663c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800665a:	231f      	movs	r3, #31
 800665c:	18fb      	adds	r3, r7, r3
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d105      	bne.n	8006670 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006664:	4b69      	ldr	r3, [pc, #420]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006668:	4b68      	ldr	r3, [pc, #416]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 800666a:	496b      	ldr	r1, [pc, #428]	; (8006818 <HAL_RCC_OscConfig+0x638>)
 800666c:	400a      	ands	r2, r1
 800666e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2220      	movs	r2, #32
 8006676:	4013      	ands	r3, r2
 8006678:	d039      	beq.n	80066ee <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d01b      	beq.n	80066ba <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006682:	4b62      	ldr	r3, [pc, #392]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	4b61      	ldr	r3, [pc, #388]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006688:	2180      	movs	r1, #128	; 0x80
 800668a:	03c9      	lsls	r1, r1, #15
 800668c:	430a      	orrs	r2, r1
 800668e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006690:	f7fe fa8e 	bl	8004bb0 <HAL_GetTick>
 8006694:	0003      	movs	r3, r0
 8006696:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800669a:	f7fe fa89 	bl	8004bb0 <HAL_GetTick>
 800669e:	0002      	movs	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e0f3      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80066ac:	4b57      	ldr	r3, [pc, #348]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	2380      	movs	r3, #128	; 0x80
 80066b2:	041b      	lsls	r3, r3, #16
 80066b4:	4013      	ands	r3, r2
 80066b6:	d0f0      	beq.n	800669a <HAL_RCC_OscConfig+0x4ba>
 80066b8:	e019      	b.n	80066ee <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066ba:	4b54      	ldr	r3, [pc, #336]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b53      	ldr	r3, [pc, #332]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80066c0:	4956      	ldr	r1, [pc, #344]	; (800681c <HAL_RCC_OscConfig+0x63c>)
 80066c2:	400a      	ands	r2, r1
 80066c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c6:	f7fe fa73 	bl	8004bb0 <HAL_GetTick>
 80066ca:	0003      	movs	r3, r0
 80066cc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066d0:	f7fe fa6e 	bl	8004bb0 <HAL_GetTick>
 80066d4:	0002      	movs	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e0d8      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80066e2:	4b4a      	ldr	r3, [pc, #296]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	041b      	lsls	r3, r3, #16
 80066ea:	4013      	ands	r3, r2
 80066ec:	d1f0      	bne.n	80066d0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d100      	bne.n	80066f8 <HAL_RCC_OscConfig+0x518>
 80066f6:	e0cc      	b.n	8006892 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066f8:	4b44      	ldr	r3, [pc, #272]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2238      	movs	r2, #56	; 0x38
 80066fe:	4013      	ands	r3, r2
 8006700:	2b10      	cmp	r3, #16
 8006702:	d100      	bne.n	8006706 <HAL_RCC_OscConfig+0x526>
 8006704:	e07b      	b.n	80067fe <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	2b02      	cmp	r3, #2
 800670c:	d156      	bne.n	80067bc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800670e:	4b3f      	ldr	r3, [pc, #252]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	4b3e      	ldr	r3, [pc, #248]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006714:	4942      	ldr	r1, [pc, #264]	; (8006820 <HAL_RCC_OscConfig+0x640>)
 8006716:	400a      	ands	r2, r1
 8006718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671a:	f7fe fa49 	bl	8004bb0 <HAL_GetTick>
 800671e:	0003      	movs	r3, r0
 8006720:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006724:	f7fe fa44 	bl	8004bb0 <HAL_GetTick>
 8006728:	0002      	movs	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e0ae      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006736:	4b35      	ldr	r3, [pc, #212]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	2380      	movs	r3, #128	; 0x80
 800673c:	049b      	lsls	r3, r3, #18
 800673e:	4013      	ands	r3, r2
 8006740:	d1f0      	bne.n	8006724 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006742:	4b32      	ldr	r3, [pc, #200]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	4a37      	ldr	r2, [pc, #220]	; (8006824 <HAL_RCC_OscConfig+0x644>)
 8006748:	4013      	ands	r3, r2
 800674a:	0019      	movs	r1, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	021b      	lsls	r3, r3, #8
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	431a      	orrs	r2, r3
 8006770:	4b26      	ldr	r3, [pc, #152]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006772:	430a      	orrs	r2, r1
 8006774:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006776:	4b25      	ldr	r3, [pc, #148]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	4b24      	ldr	r3, [pc, #144]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 800677c:	2180      	movs	r1, #128	; 0x80
 800677e:	0449      	lsls	r1, r1, #17
 8006780:	430a      	orrs	r2, r1
 8006782:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006784:	4b21      	ldr	r3, [pc, #132]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	4b20      	ldr	r3, [pc, #128]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 800678a:	2180      	movs	r1, #128	; 0x80
 800678c:	0549      	lsls	r1, r1, #21
 800678e:	430a      	orrs	r2, r1
 8006790:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006792:	f7fe fa0d 	bl	8004bb0 <HAL_GetTick>
 8006796:	0003      	movs	r3, r0
 8006798:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800679c:	f7fe fa08 	bl	8004bb0 <HAL_GetTick>
 80067a0:	0002      	movs	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e072      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067ae:	4b17      	ldr	r3, [pc, #92]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	2380      	movs	r3, #128	; 0x80
 80067b4:	049b      	lsls	r3, r3, #18
 80067b6:	4013      	ands	r3, r2
 80067b8:	d0f0      	beq.n	800679c <HAL_RCC_OscConfig+0x5bc>
 80067ba:	e06a      	b.n	8006892 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067bc:	4b13      	ldr	r3, [pc, #76]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	4b12      	ldr	r3, [pc, #72]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80067c2:	4917      	ldr	r1, [pc, #92]	; (8006820 <HAL_RCC_OscConfig+0x640>)
 80067c4:	400a      	ands	r2, r1
 80067c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c8:	f7fe f9f2 	bl	8004bb0 <HAL_GetTick>
 80067cc:	0003      	movs	r3, r0
 80067ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067d0:	e008      	b.n	80067e4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067d2:	f7fe f9ed 	bl	8004bb0 <HAL_GetTick>
 80067d6:	0002      	movs	r2, r0
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d901      	bls.n	80067e4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e057      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067e4:	4b09      	ldr	r3, [pc, #36]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	2380      	movs	r3, #128	; 0x80
 80067ea:	049b      	lsls	r3, r3, #18
 80067ec:	4013      	ands	r3, r2
 80067ee:	d1f0      	bne.n	80067d2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	4b05      	ldr	r3, [pc, #20]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 80067f6:	490c      	ldr	r1, [pc, #48]	; (8006828 <HAL_RCC_OscConfig+0x648>)
 80067f8:	400a      	ands	r2, r1
 80067fa:	60da      	str	r2, [r3, #12]
 80067fc:	e049      	b.n	8006892 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d112      	bne.n	800682c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e044      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	40021000 	.word	0x40021000
 8006810:	40007000 	.word	0x40007000
 8006814:	00001388 	.word	0x00001388
 8006818:	efffffff 	.word	0xefffffff
 800681c:	ffbfffff 	.word	0xffbfffff
 8006820:	feffffff 	.word	0xfeffffff
 8006824:	11c1808c 	.word	0x11c1808c
 8006828:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800682c:	4b1b      	ldr	r3, [pc, #108]	; (800689c <HAL_RCC_OscConfig+0x6bc>)
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2203      	movs	r2, #3
 8006836:	401a      	ands	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	429a      	cmp	r2, r3
 800683e:	d126      	bne.n	800688e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2270      	movs	r2, #112	; 0x70
 8006844:	401a      	ands	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800684a:	429a      	cmp	r2, r3
 800684c:	d11f      	bne.n	800688e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	23fe      	movs	r3, #254	; 0xfe
 8006852:	01db      	lsls	r3, r3, #7
 8006854:	401a      	ands	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800685c:	429a      	cmp	r2, r3
 800685e:	d116      	bne.n	800688e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	23f8      	movs	r3, #248	; 0xf8
 8006864:	039b      	lsls	r3, r3, #14
 8006866:	401a      	ands	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800686c:	429a      	cmp	r2, r3
 800686e:	d10e      	bne.n	800688e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	23e0      	movs	r3, #224	; 0xe0
 8006874:	051b      	lsls	r3, r3, #20
 8006876:	401a      	ands	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800687c:	429a      	cmp	r2, r3
 800687e:	d106      	bne.n	800688e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	0f5b      	lsrs	r3, r3, #29
 8006884:	075a      	lsls	r2, r3, #29
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800688a:	429a      	cmp	r2, r3
 800688c:	d001      	beq.n	8006892 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e000      	b.n	8006894 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	0018      	movs	r0, r3
 8006896:	46bd      	mov	sp, r7
 8006898:	b008      	add	sp, #32
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40021000 	.word	0x40021000

080068a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e0e9      	b.n	8006a88 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068b4:	4b76      	ldr	r3, [pc, #472]	; (8006a90 <HAL_RCC_ClockConfig+0x1f0>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2207      	movs	r2, #7
 80068ba:	4013      	ands	r3, r2
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d91e      	bls.n	8006900 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068c2:	4b73      	ldr	r3, [pc, #460]	; (8006a90 <HAL_RCC_ClockConfig+0x1f0>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2207      	movs	r2, #7
 80068c8:	4393      	bics	r3, r2
 80068ca:	0019      	movs	r1, r3
 80068cc:	4b70      	ldr	r3, [pc, #448]	; (8006a90 <HAL_RCC_ClockConfig+0x1f0>)
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80068d4:	f7fe f96c 	bl	8004bb0 <HAL_GetTick>
 80068d8:	0003      	movs	r3, r0
 80068da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80068dc:	e009      	b.n	80068f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068de:	f7fe f967 	bl	8004bb0 <HAL_GetTick>
 80068e2:	0002      	movs	r2, r0
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	4a6a      	ldr	r2, [pc, #424]	; (8006a94 <HAL_RCC_ClockConfig+0x1f4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e0ca      	b.n	8006a88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80068f2:	4b67      	ldr	r3, [pc, #412]	; (8006a90 <HAL_RCC_ClockConfig+0x1f0>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2207      	movs	r2, #7
 80068f8:	4013      	ands	r3, r2
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d1ee      	bne.n	80068de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2202      	movs	r2, #2
 8006906:	4013      	ands	r3, r2
 8006908:	d015      	beq.n	8006936 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2204      	movs	r2, #4
 8006910:	4013      	ands	r3, r2
 8006912:	d006      	beq.n	8006922 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006914:	4b60      	ldr	r3, [pc, #384]	; (8006a98 <HAL_RCC_ClockConfig+0x1f8>)
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	4b5f      	ldr	r3, [pc, #380]	; (8006a98 <HAL_RCC_ClockConfig+0x1f8>)
 800691a:	21e0      	movs	r1, #224	; 0xe0
 800691c:	01c9      	lsls	r1, r1, #7
 800691e:	430a      	orrs	r2, r1
 8006920:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006922:	4b5d      	ldr	r3, [pc, #372]	; (8006a98 <HAL_RCC_ClockConfig+0x1f8>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	4a5d      	ldr	r2, [pc, #372]	; (8006a9c <HAL_RCC_ClockConfig+0x1fc>)
 8006928:	4013      	ands	r3, r2
 800692a:	0019      	movs	r1, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	4b59      	ldr	r3, [pc, #356]	; (8006a98 <HAL_RCC_ClockConfig+0x1f8>)
 8006932:	430a      	orrs	r2, r1
 8006934:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2201      	movs	r2, #1
 800693c:	4013      	ands	r3, r2
 800693e:	d057      	beq.n	80069f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d107      	bne.n	8006958 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006948:	4b53      	ldr	r3, [pc, #332]	; (8006a98 <HAL_RCC_ClockConfig+0x1f8>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	2380      	movs	r3, #128	; 0x80
 800694e:	029b      	lsls	r3, r3, #10
 8006950:	4013      	ands	r3, r2
 8006952:	d12b      	bne.n	80069ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e097      	b.n	8006a88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2b02      	cmp	r3, #2
 800695e:	d107      	bne.n	8006970 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006960:	4b4d      	ldr	r3, [pc, #308]	; (8006a98 <HAL_RCC_ClockConfig+0x1f8>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	2380      	movs	r3, #128	; 0x80
 8006966:	049b      	lsls	r3, r3, #18
 8006968:	4013      	ands	r3, r2
 800696a:	d11f      	bne.n	80069ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e08b      	b.n	8006a88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d107      	bne.n	8006988 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006978:	4b47      	ldr	r3, [pc, #284]	; (8006a98 <HAL_RCC_ClockConfig+0x1f8>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	2380      	movs	r3, #128	; 0x80
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	4013      	ands	r3, r2
 8006982:	d113      	bne.n	80069ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e07f      	b.n	8006a88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b03      	cmp	r3, #3
 800698e:	d106      	bne.n	800699e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006990:	4b41      	ldr	r3, [pc, #260]	; (8006a98 <HAL_RCC_ClockConfig+0x1f8>)
 8006992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006994:	2202      	movs	r2, #2
 8006996:	4013      	ands	r3, r2
 8006998:	d108      	bne.n	80069ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e074      	b.n	8006a88 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800699e:	4b3e      	ldr	r3, [pc, #248]	; (8006a98 <HAL_RCC_ClockConfig+0x1f8>)
 80069a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a2:	2202      	movs	r2, #2
 80069a4:	4013      	ands	r3, r2
 80069a6:	d101      	bne.n	80069ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e06d      	b.n	8006a88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069ac:	4b3a      	ldr	r3, [pc, #232]	; (8006a98 <HAL_RCC_ClockConfig+0x1f8>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	2207      	movs	r2, #7
 80069b2:	4393      	bics	r3, r2
 80069b4:	0019      	movs	r1, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	4b37      	ldr	r3, [pc, #220]	; (8006a98 <HAL_RCC_ClockConfig+0x1f8>)
 80069bc:	430a      	orrs	r2, r1
 80069be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069c0:	f7fe f8f6 	bl	8004bb0 <HAL_GetTick>
 80069c4:	0003      	movs	r3, r0
 80069c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c8:	e009      	b.n	80069de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069ca:	f7fe f8f1 	bl	8004bb0 <HAL_GetTick>
 80069ce:	0002      	movs	r2, r0
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	4a2f      	ldr	r2, [pc, #188]	; (8006a94 <HAL_RCC_ClockConfig+0x1f4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e054      	b.n	8006a88 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069de:	4b2e      	ldr	r3, [pc, #184]	; (8006a98 <HAL_RCC_ClockConfig+0x1f8>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2238      	movs	r2, #56	; 0x38
 80069e4:	401a      	ands	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d1ec      	bne.n	80069ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069f0:	4b27      	ldr	r3, [pc, #156]	; (8006a90 <HAL_RCC_ClockConfig+0x1f0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2207      	movs	r2, #7
 80069f6:	4013      	ands	r3, r2
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d21e      	bcs.n	8006a3c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069fe:	4b24      	ldr	r3, [pc, #144]	; (8006a90 <HAL_RCC_ClockConfig+0x1f0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2207      	movs	r2, #7
 8006a04:	4393      	bics	r3, r2
 8006a06:	0019      	movs	r1, r3
 8006a08:	4b21      	ldr	r3, [pc, #132]	; (8006a90 <HAL_RCC_ClockConfig+0x1f0>)
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a10:	f7fe f8ce 	bl	8004bb0 <HAL_GetTick>
 8006a14:	0003      	movs	r3, r0
 8006a16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006a18:	e009      	b.n	8006a2e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a1a:	f7fe f8c9 	bl	8004bb0 <HAL_GetTick>
 8006a1e:	0002      	movs	r2, r0
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	4a1b      	ldr	r2, [pc, #108]	; (8006a94 <HAL_RCC_ClockConfig+0x1f4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e02c      	b.n	8006a88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006a2e:	4b18      	ldr	r3, [pc, #96]	; (8006a90 <HAL_RCC_ClockConfig+0x1f0>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2207      	movs	r2, #7
 8006a34:	4013      	ands	r3, r2
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d1ee      	bne.n	8006a1a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2204      	movs	r2, #4
 8006a42:	4013      	ands	r3, r2
 8006a44:	d009      	beq.n	8006a5a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006a46:	4b14      	ldr	r3, [pc, #80]	; (8006a98 <HAL_RCC_ClockConfig+0x1f8>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	4a15      	ldr	r2, [pc, #84]	; (8006aa0 <HAL_RCC_ClockConfig+0x200>)
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	0019      	movs	r1, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	4b10      	ldr	r3, [pc, #64]	; (8006a98 <HAL_RCC_ClockConfig+0x1f8>)
 8006a56:	430a      	orrs	r2, r1
 8006a58:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006a5a:	f000 f829 	bl	8006ab0 <HAL_RCC_GetSysClockFreq>
 8006a5e:	0001      	movs	r1, r0
 8006a60:	4b0d      	ldr	r3, [pc, #52]	; (8006a98 <HAL_RCC_ClockConfig+0x1f8>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	0a1b      	lsrs	r3, r3, #8
 8006a66:	220f      	movs	r2, #15
 8006a68:	401a      	ands	r2, r3
 8006a6a:	4b0e      	ldr	r3, [pc, #56]	; (8006aa4 <HAL_RCC_ClockConfig+0x204>)
 8006a6c:	0092      	lsls	r2, r2, #2
 8006a6e:	58d3      	ldr	r3, [r2, r3]
 8006a70:	221f      	movs	r2, #31
 8006a72:	4013      	ands	r3, r2
 8006a74:	000a      	movs	r2, r1
 8006a76:	40da      	lsrs	r2, r3
 8006a78:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <HAL_RCC_ClockConfig+0x208>)
 8006a7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a7c:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <HAL_RCC_ClockConfig+0x20c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	0018      	movs	r0, r3
 8006a82:	f7fe f839 	bl	8004af8 <HAL_InitTick>
 8006a86:	0003      	movs	r3, r0
}
 8006a88:	0018      	movs	r0, r3
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	b004      	add	sp, #16
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	40022000 	.word	0x40022000
 8006a94:	00001388 	.word	0x00001388
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	fffff0ff 	.word	0xfffff0ff
 8006aa0:	ffff8fff 	.word	0xffff8fff
 8006aa4:	08008158 	.word	0x08008158
 8006aa8:	20000004 	.word	0x20000004
 8006aac:	20000008 	.word	0x20000008

08006ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ab6:	4b3c      	ldr	r3, [pc, #240]	; (8006ba8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2238      	movs	r2, #56	; 0x38
 8006abc:	4013      	ands	r3, r2
 8006abe:	d10f      	bne.n	8006ae0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006ac0:	4b39      	ldr	r3, [pc, #228]	; (8006ba8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	0adb      	lsrs	r3, r3, #11
 8006ac6:	2207      	movs	r2, #7
 8006ac8:	4013      	ands	r3, r2
 8006aca:	2201      	movs	r2, #1
 8006acc:	409a      	lsls	r2, r3
 8006ace:	0013      	movs	r3, r2
 8006ad0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	4835      	ldr	r0, [pc, #212]	; (8006bac <HAL_RCC_GetSysClockFreq+0xfc>)
 8006ad6:	f7f9 fb15 	bl	8000104 <__udivsi3>
 8006ada:	0003      	movs	r3, r0
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	e05d      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ae0:	4b31      	ldr	r3, [pc, #196]	; (8006ba8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	2238      	movs	r2, #56	; 0x38
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d102      	bne.n	8006af2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006aec:	4b30      	ldr	r3, [pc, #192]	; (8006bb0 <HAL_RCC_GetSysClockFreq+0x100>)
 8006aee:	613b      	str	r3, [r7, #16]
 8006af0:	e054      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006af2:	4b2d      	ldr	r3, [pc, #180]	; (8006ba8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	2238      	movs	r2, #56	; 0x38
 8006af8:	4013      	ands	r3, r2
 8006afa:	2b10      	cmp	r3, #16
 8006afc:	d138      	bne.n	8006b70 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006afe:	4b2a      	ldr	r3, [pc, #168]	; (8006ba8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	2203      	movs	r2, #3
 8006b04:	4013      	ands	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b08:	4b27      	ldr	r3, [pc, #156]	; (8006ba8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	091b      	lsrs	r3, r3, #4
 8006b0e:	2207      	movs	r2, #7
 8006b10:	4013      	ands	r3, r2
 8006b12:	3301      	adds	r3, #1
 8006b14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d10d      	bne.n	8006b38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b1c:	68b9      	ldr	r1, [r7, #8]
 8006b1e:	4824      	ldr	r0, [pc, #144]	; (8006bb0 <HAL_RCC_GetSysClockFreq+0x100>)
 8006b20:	f7f9 faf0 	bl	8000104 <__udivsi3>
 8006b24:	0003      	movs	r3, r0
 8006b26:	0019      	movs	r1, r3
 8006b28:	4b1f      	ldr	r3, [pc, #124]	; (8006ba8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	0a1b      	lsrs	r3, r3, #8
 8006b2e:	227f      	movs	r2, #127	; 0x7f
 8006b30:	4013      	ands	r3, r2
 8006b32:	434b      	muls	r3, r1
 8006b34:	617b      	str	r3, [r7, #20]
        break;
 8006b36:	e00d      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	481c      	ldr	r0, [pc, #112]	; (8006bac <HAL_RCC_GetSysClockFreq+0xfc>)
 8006b3c:	f7f9 fae2 	bl	8000104 <__udivsi3>
 8006b40:	0003      	movs	r3, r0
 8006b42:	0019      	movs	r1, r3
 8006b44:	4b18      	ldr	r3, [pc, #96]	; (8006ba8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	0a1b      	lsrs	r3, r3, #8
 8006b4a:	227f      	movs	r2, #127	; 0x7f
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	434b      	muls	r3, r1
 8006b50:	617b      	str	r3, [r7, #20]
        break;
 8006b52:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006b54:	4b14      	ldr	r3, [pc, #80]	; (8006ba8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	0f5b      	lsrs	r3, r3, #29
 8006b5a:	2207      	movs	r2, #7
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	3301      	adds	r3, #1
 8006b60:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	6978      	ldr	r0, [r7, #20]
 8006b66:	f7f9 facd 	bl	8000104 <__udivsi3>
 8006b6a:	0003      	movs	r3, r0
 8006b6c:	613b      	str	r3, [r7, #16]
 8006b6e:	e015      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006b70:	4b0d      	ldr	r3, [pc, #52]	; (8006ba8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	2238      	movs	r2, #56	; 0x38
 8006b76:	4013      	ands	r3, r2
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d103      	bne.n	8006b84 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006b7c:	2380      	movs	r3, #128	; 0x80
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	613b      	str	r3, [r7, #16]
 8006b82:	e00b      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006b84:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	2238      	movs	r2, #56	; 0x38
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	2b18      	cmp	r3, #24
 8006b8e:	d103      	bne.n	8006b98 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006b90:	23fa      	movs	r3, #250	; 0xfa
 8006b92:	01db      	lsls	r3, r3, #7
 8006b94:	613b      	str	r3, [r7, #16]
 8006b96:	e001      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006b9c:	693b      	ldr	r3, [r7, #16]
}
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	b006      	add	sp, #24
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	40021000 	.word	0x40021000
 8006bac:	00f42400 	.word	0x00f42400
 8006bb0:	007a1200 	.word	0x007a1200

08006bb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bb8:	4b02      	ldr	r3, [pc, #8]	; (8006bc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8006bba:	681b      	ldr	r3, [r3, #0]
}
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	46c0      	nop			; (mov r8, r8)
 8006bc4:	20000004 	.word	0x20000004

08006bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bc8:	b5b0      	push	{r4, r5, r7, lr}
 8006bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006bcc:	f7ff fff2 	bl	8006bb4 <HAL_RCC_GetHCLKFreq>
 8006bd0:	0004      	movs	r4, r0
 8006bd2:	f7ff faf9 	bl	80061c8 <LL_RCC_GetAPB1Prescaler>
 8006bd6:	0003      	movs	r3, r0
 8006bd8:	0b1a      	lsrs	r2, r3, #12
 8006bda:	4b05      	ldr	r3, [pc, #20]	; (8006bf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bdc:	0092      	lsls	r2, r2, #2
 8006bde:	58d3      	ldr	r3, [r2, r3]
 8006be0:	221f      	movs	r2, #31
 8006be2:	4013      	ands	r3, r2
 8006be4:	40dc      	lsrs	r4, r3
 8006be6:	0023      	movs	r3, r4
}
 8006be8:	0018      	movs	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bdb0      	pop	{r4, r5, r7, pc}
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	08008198 	.word	0x08008198

08006bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006bfc:	2313      	movs	r3, #19
 8006bfe:	18fb      	adds	r3, r7, r3
 8006c00:	2200      	movs	r2, #0
 8006c02:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c04:	2312      	movs	r3, #18
 8006c06:	18fb      	adds	r3, r7, r3
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	2380      	movs	r3, #128	; 0x80
 8006c12:	029b      	lsls	r3, r3, #10
 8006c14:	4013      	ands	r3, r2
 8006c16:	d100      	bne.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006c18:	e0ad      	b.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c1a:	2011      	movs	r0, #17
 8006c1c:	183b      	adds	r3, r7, r0
 8006c1e:	2200      	movs	r2, #0
 8006c20:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c22:	4b47      	ldr	r3, [pc, #284]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c26:	2380      	movs	r3, #128	; 0x80
 8006c28:	055b      	lsls	r3, r3, #21
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	d110      	bne.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c2e:	4b44      	ldr	r3, [pc, #272]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006c30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c32:	4b43      	ldr	r3, [pc, #268]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006c34:	2180      	movs	r1, #128	; 0x80
 8006c36:	0549      	lsls	r1, r1, #21
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8006c3c:	4b40      	ldr	r3, [pc, #256]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	055b      	lsls	r3, r3, #21
 8006c44:	4013      	ands	r3, r2
 8006c46:	60bb      	str	r3, [r7, #8]
 8006c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c4a:	183b      	adds	r3, r7, r0
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c50:	4b3c      	ldr	r3, [pc, #240]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	4b3b      	ldr	r3, [pc, #236]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006c56:	2180      	movs	r1, #128	; 0x80
 8006c58:	0049      	lsls	r1, r1, #1
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c5e:	f7fd ffa7 	bl	8004bb0 <HAL_GetTick>
 8006c62:	0003      	movs	r3, r0
 8006c64:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c66:	e00b      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c68:	f7fd ffa2 	bl	8004bb0 <HAL_GetTick>
 8006c6c:	0002      	movs	r2, r0
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d904      	bls.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006c76:	2313      	movs	r3, #19
 8006c78:	18fb      	adds	r3, r7, r3
 8006c7a:	2203      	movs	r2, #3
 8006c7c:	701a      	strb	r2, [r3, #0]
        break;
 8006c7e:	e005      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c80:	4b30      	ldr	r3, [pc, #192]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	2380      	movs	r3, #128	; 0x80
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	4013      	ands	r3, r2
 8006c8a:	d0ed      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006c8c:	2313      	movs	r3, #19
 8006c8e:	18fb      	adds	r3, r7, r3
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d15e      	bne.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c96:	4b2a      	ldr	r3, [pc, #168]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006c98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c9a:	23c0      	movs	r3, #192	; 0xc0
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d019      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d014      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006cb2:	4b23      	ldr	r3, [pc, #140]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb6:	4a24      	ldr	r2, [pc, #144]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cbc:	4b20      	ldr	r3, [pc, #128]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cc0:	4b1f      	ldr	r3, [pc, #124]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cc2:	2180      	movs	r1, #128	; 0x80
 8006cc4:	0249      	lsls	r1, r1, #9
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cca:	4b1d      	ldr	r3, [pc, #116]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ccc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cce:	4b1c      	ldr	r3, [pc, #112]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cd0:	491e      	ldr	r1, [pc, #120]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8006cd2:	400a      	ands	r2, r1
 8006cd4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006cd6:	4b1a      	ldr	r3, [pc, #104]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	d016      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce4:	f7fd ff64 	bl	8004bb0 <HAL_GetTick>
 8006ce8:	0003      	movs	r3, r0
 8006cea:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cec:	e00c      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cee:	f7fd ff5f 	bl	8004bb0 <HAL_GetTick>
 8006cf2:	0002      	movs	r2, r0
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	4a15      	ldr	r2, [pc, #84]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d904      	bls.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006cfe:	2313      	movs	r3, #19
 8006d00:	18fb      	adds	r3, r7, r3
 8006d02:	2203      	movs	r2, #3
 8006d04:	701a      	strb	r2, [r3, #0]
            break;
 8006d06:	e004      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d08:	4b0d      	ldr	r3, [pc, #52]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	4013      	ands	r3, r2
 8006d10:	d0ed      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006d12:	2313      	movs	r3, #19
 8006d14:	18fb      	adds	r3, r7, r3
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d1c:	4b08      	ldr	r3, [pc, #32]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d20:	4a09      	ldr	r2, [pc, #36]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006d22:	4013      	ands	r3, r2
 8006d24:	0019      	movs	r1, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d2a:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d30:	e016      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d32:	2312      	movs	r3, #18
 8006d34:	18fb      	adds	r3, r7, r3
 8006d36:	2213      	movs	r2, #19
 8006d38:	18ba      	adds	r2, r7, r2
 8006d3a:	7812      	ldrb	r2, [r2, #0]
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	e00f      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006d40:	40021000 	.word	0x40021000
 8006d44:	40007000 	.word	0x40007000
 8006d48:	fffffcff 	.word	0xfffffcff
 8006d4c:	fffeffff 	.word	0xfffeffff
 8006d50:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d54:	2312      	movs	r3, #18
 8006d56:	18fb      	adds	r3, r7, r3
 8006d58:	2213      	movs	r2, #19
 8006d5a:	18ba      	adds	r2, r7, r2
 8006d5c:	7812      	ldrb	r2, [r2, #0]
 8006d5e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d60:	2311      	movs	r3, #17
 8006d62:	18fb      	adds	r3, r7, r3
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d105      	bne.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d6a:	4bb6      	ldr	r3, [pc, #728]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d6e:	4bb5      	ldr	r3, [pc, #724]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d70:	49b5      	ldr	r1, [pc, #724]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8006d72:	400a      	ands	r2, r1
 8006d74:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	d009      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d80:	4bb0      	ldr	r3, [pc, #704]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d84:	2203      	movs	r2, #3
 8006d86:	4393      	bics	r3, r2
 8006d88:	0019      	movs	r1, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	4bad      	ldr	r3, [pc, #692]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d90:	430a      	orrs	r2, r1
 8006d92:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2202      	movs	r2, #2
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	d009      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d9e:	4ba9      	ldr	r3, [pc, #676]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da2:	220c      	movs	r2, #12
 8006da4:	4393      	bics	r3, r2
 8006da6:	0019      	movs	r1, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	4ba5      	ldr	r3, [pc, #660]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dae:	430a      	orrs	r2, r1
 8006db0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2204      	movs	r2, #4
 8006db8:	4013      	ands	r3, r2
 8006dba:	d009      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006dbc:	4ba1      	ldr	r3, [pc, #644]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc0:	2230      	movs	r2, #48	; 0x30
 8006dc2:	4393      	bics	r3, r2
 8006dc4:	0019      	movs	r1, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	4b9e      	ldr	r3, [pc, #632]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	d009      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006dda:	4b9a      	ldr	r3, [pc, #616]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dde:	4a9b      	ldr	r2, [pc, #620]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	0019      	movs	r1, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691a      	ldr	r2, [r3, #16]
 8006de8:	4b96      	ldr	r3, [pc, #600]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dea:	430a      	orrs	r2, r1
 8006dec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	2380      	movs	r3, #128	; 0x80
 8006df4:	015b      	lsls	r3, r3, #5
 8006df6:	4013      	ands	r3, r2
 8006df8:	d009      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8006dfa:	4b92      	ldr	r3, [pc, #584]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfe:	4a94      	ldr	r2, [pc, #592]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006e00:	4013      	ands	r3, r2
 8006e02:	0019      	movs	r1, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	695a      	ldr	r2, [r3, #20]
 8006e08:	4b8e      	ldr	r3, [pc, #568]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	2380      	movs	r3, #128	; 0x80
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4013      	ands	r3, r2
 8006e18:	d009      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e1a:	4b8a      	ldr	r3, [pc, #552]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1e:	4a8d      	ldr	r2, [pc, #564]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	0019      	movs	r1, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e28:	4b86      	ldr	r3, [pc, #536]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	2380      	movs	r3, #128	; 0x80
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	4013      	ands	r3, r2
 8006e38:	d009      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e3a:	4b82      	ldr	r3, [pc, #520]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3e:	4a86      	ldr	r2, [pc, #536]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	0019      	movs	r1, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e48:	4b7e      	ldr	r3, [pc, #504]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2220      	movs	r2, #32
 8006e54:	4013      	ands	r3, r2
 8006e56:	d009      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e58:	4b7a      	ldr	r3, [pc, #488]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5c:	4a7f      	ldr	r2, [pc, #508]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	0019      	movs	r1, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	4b77      	ldr	r3, [pc, #476]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2240      	movs	r2, #64	; 0x40
 8006e72:	4013      	ands	r3, r2
 8006e74:	d009      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e76:	4b73      	ldr	r3, [pc, #460]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7a:	4a79      	ldr	r2, [pc, #484]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	0019      	movs	r1, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	69da      	ldr	r2, [r3, #28]
 8006e84:	4b6f      	ldr	r3, [pc, #444]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e86:	430a      	orrs	r2, r1
 8006e88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	2380      	movs	r3, #128	; 0x80
 8006e90:	01db      	lsls	r3, r3, #7
 8006e92:	4013      	ands	r3, r2
 8006e94:	d015      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e96:	4b6b      	ldr	r3, [pc, #428]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	0899      	lsrs	r1, r3, #2
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ea2:	4b68      	ldr	r3, [pc, #416]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eac:	2380      	movs	r3, #128	; 0x80
 8006eae:	05db      	lsls	r3, r3, #23
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d106      	bne.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006eb4:	4b63      	ldr	r3, [pc, #396]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	4b62      	ldr	r3, [pc, #392]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006eba:	2180      	movs	r1, #128	; 0x80
 8006ebc:	0249      	lsls	r1, r1, #9
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	2380      	movs	r3, #128	; 0x80
 8006ec8:	031b      	lsls	r3, r3, #12
 8006eca:	4013      	ands	r3, r2
 8006ecc:	d009      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ece:	4b5d      	ldr	r3, [pc, #372]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed2:	2240      	movs	r2, #64	; 0x40
 8006ed4:	4393      	bics	r3, r2
 8006ed6:	0019      	movs	r1, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006edc:	4b59      	ldr	r3, [pc, #356]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	2380      	movs	r3, #128	; 0x80
 8006ee8:	039b      	lsls	r3, r3, #14
 8006eea:	4013      	ands	r3, r2
 8006eec:	d016      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006eee:	4b55      	ldr	r3, [pc, #340]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef2:	4a5c      	ldr	r2, [pc, #368]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	0019      	movs	r1, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006efc:	4b51      	ldr	r3, [pc, #324]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006efe:	430a      	orrs	r2, r1
 8006f00:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f06:	2380      	movs	r3, #128	; 0x80
 8006f08:	03db      	lsls	r3, r3, #15
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d106      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006f0e:	4b4d      	ldr	r3, [pc, #308]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	4b4c      	ldr	r3, [pc, #304]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f14:	2180      	movs	r1, #128	; 0x80
 8006f16:	0449      	lsls	r1, r1, #17
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	2380      	movs	r3, #128	; 0x80
 8006f22:	03db      	lsls	r3, r3, #15
 8006f24:	4013      	ands	r3, r2
 8006f26:	d016      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006f28:	4b46      	ldr	r3, [pc, #280]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2c:	4a4e      	ldr	r2, [pc, #312]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006f2e:	4013      	ands	r3, r2
 8006f30:	0019      	movs	r1, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f36:	4b43      	ldr	r3, [pc, #268]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f40:	2380      	movs	r3, #128	; 0x80
 8006f42:	045b      	lsls	r3, r3, #17
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d106      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006f48:	4b3e      	ldr	r3, [pc, #248]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	4b3d      	ldr	r3, [pc, #244]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f4e:	2180      	movs	r1, #128	; 0x80
 8006f50:	0449      	lsls	r1, r1, #17
 8006f52:	430a      	orrs	r2, r1
 8006f54:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	2380      	movs	r3, #128	; 0x80
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	4013      	ands	r3, r2
 8006f60:	d014      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006f62:	4b38      	ldr	r3, [pc, #224]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f66:	2203      	movs	r2, #3
 8006f68:	4393      	bics	r3, r2
 8006f6a:	0019      	movs	r1, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1a      	ldr	r2, [r3, #32]
 8006f70:	4b34      	ldr	r3, [pc, #208]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f72:	430a      	orrs	r2, r1
 8006f74:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d106      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006f7e:	4b31      	ldr	r3, [pc, #196]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	4b30      	ldr	r3, [pc, #192]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f84:	2180      	movs	r1, #128	; 0x80
 8006f86:	0249      	lsls	r1, r1, #9
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	2380      	movs	r3, #128	; 0x80
 8006f92:	019b      	lsls	r3, r3, #6
 8006f94:	4013      	ands	r3, r2
 8006f96:	d014      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006f98:	4b2a      	ldr	r3, [pc, #168]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9c:	220c      	movs	r2, #12
 8006f9e:	4393      	bics	r3, r2
 8006fa0:	0019      	movs	r1, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fa6:	4b27      	ldr	r3, [pc, #156]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d106      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006fb4:	4b23      	ldr	r3, [pc, #140]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fb6:	68da      	ldr	r2, [r3, #12]
 8006fb8:	4b22      	ldr	r3, [pc, #136]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fba:	2180      	movs	r1, #128	; 0x80
 8006fbc:	0249      	lsls	r1, r1, #9
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	2380      	movs	r3, #128	; 0x80
 8006fc8:	045b      	lsls	r3, r3, #17
 8006fca:	4013      	ands	r3, r2
 8006fcc:	d016      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fce:	4b1d      	ldr	r3, [pc, #116]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd2:	4a22      	ldr	r2, [pc, #136]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	0019      	movs	r1, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fdc:	4b19      	ldr	r3, [pc, #100]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fe6:	2380      	movs	r3, #128	; 0x80
 8006fe8:	019b      	lsls	r3, r3, #6
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d106      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006fee:	4b15      	ldr	r3, [pc, #84]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ff0:	68da      	ldr	r2, [r3, #12]
 8006ff2:	4b14      	ldr	r3, [pc, #80]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ff4:	2180      	movs	r1, #128	; 0x80
 8006ff6:	0449      	lsls	r1, r1, #17
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	2380      	movs	r3, #128	; 0x80
 8007002:	049b      	lsls	r3, r3, #18
 8007004:	4013      	ands	r3, r2
 8007006:	d016      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007008:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800700a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700c:	4a10      	ldr	r2, [pc, #64]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800700e:	4013      	ands	r3, r2
 8007010:	0019      	movs	r1, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007016:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007018:	430a      	orrs	r2, r1
 800701a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007020:	2380      	movs	r3, #128	; 0x80
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	429a      	cmp	r2, r3
 8007026:	d106      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007028:	4b06      	ldr	r3, [pc, #24]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800702e:	2180      	movs	r1, #128	; 0x80
 8007030:	0449      	lsls	r1, r1, #17
 8007032:	430a      	orrs	r2, r1
 8007034:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007036:	2312      	movs	r3, #18
 8007038:	18fb      	adds	r3, r7, r3
 800703a:	781b      	ldrb	r3, [r3, #0]
}
 800703c:	0018      	movs	r0, r3
 800703e:	46bd      	mov	sp, r7
 8007040:	b006      	add	sp, #24
 8007042:	bd80      	pop	{r7, pc}
 8007044:	40021000 	.word	0x40021000
 8007048:	efffffff 	.word	0xefffffff
 800704c:	fffff3ff 	.word	0xfffff3ff
 8007050:	fffffcff 	.word	0xfffffcff
 8007054:	fff3ffff 	.word	0xfff3ffff
 8007058:	ffcfffff 	.word	0xffcfffff
 800705c:	ffffcfff 	.word	0xffffcfff
 8007060:	ffff3fff 	.word	0xffff3fff
 8007064:	ffbfffff 	.word	0xffbfffff
 8007068:	feffffff 	.word	0xfeffffff

0800706c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e046      	b.n	800710c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2288      	movs	r2, #136	; 0x88
 8007082:	589b      	ldr	r3, [r3, r2]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d107      	bne.n	8007098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2284      	movs	r2, #132	; 0x84
 800708c:	2100      	movs	r1, #0
 800708e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	0018      	movs	r0, r3
 8007094:	f7fd fc6a 	bl	800496c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2288      	movs	r2, #136	; 0x88
 800709c:	2124      	movs	r1, #36	; 0x24
 800709e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2101      	movs	r1, #1
 80070ac:	438a      	bics	r2, r1
 80070ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	0018      	movs	r0, r3
 80070bc:	f000 fc26 	bl	800790c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	0018      	movs	r0, r3
 80070c4:	f000 f8cc 	bl	8007260 <UART_SetConfig>
 80070c8:	0003      	movs	r3, r0
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e01c      	b.n	800710c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	490d      	ldr	r1, [pc, #52]	; (8007114 <HAL_UART_Init+0xa8>)
 80070de:	400a      	ands	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	212a      	movs	r1, #42	; 0x2a
 80070ee:	438a      	bics	r2, r1
 80070f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2101      	movs	r1, #1
 80070fe:	430a      	orrs	r2, r1
 8007100:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	0018      	movs	r0, r3
 8007106:	f000 fcb5 	bl	8007a74 <UART_CheckIdleState>
 800710a:	0003      	movs	r3, r0
}
 800710c:	0018      	movs	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	b002      	add	sp, #8
 8007112:	bd80      	pop	{r7, pc}
 8007114:	ffffb7ff 	.word	0xffffb7ff

08007118 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08a      	sub	sp, #40	; 0x28
 800711c:	af02      	add	r7, sp, #8
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	1dbb      	adds	r3, r7, #6
 8007126:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2288      	movs	r2, #136	; 0x88
 800712c:	589b      	ldr	r3, [r3, r2]
 800712e:	2b20      	cmp	r3, #32
 8007130:	d000      	beq.n	8007134 <HAL_UART_Transmit+0x1c>
 8007132:	e090      	b.n	8007256 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_UART_Transmit+0x2a>
 800713a:	1dbb      	adds	r3, r7, #6
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e088      	b.n	8007258 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	2380      	movs	r3, #128	; 0x80
 800714c:	015b      	lsls	r3, r3, #5
 800714e:	429a      	cmp	r2, r3
 8007150:	d109      	bne.n	8007166 <HAL_UART_Transmit+0x4e>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d105      	bne.n	8007166 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2201      	movs	r2, #1
 800715e:	4013      	ands	r3, r2
 8007160:	d001      	beq.n	8007166 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e078      	b.n	8007258 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2290      	movs	r2, #144	; 0x90
 800716a:	2100      	movs	r1, #0
 800716c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2288      	movs	r2, #136	; 0x88
 8007172:	2121      	movs	r1, #33	; 0x21
 8007174:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007176:	f7fd fd1b 	bl	8004bb0 <HAL_GetTick>
 800717a:	0003      	movs	r3, r0
 800717c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	1dba      	adds	r2, r7, #6
 8007182:	2154      	movs	r1, #84	; 0x54
 8007184:	8812      	ldrh	r2, [r2, #0]
 8007186:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	1dba      	adds	r2, r7, #6
 800718c:	2156      	movs	r1, #86	; 0x56
 800718e:	8812      	ldrh	r2, [r2, #0]
 8007190:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	2380      	movs	r3, #128	; 0x80
 8007198:	015b      	lsls	r3, r3, #5
 800719a:	429a      	cmp	r2, r3
 800719c:	d108      	bne.n	80071b0 <HAL_UART_Transmit+0x98>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d104      	bne.n	80071b0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	e003      	b.n	80071b8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071b4:	2300      	movs	r3, #0
 80071b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071b8:	e030      	b.n	800721c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	0013      	movs	r3, r2
 80071c4:	2200      	movs	r2, #0
 80071c6:	2180      	movs	r1, #128	; 0x80
 80071c8:	f000 fcfe 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 80071cc:	1e03      	subs	r3, r0, #0
 80071ce:	d005      	beq.n	80071dc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2288      	movs	r2, #136	; 0x88
 80071d4:	2120      	movs	r1, #32
 80071d6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e03d      	b.n	8007258 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10b      	bne.n	80071fa <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	001a      	movs	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	05d2      	lsls	r2, r2, #23
 80071ee:	0dd2      	lsrs	r2, r2, #23
 80071f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	3302      	adds	r3, #2
 80071f6:	61bb      	str	r3, [r7, #24]
 80071f8:	e007      	b.n	800720a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	781a      	ldrb	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	3301      	adds	r3, #1
 8007208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2256      	movs	r2, #86	; 0x56
 800720e:	5a9b      	ldrh	r3, [r3, r2]
 8007210:	b29b      	uxth	r3, r3
 8007212:	3b01      	subs	r3, #1
 8007214:	b299      	uxth	r1, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2256      	movs	r2, #86	; 0x56
 800721a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2256      	movs	r2, #86	; 0x56
 8007220:	5a9b      	ldrh	r3, [r3, r2]
 8007222:	b29b      	uxth	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1c8      	bne.n	80071ba <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	0013      	movs	r3, r2
 8007232:	2200      	movs	r2, #0
 8007234:	2140      	movs	r1, #64	; 0x40
 8007236:	f000 fcc7 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 800723a:	1e03      	subs	r3, r0, #0
 800723c:	d005      	beq.n	800724a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2288      	movs	r2, #136	; 0x88
 8007242:	2120      	movs	r1, #32
 8007244:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e006      	b.n	8007258 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2288      	movs	r2, #136	; 0x88
 800724e:	2120      	movs	r1, #32
 8007250:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	e000      	b.n	8007258 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007256:	2302      	movs	r3, #2
  }
}
 8007258:	0018      	movs	r0, r3
 800725a:	46bd      	mov	sp, r7
 800725c:	b008      	add	sp, #32
 800725e:	bd80      	pop	{r7, pc}

08007260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007260:	b5b0      	push	{r4, r5, r7, lr}
 8007262:	b090      	sub	sp, #64	; 0x40
 8007264:	af00      	add	r7, sp, #0
 8007266:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007268:	231a      	movs	r3, #26
 800726a:	2220      	movs	r2, #32
 800726c:	189b      	adds	r3, r3, r2
 800726e:	19db      	adds	r3, r3, r7
 8007270:	2200      	movs	r2, #0
 8007272:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	431a      	orrs	r2, r3
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	431a      	orrs	r2, r3
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	4313      	orrs	r3, r2
 800728a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4ac1      	ldr	r2, [pc, #772]	; (8007598 <UART_SetConfig+0x338>)
 8007294:	4013      	ands	r3, r2
 8007296:	0019      	movs	r1, r3
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729e:	430b      	orrs	r3, r1
 80072a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	4abc      	ldr	r2, [pc, #752]	; (800759c <UART_SetConfig+0x33c>)
 80072aa:	4013      	ands	r3, r2
 80072ac:	0018      	movs	r0, r3
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	68d9      	ldr	r1, [r3, #12]
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	0003      	movs	r3, r0
 80072b8:	430b      	orrs	r3, r1
 80072ba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4ab6      	ldr	r2, [pc, #728]	; (80075a0 <UART_SetConfig+0x340>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d009      	beq.n	80072e0 <UART_SetConfig+0x80>
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4ab4      	ldr	r2, [pc, #720]	; (80075a4 <UART_SetConfig+0x344>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d004      	beq.n	80072e0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072dc:	4313      	orrs	r3, r2
 80072de:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	4ab0      	ldr	r2, [pc, #704]	; (80075a8 <UART_SetConfig+0x348>)
 80072e8:	4013      	ands	r3, r2
 80072ea:	0019      	movs	r1, r3
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f2:	430b      	orrs	r3, r1
 80072f4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	220f      	movs	r2, #15
 80072fe:	4393      	bics	r3, r2
 8007300:	0018      	movs	r0, r3
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	0003      	movs	r3, r0
 800730c:	430b      	orrs	r3, r1
 800730e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4aa5      	ldr	r2, [pc, #660]	; (80075ac <UART_SetConfig+0x34c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d131      	bne.n	800737e <UART_SetConfig+0x11e>
 800731a:	4ba5      	ldr	r3, [pc, #660]	; (80075b0 <UART_SetConfig+0x350>)
 800731c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731e:	2203      	movs	r2, #3
 8007320:	4013      	ands	r3, r2
 8007322:	2b03      	cmp	r3, #3
 8007324:	d01d      	beq.n	8007362 <UART_SetConfig+0x102>
 8007326:	d823      	bhi.n	8007370 <UART_SetConfig+0x110>
 8007328:	2b02      	cmp	r3, #2
 800732a:	d00c      	beq.n	8007346 <UART_SetConfig+0xe6>
 800732c:	d820      	bhi.n	8007370 <UART_SetConfig+0x110>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <UART_SetConfig+0xd8>
 8007332:	2b01      	cmp	r3, #1
 8007334:	d00e      	beq.n	8007354 <UART_SetConfig+0xf4>
 8007336:	e01b      	b.n	8007370 <UART_SetConfig+0x110>
 8007338:	231b      	movs	r3, #27
 800733a:	2220      	movs	r2, #32
 800733c:	189b      	adds	r3, r3, r2
 800733e:	19db      	adds	r3, r3, r7
 8007340:	2200      	movs	r2, #0
 8007342:	701a      	strb	r2, [r3, #0]
 8007344:	e154      	b.n	80075f0 <UART_SetConfig+0x390>
 8007346:	231b      	movs	r3, #27
 8007348:	2220      	movs	r2, #32
 800734a:	189b      	adds	r3, r3, r2
 800734c:	19db      	adds	r3, r3, r7
 800734e:	2202      	movs	r2, #2
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	e14d      	b.n	80075f0 <UART_SetConfig+0x390>
 8007354:	231b      	movs	r3, #27
 8007356:	2220      	movs	r2, #32
 8007358:	189b      	adds	r3, r3, r2
 800735a:	19db      	adds	r3, r3, r7
 800735c:	2204      	movs	r2, #4
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	e146      	b.n	80075f0 <UART_SetConfig+0x390>
 8007362:	231b      	movs	r3, #27
 8007364:	2220      	movs	r2, #32
 8007366:	189b      	adds	r3, r3, r2
 8007368:	19db      	adds	r3, r3, r7
 800736a:	2208      	movs	r2, #8
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	e13f      	b.n	80075f0 <UART_SetConfig+0x390>
 8007370:	231b      	movs	r3, #27
 8007372:	2220      	movs	r2, #32
 8007374:	189b      	adds	r3, r3, r2
 8007376:	19db      	adds	r3, r3, r7
 8007378:	2210      	movs	r2, #16
 800737a:	701a      	strb	r2, [r3, #0]
 800737c:	e138      	b.n	80075f0 <UART_SetConfig+0x390>
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a8c      	ldr	r2, [pc, #560]	; (80075b4 <UART_SetConfig+0x354>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d131      	bne.n	80073ec <UART_SetConfig+0x18c>
 8007388:	4b89      	ldr	r3, [pc, #548]	; (80075b0 <UART_SetConfig+0x350>)
 800738a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738c:	220c      	movs	r2, #12
 800738e:	4013      	ands	r3, r2
 8007390:	2b0c      	cmp	r3, #12
 8007392:	d01d      	beq.n	80073d0 <UART_SetConfig+0x170>
 8007394:	d823      	bhi.n	80073de <UART_SetConfig+0x17e>
 8007396:	2b08      	cmp	r3, #8
 8007398:	d00c      	beq.n	80073b4 <UART_SetConfig+0x154>
 800739a:	d820      	bhi.n	80073de <UART_SetConfig+0x17e>
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <UART_SetConfig+0x146>
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	d00e      	beq.n	80073c2 <UART_SetConfig+0x162>
 80073a4:	e01b      	b.n	80073de <UART_SetConfig+0x17e>
 80073a6:	231b      	movs	r3, #27
 80073a8:	2220      	movs	r2, #32
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	19db      	adds	r3, r3, r7
 80073ae:	2200      	movs	r2, #0
 80073b0:	701a      	strb	r2, [r3, #0]
 80073b2:	e11d      	b.n	80075f0 <UART_SetConfig+0x390>
 80073b4:	231b      	movs	r3, #27
 80073b6:	2220      	movs	r2, #32
 80073b8:	189b      	adds	r3, r3, r2
 80073ba:	19db      	adds	r3, r3, r7
 80073bc:	2202      	movs	r2, #2
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	e116      	b.n	80075f0 <UART_SetConfig+0x390>
 80073c2:	231b      	movs	r3, #27
 80073c4:	2220      	movs	r2, #32
 80073c6:	189b      	adds	r3, r3, r2
 80073c8:	19db      	adds	r3, r3, r7
 80073ca:	2204      	movs	r2, #4
 80073cc:	701a      	strb	r2, [r3, #0]
 80073ce:	e10f      	b.n	80075f0 <UART_SetConfig+0x390>
 80073d0:	231b      	movs	r3, #27
 80073d2:	2220      	movs	r2, #32
 80073d4:	189b      	adds	r3, r3, r2
 80073d6:	19db      	adds	r3, r3, r7
 80073d8:	2208      	movs	r2, #8
 80073da:	701a      	strb	r2, [r3, #0]
 80073dc:	e108      	b.n	80075f0 <UART_SetConfig+0x390>
 80073de:	231b      	movs	r3, #27
 80073e0:	2220      	movs	r2, #32
 80073e2:	189b      	adds	r3, r3, r2
 80073e4:	19db      	adds	r3, r3, r7
 80073e6:	2210      	movs	r2, #16
 80073e8:	701a      	strb	r2, [r3, #0]
 80073ea:	e101      	b.n	80075f0 <UART_SetConfig+0x390>
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a71      	ldr	r2, [pc, #452]	; (80075b8 <UART_SetConfig+0x358>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d131      	bne.n	800745a <UART_SetConfig+0x1fa>
 80073f6:	4b6e      	ldr	r3, [pc, #440]	; (80075b0 <UART_SetConfig+0x350>)
 80073f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fa:	2230      	movs	r2, #48	; 0x30
 80073fc:	4013      	ands	r3, r2
 80073fe:	2b30      	cmp	r3, #48	; 0x30
 8007400:	d01d      	beq.n	800743e <UART_SetConfig+0x1de>
 8007402:	d823      	bhi.n	800744c <UART_SetConfig+0x1ec>
 8007404:	2b20      	cmp	r3, #32
 8007406:	d00c      	beq.n	8007422 <UART_SetConfig+0x1c2>
 8007408:	d820      	bhi.n	800744c <UART_SetConfig+0x1ec>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <UART_SetConfig+0x1b4>
 800740e:	2b10      	cmp	r3, #16
 8007410:	d00e      	beq.n	8007430 <UART_SetConfig+0x1d0>
 8007412:	e01b      	b.n	800744c <UART_SetConfig+0x1ec>
 8007414:	231b      	movs	r3, #27
 8007416:	2220      	movs	r2, #32
 8007418:	189b      	adds	r3, r3, r2
 800741a:	19db      	adds	r3, r3, r7
 800741c:	2200      	movs	r2, #0
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	e0e6      	b.n	80075f0 <UART_SetConfig+0x390>
 8007422:	231b      	movs	r3, #27
 8007424:	2220      	movs	r2, #32
 8007426:	189b      	adds	r3, r3, r2
 8007428:	19db      	adds	r3, r3, r7
 800742a:	2202      	movs	r2, #2
 800742c:	701a      	strb	r2, [r3, #0]
 800742e:	e0df      	b.n	80075f0 <UART_SetConfig+0x390>
 8007430:	231b      	movs	r3, #27
 8007432:	2220      	movs	r2, #32
 8007434:	189b      	adds	r3, r3, r2
 8007436:	19db      	adds	r3, r3, r7
 8007438:	2204      	movs	r2, #4
 800743a:	701a      	strb	r2, [r3, #0]
 800743c:	e0d8      	b.n	80075f0 <UART_SetConfig+0x390>
 800743e:	231b      	movs	r3, #27
 8007440:	2220      	movs	r2, #32
 8007442:	189b      	adds	r3, r3, r2
 8007444:	19db      	adds	r3, r3, r7
 8007446:	2208      	movs	r2, #8
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	e0d1      	b.n	80075f0 <UART_SetConfig+0x390>
 800744c:	231b      	movs	r3, #27
 800744e:	2220      	movs	r2, #32
 8007450:	189b      	adds	r3, r3, r2
 8007452:	19db      	adds	r3, r3, r7
 8007454:	2210      	movs	r2, #16
 8007456:	701a      	strb	r2, [r3, #0]
 8007458:	e0ca      	b.n	80075f0 <UART_SetConfig+0x390>
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a57      	ldr	r2, [pc, #348]	; (80075bc <UART_SetConfig+0x35c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d106      	bne.n	8007472 <UART_SetConfig+0x212>
 8007464:	231b      	movs	r3, #27
 8007466:	2220      	movs	r2, #32
 8007468:	189b      	adds	r3, r3, r2
 800746a:	19db      	adds	r3, r3, r7
 800746c:	2200      	movs	r2, #0
 800746e:	701a      	strb	r2, [r3, #0]
 8007470:	e0be      	b.n	80075f0 <UART_SetConfig+0x390>
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a52      	ldr	r2, [pc, #328]	; (80075c0 <UART_SetConfig+0x360>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d106      	bne.n	800748a <UART_SetConfig+0x22a>
 800747c:	231b      	movs	r3, #27
 800747e:	2220      	movs	r2, #32
 8007480:	189b      	adds	r3, r3, r2
 8007482:	19db      	adds	r3, r3, r7
 8007484:	2200      	movs	r2, #0
 8007486:	701a      	strb	r2, [r3, #0]
 8007488:	e0b2      	b.n	80075f0 <UART_SetConfig+0x390>
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a4d      	ldr	r2, [pc, #308]	; (80075c4 <UART_SetConfig+0x364>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d106      	bne.n	80074a2 <UART_SetConfig+0x242>
 8007494:	231b      	movs	r3, #27
 8007496:	2220      	movs	r2, #32
 8007498:	189b      	adds	r3, r3, r2
 800749a:	19db      	adds	r3, r3, r7
 800749c:	2200      	movs	r2, #0
 800749e:	701a      	strb	r2, [r3, #0]
 80074a0:	e0a6      	b.n	80075f0 <UART_SetConfig+0x390>
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a3e      	ldr	r2, [pc, #248]	; (80075a0 <UART_SetConfig+0x340>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d13e      	bne.n	800752a <UART_SetConfig+0x2ca>
 80074ac:	4b40      	ldr	r3, [pc, #256]	; (80075b0 <UART_SetConfig+0x350>)
 80074ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074b0:	23c0      	movs	r3, #192	; 0xc0
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	4013      	ands	r3, r2
 80074b6:	22c0      	movs	r2, #192	; 0xc0
 80074b8:	0112      	lsls	r2, r2, #4
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d027      	beq.n	800750e <UART_SetConfig+0x2ae>
 80074be:	22c0      	movs	r2, #192	; 0xc0
 80074c0:	0112      	lsls	r2, r2, #4
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d82a      	bhi.n	800751c <UART_SetConfig+0x2bc>
 80074c6:	2280      	movs	r2, #128	; 0x80
 80074c8:	0112      	lsls	r2, r2, #4
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d011      	beq.n	80074f2 <UART_SetConfig+0x292>
 80074ce:	2280      	movs	r2, #128	; 0x80
 80074d0:	0112      	lsls	r2, r2, #4
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d822      	bhi.n	800751c <UART_SetConfig+0x2bc>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d004      	beq.n	80074e4 <UART_SetConfig+0x284>
 80074da:	2280      	movs	r2, #128	; 0x80
 80074dc:	00d2      	lsls	r2, r2, #3
 80074de:	4293      	cmp	r3, r2
 80074e0:	d00e      	beq.n	8007500 <UART_SetConfig+0x2a0>
 80074e2:	e01b      	b.n	800751c <UART_SetConfig+0x2bc>
 80074e4:	231b      	movs	r3, #27
 80074e6:	2220      	movs	r2, #32
 80074e8:	189b      	adds	r3, r3, r2
 80074ea:	19db      	adds	r3, r3, r7
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	e07e      	b.n	80075f0 <UART_SetConfig+0x390>
 80074f2:	231b      	movs	r3, #27
 80074f4:	2220      	movs	r2, #32
 80074f6:	189b      	adds	r3, r3, r2
 80074f8:	19db      	adds	r3, r3, r7
 80074fa:	2202      	movs	r2, #2
 80074fc:	701a      	strb	r2, [r3, #0]
 80074fe:	e077      	b.n	80075f0 <UART_SetConfig+0x390>
 8007500:	231b      	movs	r3, #27
 8007502:	2220      	movs	r2, #32
 8007504:	189b      	adds	r3, r3, r2
 8007506:	19db      	adds	r3, r3, r7
 8007508:	2204      	movs	r2, #4
 800750a:	701a      	strb	r2, [r3, #0]
 800750c:	e070      	b.n	80075f0 <UART_SetConfig+0x390>
 800750e:	231b      	movs	r3, #27
 8007510:	2220      	movs	r2, #32
 8007512:	189b      	adds	r3, r3, r2
 8007514:	19db      	adds	r3, r3, r7
 8007516:	2208      	movs	r2, #8
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	e069      	b.n	80075f0 <UART_SetConfig+0x390>
 800751c:	231b      	movs	r3, #27
 800751e:	2220      	movs	r2, #32
 8007520:	189b      	adds	r3, r3, r2
 8007522:	19db      	adds	r3, r3, r7
 8007524:	2210      	movs	r2, #16
 8007526:	701a      	strb	r2, [r3, #0]
 8007528:	e062      	b.n	80075f0 <UART_SetConfig+0x390>
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a1d      	ldr	r2, [pc, #116]	; (80075a4 <UART_SetConfig+0x344>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d157      	bne.n	80075e4 <UART_SetConfig+0x384>
 8007534:	4b1e      	ldr	r3, [pc, #120]	; (80075b0 <UART_SetConfig+0x350>)
 8007536:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007538:	23c0      	movs	r3, #192	; 0xc0
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4013      	ands	r3, r2
 800753e:	22c0      	movs	r2, #192	; 0xc0
 8007540:	0092      	lsls	r2, r2, #2
 8007542:	4293      	cmp	r3, r2
 8007544:	d040      	beq.n	80075c8 <UART_SetConfig+0x368>
 8007546:	22c0      	movs	r2, #192	; 0xc0
 8007548:	0092      	lsls	r2, r2, #2
 800754a:	4293      	cmp	r3, r2
 800754c:	d843      	bhi.n	80075d6 <UART_SetConfig+0x376>
 800754e:	2280      	movs	r2, #128	; 0x80
 8007550:	0092      	lsls	r2, r2, #2
 8007552:	4293      	cmp	r3, r2
 8007554:	d011      	beq.n	800757a <UART_SetConfig+0x31a>
 8007556:	2280      	movs	r2, #128	; 0x80
 8007558:	0092      	lsls	r2, r2, #2
 800755a:	4293      	cmp	r3, r2
 800755c:	d83b      	bhi.n	80075d6 <UART_SetConfig+0x376>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d004      	beq.n	800756c <UART_SetConfig+0x30c>
 8007562:	2280      	movs	r2, #128	; 0x80
 8007564:	0052      	lsls	r2, r2, #1
 8007566:	4293      	cmp	r3, r2
 8007568:	d00e      	beq.n	8007588 <UART_SetConfig+0x328>
 800756a:	e034      	b.n	80075d6 <UART_SetConfig+0x376>
 800756c:	231b      	movs	r3, #27
 800756e:	2220      	movs	r2, #32
 8007570:	189b      	adds	r3, r3, r2
 8007572:	19db      	adds	r3, r3, r7
 8007574:	2200      	movs	r2, #0
 8007576:	701a      	strb	r2, [r3, #0]
 8007578:	e03a      	b.n	80075f0 <UART_SetConfig+0x390>
 800757a:	231b      	movs	r3, #27
 800757c:	2220      	movs	r2, #32
 800757e:	189b      	adds	r3, r3, r2
 8007580:	19db      	adds	r3, r3, r7
 8007582:	2202      	movs	r2, #2
 8007584:	701a      	strb	r2, [r3, #0]
 8007586:	e033      	b.n	80075f0 <UART_SetConfig+0x390>
 8007588:	231b      	movs	r3, #27
 800758a:	2220      	movs	r2, #32
 800758c:	189b      	adds	r3, r3, r2
 800758e:	19db      	adds	r3, r3, r7
 8007590:	2204      	movs	r2, #4
 8007592:	701a      	strb	r2, [r3, #0]
 8007594:	e02c      	b.n	80075f0 <UART_SetConfig+0x390>
 8007596:	46c0      	nop			; (mov r8, r8)
 8007598:	cfff69f3 	.word	0xcfff69f3
 800759c:	ffffcfff 	.word	0xffffcfff
 80075a0:	40008000 	.word	0x40008000
 80075a4:	40008400 	.word	0x40008400
 80075a8:	11fff4ff 	.word	0x11fff4ff
 80075ac:	40013800 	.word	0x40013800
 80075b0:	40021000 	.word	0x40021000
 80075b4:	40004400 	.word	0x40004400
 80075b8:	40004800 	.word	0x40004800
 80075bc:	40004c00 	.word	0x40004c00
 80075c0:	40005000 	.word	0x40005000
 80075c4:	40013c00 	.word	0x40013c00
 80075c8:	231b      	movs	r3, #27
 80075ca:	2220      	movs	r2, #32
 80075cc:	189b      	adds	r3, r3, r2
 80075ce:	19db      	adds	r3, r3, r7
 80075d0:	2208      	movs	r2, #8
 80075d2:	701a      	strb	r2, [r3, #0]
 80075d4:	e00c      	b.n	80075f0 <UART_SetConfig+0x390>
 80075d6:	231b      	movs	r3, #27
 80075d8:	2220      	movs	r2, #32
 80075da:	189b      	adds	r3, r3, r2
 80075dc:	19db      	adds	r3, r3, r7
 80075de:	2210      	movs	r2, #16
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	e005      	b.n	80075f0 <UART_SetConfig+0x390>
 80075e4:	231b      	movs	r3, #27
 80075e6:	2220      	movs	r2, #32
 80075e8:	189b      	adds	r3, r3, r2
 80075ea:	19db      	adds	r3, r3, r7
 80075ec:	2210      	movs	r2, #16
 80075ee:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4ac1      	ldr	r2, [pc, #772]	; (80078fc <UART_SetConfig+0x69c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d005      	beq.n	8007606 <UART_SetConfig+0x3a6>
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4ac0      	ldr	r2, [pc, #768]	; (8007900 <UART_SetConfig+0x6a0>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d000      	beq.n	8007606 <UART_SetConfig+0x3a6>
 8007604:	e093      	b.n	800772e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007606:	231b      	movs	r3, #27
 8007608:	2220      	movs	r2, #32
 800760a:	189b      	adds	r3, r3, r2
 800760c:	19db      	adds	r3, r3, r7
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b08      	cmp	r3, #8
 8007612:	d015      	beq.n	8007640 <UART_SetConfig+0x3e0>
 8007614:	dc18      	bgt.n	8007648 <UART_SetConfig+0x3e8>
 8007616:	2b04      	cmp	r3, #4
 8007618:	d00d      	beq.n	8007636 <UART_SetConfig+0x3d6>
 800761a:	dc15      	bgt.n	8007648 <UART_SetConfig+0x3e8>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <UART_SetConfig+0x3c6>
 8007620:	2b02      	cmp	r3, #2
 8007622:	d005      	beq.n	8007630 <UART_SetConfig+0x3d0>
 8007624:	e010      	b.n	8007648 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007626:	f7ff facf 	bl	8006bc8 <HAL_RCC_GetPCLK1Freq>
 800762a:	0003      	movs	r3, r0
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800762e:	e014      	b.n	800765a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007630:	4bb4      	ldr	r3, [pc, #720]	; (8007904 <UART_SetConfig+0x6a4>)
 8007632:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007634:	e011      	b.n	800765a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007636:	f7ff fa3b 	bl	8006ab0 <HAL_RCC_GetSysClockFreq>
 800763a:	0003      	movs	r3, r0
 800763c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800763e:	e00c      	b.n	800765a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007640:	2380      	movs	r3, #128	; 0x80
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007646:	e008      	b.n	800765a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800764c:	231a      	movs	r3, #26
 800764e:	2220      	movs	r2, #32
 8007650:	189b      	adds	r3, r3, r2
 8007652:	19db      	adds	r3, r3, r7
 8007654:	2201      	movs	r2, #1
 8007656:	701a      	strb	r2, [r3, #0]
        break;
 8007658:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800765a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765c:	2b00      	cmp	r3, #0
 800765e:	d100      	bne.n	8007662 <UART_SetConfig+0x402>
 8007660:	e135      	b.n	80078ce <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007666:	4ba8      	ldr	r3, [pc, #672]	; (8007908 <UART_SetConfig+0x6a8>)
 8007668:	0052      	lsls	r2, r2, #1
 800766a:	5ad3      	ldrh	r3, [r2, r3]
 800766c:	0019      	movs	r1, r3
 800766e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007670:	f7f8 fd48 	bl	8000104 <__udivsi3>
 8007674:	0003      	movs	r3, r0
 8007676:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	0013      	movs	r3, r2
 800767e:	005b      	lsls	r3, r3, #1
 8007680:	189b      	adds	r3, r3, r2
 8007682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007684:	429a      	cmp	r2, r3
 8007686:	d305      	bcc.n	8007694 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800768e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007690:	429a      	cmp	r2, r3
 8007692:	d906      	bls.n	80076a2 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8007694:	231a      	movs	r3, #26
 8007696:	2220      	movs	r2, #32
 8007698:	189b      	adds	r3, r3, r2
 800769a:	19db      	adds	r3, r3, r7
 800769c:	2201      	movs	r2, #1
 800769e:	701a      	strb	r2, [r3, #0]
 80076a0:	e044      	b.n	800772c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	2300      	movs	r3, #0
 80076a8:	61fb      	str	r3, [r7, #28]
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076ae:	4b96      	ldr	r3, [pc, #600]	; (8007908 <UART_SetConfig+0x6a8>)
 80076b0:	0052      	lsls	r2, r2, #1
 80076b2:	5ad3      	ldrh	r3, [r2, r3]
 80076b4:	613b      	str	r3, [r7, #16]
 80076b6:	2300      	movs	r3, #0
 80076b8:	617b      	str	r3, [r7, #20]
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	69b8      	ldr	r0, [r7, #24]
 80076c0:	69f9      	ldr	r1, [r7, #28]
 80076c2:	f7f8 ff0d 	bl	80004e0 <__aeabi_uldivmod>
 80076c6:	0002      	movs	r2, r0
 80076c8:	000b      	movs	r3, r1
 80076ca:	0e11      	lsrs	r1, r2, #24
 80076cc:	021d      	lsls	r5, r3, #8
 80076ce:	430d      	orrs	r5, r1
 80076d0:	0214      	lsls	r4, r2, #8
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	085b      	lsrs	r3, r3, #1
 80076d8:	60bb      	str	r3, [r7, #8]
 80076da:	2300      	movs	r3, #0
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	68b8      	ldr	r0, [r7, #8]
 80076e0:	68f9      	ldr	r1, [r7, #12]
 80076e2:	1900      	adds	r0, r0, r4
 80076e4:	4169      	adcs	r1, r5
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	2300      	movs	r3, #0
 80076ee:	607b      	str	r3, [r7, #4]
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f7f8 fef4 	bl	80004e0 <__aeabi_uldivmod>
 80076f8:	0002      	movs	r2, r0
 80076fa:	000b      	movs	r3, r1
 80076fc:	0013      	movs	r3, r2
 80076fe:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007702:	23c0      	movs	r3, #192	; 0xc0
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	429a      	cmp	r2, r3
 8007708:	d309      	bcc.n	800771e <UART_SetConfig+0x4be>
 800770a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800770c:	2380      	movs	r3, #128	; 0x80
 800770e:	035b      	lsls	r3, r3, #13
 8007710:	429a      	cmp	r2, r3
 8007712:	d204      	bcs.n	800771e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800771a:	60da      	str	r2, [r3, #12]
 800771c:	e006      	b.n	800772c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800771e:	231a      	movs	r3, #26
 8007720:	2220      	movs	r2, #32
 8007722:	189b      	adds	r3, r3, r2
 8007724:	19db      	adds	r3, r3, r7
 8007726:	2201      	movs	r2, #1
 8007728:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800772a:	e0d0      	b.n	80078ce <UART_SetConfig+0x66e>
 800772c:	e0cf      	b.n	80078ce <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	69da      	ldr	r2, [r3, #28]
 8007732:	2380      	movs	r3, #128	; 0x80
 8007734:	021b      	lsls	r3, r3, #8
 8007736:	429a      	cmp	r2, r3
 8007738:	d000      	beq.n	800773c <UART_SetConfig+0x4dc>
 800773a:	e070      	b.n	800781e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800773c:	231b      	movs	r3, #27
 800773e:	2220      	movs	r2, #32
 8007740:	189b      	adds	r3, r3, r2
 8007742:	19db      	adds	r3, r3, r7
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b08      	cmp	r3, #8
 8007748:	d015      	beq.n	8007776 <UART_SetConfig+0x516>
 800774a:	dc18      	bgt.n	800777e <UART_SetConfig+0x51e>
 800774c:	2b04      	cmp	r3, #4
 800774e:	d00d      	beq.n	800776c <UART_SetConfig+0x50c>
 8007750:	dc15      	bgt.n	800777e <UART_SetConfig+0x51e>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <UART_SetConfig+0x4fc>
 8007756:	2b02      	cmp	r3, #2
 8007758:	d005      	beq.n	8007766 <UART_SetConfig+0x506>
 800775a:	e010      	b.n	800777e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800775c:	f7ff fa34 	bl	8006bc8 <HAL_RCC_GetPCLK1Freq>
 8007760:	0003      	movs	r3, r0
 8007762:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007764:	e014      	b.n	8007790 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007766:	4b67      	ldr	r3, [pc, #412]	; (8007904 <UART_SetConfig+0x6a4>)
 8007768:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800776a:	e011      	b.n	8007790 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800776c:	f7ff f9a0 	bl	8006ab0 <HAL_RCC_GetSysClockFreq>
 8007770:	0003      	movs	r3, r0
 8007772:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007774:	e00c      	b.n	8007790 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007776:	2380      	movs	r3, #128	; 0x80
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800777c:	e008      	b.n	8007790 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007782:	231a      	movs	r3, #26
 8007784:	2220      	movs	r2, #32
 8007786:	189b      	adds	r3, r3, r2
 8007788:	19db      	adds	r3, r3, r7
 800778a:	2201      	movs	r2, #1
 800778c:	701a      	strb	r2, [r3, #0]
        break;
 800778e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007792:	2b00      	cmp	r3, #0
 8007794:	d100      	bne.n	8007798 <UART_SetConfig+0x538>
 8007796:	e09a      	b.n	80078ce <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800779c:	4b5a      	ldr	r3, [pc, #360]	; (8007908 <UART_SetConfig+0x6a8>)
 800779e:	0052      	lsls	r2, r2, #1
 80077a0:	5ad3      	ldrh	r3, [r2, r3]
 80077a2:	0019      	movs	r1, r3
 80077a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80077a6:	f7f8 fcad 	bl	8000104 <__udivsi3>
 80077aa:	0003      	movs	r3, r0
 80077ac:	005a      	lsls	r2, r3, #1
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	085b      	lsrs	r3, r3, #1
 80077b4:	18d2      	adds	r2, r2, r3
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	0019      	movs	r1, r3
 80077bc:	0010      	movs	r0, r2
 80077be:	f7f8 fca1 	bl	8000104 <__udivsi3>
 80077c2:	0003      	movs	r3, r0
 80077c4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c8:	2b0f      	cmp	r3, #15
 80077ca:	d921      	bls.n	8007810 <UART_SetConfig+0x5b0>
 80077cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ce:	2380      	movs	r3, #128	; 0x80
 80077d0:	025b      	lsls	r3, r3, #9
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d21c      	bcs.n	8007810 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	b29a      	uxth	r2, r3
 80077da:	200e      	movs	r0, #14
 80077dc:	2420      	movs	r4, #32
 80077de:	1903      	adds	r3, r0, r4
 80077e0:	19db      	adds	r3, r3, r7
 80077e2:	210f      	movs	r1, #15
 80077e4:	438a      	bics	r2, r1
 80077e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ea:	085b      	lsrs	r3, r3, #1
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2207      	movs	r2, #7
 80077f0:	4013      	ands	r3, r2
 80077f2:	b299      	uxth	r1, r3
 80077f4:	1903      	adds	r3, r0, r4
 80077f6:	19db      	adds	r3, r3, r7
 80077f8:	1902      	adds	r2, r0, r4
 80077fa:	19d2      	adds	r2, r2, r7
 80077fc:	8812      	ldrh	r2, [r2, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	1902      	adds	r2, r0, r4
 8007808:	19d2      	adds	r2, r2, r7
 800780a:	8812      	ldrh	r2, [r2, #0]
 800780c:	60da      	str	r2, [r3, #12]
 800780e:	e05e      	b.n	80078ce <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007810:	231a      	movs	r3, #26
 8007812:	2220      	movs	r2, #32
 8007814:	189b      	adds	r3, r3, r2
 8007816:	19db      	adds	r3, r3, r7
 8007818:	2201      	movs	r2, #1
 800781a:	701a      	strb	r2, [r3, #0]
 800781c:	e057      	b.n	80078ce <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800781e:	231b      	movs	r3, #27
 8007820:	2220      	movs	r2, #32
 8007822:	189b      	adds	r3, r3, r2
 8007824:	19db      	adds	r3, r3, r7
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b08      	cmp	r3, #8
 800782a:	d015      	beq.n	8007858 <UART_SetConfig+0x5f8>
 800782c:	dc18      	bgt.n	8007860 <UART_SetConfig+0x600>
 800782e:	2b04      	cmp	r3, #4
 8007830:	d00d      	beq.n	800784e <UART_SetConfig+0x5ee>
 8007832:	dc15      	bgt.n	8007860 <UART_SetConfig+0x600>
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <UART_SetConfig+0x5de>
 8007838:	2b02      	cmp	r3, #2
 800783a:	d005      	beq.n	8007848 <UART_SetConfig+0x5e8>
 800783c:	e010      	b.n	8007860 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800783e:	f7ff f9c3 	bl	8006bc8 <HAL_RCC_GetPCLK1Freq>
 8007842:	0003      	movs	r3, r0
 8007844:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007846:	e014      	b.n	8007872 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007848:	4b2e      	ldr	r3, [pc, #184]	; (8007904 <UART_SetConfig+0x6a4>)
 800784a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800784c:	e011      	b.n	8007872 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800784e:	f7ff f92f 	bl	8006ab0 <HAL_RCC_GetSysClockFreq>
 8007852:	0003      	movs	r3, r0
 8007854:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007856:	e00c      	b.n	8007872 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007858:	2380      	movs	r3, #128	; 0x80
 800785a:	021b      	lsls	r3, r3, #8
 800785c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800785e:	e008      	b.n	8007872 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007864:	231a      	movs	r3, #26
 8007866:	2220      	movs	r2, #32
 8007868:	189b      	adds	r3, r3, r2
 800786a:	19db      	adds	r3, r3, r7
 800786c:	2201      	movs	r2, #1
 800786e:	701a      	strb	r2, [r3, #0]
        break;
 8007870:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007874:	2b00      	cmp	r3, #0
 8007876:	d02a      	beq.n	80078ce <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800787c:	4b22      	ldr	r3, [pc, #136]	; (8007908 <UART_SetConfig+0x6a8>)
 800787e:	0052      	lsls	r2, r2, #1
 8007880:	5ad3      	ldrh	r3, [r2, r3]
 8007882:	0019      	movs	r1, r3
 8007884:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007886:	f7f8 fc3d 	bl	8000104 <__udivsi3>
 800788a:	0003      	movs	r3, r0
 800788c:	001a      	movs	r2, r3
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	085b      	lsrs	r3, r3, #1
 8007894:	18d2      	adds	r2, r2, r3
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	0019      	movs	r1, r3
 800789c:	0010      	movs	r0, r2
 800789e:	f7f8 fc31 	bl	8000104 <__udivsi3>
 80078a2:	0003      	movs	r3, r0
 80078a4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	2b0f      	cmp	r3, #15
 80078aa:	d90a      	bls.n	80078c2 <UART_SetConfig+0x662>
 80078ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ae:	2380      	movs	r3, #128	; 0x80
 80078b0:	025b      	lsls	r3, r3, #9
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d205      	bcs.n	80078c2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60da      	str	r2, [r3, #12]
 80078c0:	e005      	b.n	80078ce <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80078c2:	231a      	movs	r3, #26
 80078c4:	2220      	movs	r2, #32
 80078c6:	189b      	adds	r3, r3, r2
 80078c8:	19db      	adds	r3, r3, r7
 80078ca:	2201      	movs	r2, #1
 80078cc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	226a      	movs	r2, #106	; 0x6a
 80078d2:	2101      	movs	r1, #1
 80078d4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	2268      	movs	r2, #104	; 0x68
 80078da:	2101      	movs	r1, #1
 80078dc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	2200      	movs	r2, #0
 80078e2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	2200      	movs	r2, #0
 80078e8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80078ea:	231a      	movs	r3, #26
 80078ec:	2220      	movs	r2, #32
 80078ee:	189b      	adds	r3, r3, r2
 80078f0:	19db      	adds	r3, r3, r7
 80078f2:	781b      	ldrb	r3, [r3, #0]
}
 80078f4:	0018      	movs	r0, r3
 80078f6:	46bd      	mov	sp, r7
 80078f8:	b010      	add	sp, #64	; 0x40
 80078fa:	bdb0      	pop	{r4, r5, r7, pc}
 80078fc:	40008000 	.word	0x40008000
 8007900:	40008400 	.word	0x40008400
 8007904:	00f42400 	.word	0x00f42400
 8007908:	080081b8 	.word	0x080081b8

0800790c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007918:	2208      	movs	r2, #8
 800791a:	4013      	ands	r3, r2
 800791c:	d00b      	beq.n	8007936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	4a4a      	ldr	r2, [pc, #296]	; (8007a50 <UART_AdvFeatureConfig+0x144>)
 8007926:	4013      	ands	r3, r2
 8007928:	0019      	movs	r1, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793a:	2201      	movs	r2, #1
 800793c:	4013      	ands	r3, r2
 800793e:	d00b      	beq.n	8007958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	4a43      	ldr	r2, [pc, #268]	; (8007a54 <UART_AdvFeatureConfig+0x148>)
 8007948:	4013      	ands	r3, r2
 800794a:	0019      	movs	r1, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795c:	2202      	movs	r2, #2
 800795e:	4013      	ands	r3, r2
 8007960:	d00b      	beq.n	800797a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	4a3b      	ldr	r2, [pc, #236]	; (8007a58 <UART_AdvFeatureConfig+0x14c>)
 800796a:	4013      	ands	r3, r2
 800796c:	0019      	movs	r1, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797e:	2204      	movs	r2, #4
 8007980:	4013      	ands	r3, r2
 8007982:	d00b      	beq.n	800799c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	4a34      	ldr	r2, [pc, #208]	; (8007a5c <UART_AdvFeatureConfig+0x150>)
 800798c:	4013      	ands	r3, r2
 800798e:	0019      	movs	r1, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a0:	2210      	movs	r2, #16
 80079a2:	4013      	ands	r3, r2
 80079a4:	d00b      	beq.n	80079be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	4a2c      	ldr	r2, [pc, #176]	; (8007a60 <UART_AdvFeatureConfig+0x154>)
 80079ae:	4013      	ands	r3, r2
 80079b0:	0019      	movs	r1, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c2:	2220      	movs	r2, #32
 80079c4:	4013      	ands	r3, r2
 80079c6:	d00b      	beq.n	80079e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	4a25      	ldr	r2, [pc, #148]	; (8007a64 <UART_AdvFeatureConfig+0x158>)
 80079d0:	4013      	ands	r3, r2
 80079d2:	0019      	movs	r1, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e4:	2240      	movs	r2, #64	; 0x40
 80079e6:	4013      	ands	r3, r2
 80079e8:	d01d      	beq.n	8007a26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	4a1d      	ldr	r2, [pc, #116]	; (8007a68 <UART_AdvFeatureConfig+0x15c>)
 80079f2:	4013      	ands	r3, r2
 80079f4:	0019      	movs	r1, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a06:	2380      	movs	r3, #128	; 0x80
 8007a08:	035b      	lsls	r3, r3, #13
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d10b      	bne.n	8007a26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	4a15      	ldr	r2, [pc, #84]	; (8007a6c <UART_AdvFeatureConfig+0x160>)
 8007a16:	4013      	ands	r3, r2
 8007a18:	0019      	movs	r1, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2a:	2280      	movs	r2, #128	; 0x80
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	d00b      	beq.n	8007a48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	4a0e      	ldr	r2, [pc, #56]	; (8007a70 <UART_AdvFeatureConfig+0x164>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	0019      	movs	r1, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	605a      	str	r2, [r3, #4]
  }
}
 8007a48:	46c0      	nop			; (mov r8, r8)
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	b002      	add	sp, #8
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	ffff7fff 	.word	0xffff7fff
 8007a54:	fffdffff 	.word	0xfffdffff
 8007a58:	fffeffff 	.word	0xfffeffff
 8007a5c:	fffbffff 	.word	0xfffbffff
 8007a60:	ffffefff 	.word	0xffffefff
 8007a64:	ffffdfff 	.word	0xffffdfff
 8007a68:	ffefffff 	.word	0xffefffff
 8007a6c:	ff9fffff 	.word	0xff9fffff
 8007a70:	fff7ffff 	.word	0xfff7ffff

08007a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b092      	sub	sp, #72	; 0x48
 8007a78:	af02      	add	r7, sp, #8
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2290      	movs	r2, #144	; 0x90
 8007a80:	2100      	movs	r1, #0
 8007a82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a84:	f7fd f894 	bl	8004bb0 <HAL_GetTick>
 8007a88:	0003      	movs	r3, r0
 8007a8a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2208      	movs	r2, #8
 8007a94:	4013      	ands	r3, r2
 8007a96:	2b08      	cmp	r3, #8
 8007a98:	d12d      	bne.n	8007af6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a9c:	2280      	movs	r2, #128	; 0x80
 8007a9e:	0391      	lsls	r1, r2, #14
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	4a47      	ldr	r2, [pc, #284]	; (8007bc0 <UART_CheckIdleState+0x14c>)
 8007aa4:	9200      	str	r2, [sp, #0]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f000 f88e 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 8007aac:	1e03      	subs	r3, r0, #0
 8007aae:	d022      	beq.n	8007af6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ab4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ab8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aba:	2301      	movs	r3, #1
 8007abc:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac0:	f383 8810 	msr	PRIMASK, r3
}
 8007ac4:	46c0      	nop			; (mov r8, r8)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2180      	movs	r1, #128	; 0x80
 8007ad2:	438a      	bics	r2, r1
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	f383 8810 	msr	PRIMASK, r3
}
 8007ae0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2288      	movs	r2, #136	; 0x88
 8007ae6:	2120      	movs	r1, #32
 8007ae8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2284      	movs	r2, #132	; 0x84
 8007aee:	2100      	movs	r1, #0
 8007af0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e060      	b.n	8007bb8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2204      	movs	r2, #4
 8007afe:	4013      	ands	r3, r2
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d146      	bne.n	8007b92 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b06:	2280      	movs	r2, #128	; 0x80
 8007b08:	03d1      	lsls	r1, r2, #15
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	4a2c      	ldr	r2, [pc, #176]	; (8007bc0 <UART_CheckIdleState+0x14c>)
 8007b0e:	9200      	str	r2, [sp, #0]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f000 f859 	bl	8007bc8 <UART_WaitOnFlagUntilTimeout>
 8007b16:	1e03      	subs	r3, r0, #0
 8007b18:	d03b      	beq.n	8007b92 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b20:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b22:	637b      	str	r3, [r7, #52]	; 0x34
 8007b24:	2301      	movs	r3, #1
 8007b26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f383 8810 	msr	PRIMASK, r3
}
 8007b2e:	46c0      	nop			; (mov r8, r8)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4922      	ldr	r1, [pc, #136]	; (8007bc4 <UART_CheckIdleState+0x150>)
 8007b3c:	400a      	ands	r2, r1
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f383 8810 	msr	PRIMASK, r3
}
 8007b4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8007b50:	61bb      	str	r3, [r7, #24]
  return(result);
 8007b52:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b54:	633b      	str	r3, [r7, #48]	; 0x30
 8007b56:	2301      	movs	r3, #1
 8007b58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	f383 8810 	msr	PRIMASK, r3
}
 8007b60:	46c0      	nop			; (mov r8, r8)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2101      	movs	r1, #1
 8007b6e:	438a      	bics	r2, r1
 8007b70:	609a      	str	r2, [r3, #8]
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	f383 8810 	msr	PRIMASK, r3
}
 8007b7c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	228c      	movs	r2, #140	; 0x8c
 8007b82:	2120      	movs	r1, #32
 8007b84:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2284      	movs	r2, #132	; 0x84
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e012      	b.n	8007bb8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2288      	movs	r2, #136	; 0x88
 8007b96:	2120      	movs	r1, #32
 8007b98:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	228c      	movs	r2, #140	; 0x8c
 8007b9e:	2120      	movs	r1, #32
 8007ba0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2284      	movs	r2, #132	; 0x84
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	0018      	movs	r0, r3
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b010      	add	sp, #64	; 0x40
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	01ffffff 	.word	0x01ffffff
 8007bc4:	fffffedf 	.word	0xfffffedf

08007bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	1dfb      	adds	r3, r7, #7
 8007bd6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bd8:	e051      	b.n	8007c7e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	d04e      	beq.n	8007c7e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007be0:	f7fc ffe6 	bl	8004bb0 <HAL_GetTick>
 8007be4:	0002      	movs	r2, r0
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d302      	bcc.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e051      	b.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2204      	movs	r2, #4
 8007c02:	4013      	ands	r3, r2
 8007c04:	d03b      	beq.n	8007c7e <UART_WaitOnFlagUntilTimeout+0xb6>
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b80      	cmp	r3, #128	; 0x80
 8007c0a:	d038      	beq.n	8007c7e <UART_WaitOnFlagUntilTimeout+0xb6>
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2b40      	cmp	r3, #64	; 0x40
 8007c10:	d035      	beq.n	8007c7e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	2208      	movs	r2, #8
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d111      	bne.n	8007c44 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2208      	movs	r2, #8
 8007c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	0018      	movs	r0, r3
 8007c2c:	f000 f83c 	bl	8007ca8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2290      	movs	r2, #144	; 0x90
 8007c34:	2108      	movs	r1, #8
 8007c36:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2284      	movs	r2, #132	; 0x84
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e02c      	b.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69da      	ldr	r2, [r3, #28]
 8007c4a:	2380      	movs	r3, #128	; 0x80
 8007c4c:	011b      	lsls	r3, r3, #4
 8007c4e:	401a      	ands	r2, r3
 8007c50:	2380      	movs	r3, #128	; 0x80
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d112      	bne.n	8007c7e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2280      	movs	r2, #128	; 0x80
 8007c5e:	0112      	lsls	r2, r2, #4
 8007c60:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	0018      	movs	r0, r3
 8007c66:	f000 f81f 	bl	8007ca8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2290      	movs	r2, #144	; 0x90
 8007c6e:	2120      	movs	r1, #32
 8007c70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2284      	movs	r2, #132	; 0x84
 8007c76:	2100      	movs	r1, #0
 8007c78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e00f      	b.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	4013      	ands	r3, r2
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	425a      	negs	r2, r3
 8007c8e:	4153      	adcs	r3, r2
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	001a      	movs	r2, r3
 8007c94:	1dfb      	adds	r3, r7, #7
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d09e      	beq.n	8007bda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	0018      	movs	r0, r3
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	b004      	add	sp, #16
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08e      	sub	sp, #56	; 0x38
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8007cb4:	617b      	str	r3, [r7, #20]
  return(result);
 8007cb6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007cba:	2301      	movs	r3, #1
 8007cbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	f383 8810 	msr	PRIMASK, r3
}
 8007cc4:	46c0      	nop			; (mov r8, r8)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4926      	ldr	r1, [pc, #152]	; (8007d6c <UART_EndRxTransfer+0xc4>)
 8007cd2:	400a      	ands	r2, r1
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	f383 8810 	msr	PRIMASK, r3
}
 8007ce0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ce6:	623b      	str	r3, [r7, #32]
  return(result);
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cea:	633b      	str	r3, [r7, #48]	; 0x30
 8007cec:	2301      	movs	r3, #1
 8007cee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	f383 8810 	msr	PRIMASK, r3
}
 8007cf6:	46c0      	nop			; (mov r8, r8)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689a      	ldr	r2, [r3, #8]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	491b      	ldr	r1, [pc, #108]	; (8007d70 <UART_EndRxTransfer+0xc8>)
 8007d04:	400a      	ands	r2, r1
 8007d06:	609a      	str	r2, [r3, #8]
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0e:	f383 8810 	msr	PRIMASK, r3
}
 8007d12:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d118      	bne.n	8007d4e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8007d20:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d22:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d26:	2301      	movs	r3, #1
 8007d28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f383 8810 	msr	PRIMASK, r3
}
 8007d30:	46c0      	nop			; (mov r8, r8)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2110      	movs	r1, #16
 8007d3e:	438a      	bics	r2, r1
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f383 8810 	msr	PRIMASK, r3
}
 8007d4c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	228c      	movs	r2, #140	; 0x8c
 8007d52:	2120      	movs	r1, #32
 8007d54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007d62:	46c0      	nop			; (mov r8, r8)
 8007d64:	46bd      	mov	sp, r7
 8007d66:	b00e      	add	sp, #56	; 0x38
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	46c0      	nop			; (mov r8, r8)
 8007d6c:	fffffedf 	.word	0xfffffedf
 8007d70:	effffffe 	.word	0xeffffffe

08007d74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2284      	movs	r2, #132	; 0x84
 8007d80:	5c9b      	ldrb	r3, [r3, r2]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d101      	bne.n	8007d8a <HAL_UARTEx_DisableFifoMode+0x16>
 8007d86:	2302      	movs	r3, #2
 8007d88:	e027      	b.n	8007dda <HAL_UARTEx_DisableFifoMode+0x66>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2284      	movs	r2, #132	; 0x84
 8007d8e:	2101      	movs	r1, #1
 8007d90:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2288      	movs	r2, #136	; 0x88
 8007d96:	2124      	movs	r1, #36	; 0x24
 8007d98:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2101      	movs	r1, #1
 8007dae:	438a      	bics	r2, r1
 8007db0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4a0b      	ldr	r2, [pc, #44]	; (8007de4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007db6:	4013      	ands	r3, r2
 8007db8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2288      	movs	r2, #136	; 0x88
 8007dcc:	2120      	movs	r1, #32
 8007dce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2284      	movs	r2, #132	; 0x84
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	0018      	movs	r0, r3
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	b004      	add	sp, #16
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	46c0      	nop			; (mov r8, r8)
 8007de4:	dfffffff 	.word	0xdfffffff

08007de8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2284      	movs	r2, #132	; 0x84
 8007df6:	5c9b      	ldrb	r3, [r3, r2]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d101      	bne.n	8007e00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e02e      	b.n	8007e5e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2284      	movs	r2, #132	; 0x84
 8007e04:	2101      	movs	r1, #1
 8007e06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2288      	movs	r2, #136	; 0x88
 8007e0c:	2124      	movs	r1, #36	; 0x24
 8007e0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2101      	movs	r1, #1
 8007e24:	438a      	bics	r2, r1
 8007e26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	08d9      	lsrs	r1, r3, #3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	430a      	orrs	r2, r1
 8007e3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	0018      	movs	r0, r3
 8007e40:	f000 f854 	bl	8007eec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2288      	movs	r2, #136	; 0x88
 8007e50:	2120      	movs	r1, #32
 8007e52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2284      	movs	r2, #132	; 0x84
 8007e58:	2100      	movs	r1, #0
 8007e5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	0018      	movs	r0, r3
 8007e60:	46bd      	mov	sp, r7
 8007e62:	b004      	add	sp, #16
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2284      	movs	r2, #132	; 0x84
 8007e76:	5c9b      	ldrb	r3, [r3, r2]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d101      	bne.n	8007e80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	e02f      	b.n	8007ee0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2284      	movs	r2, #132	; 0x84
 8007e84:	2101      	movs	r1, #1
 8007e86:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2288      	movs	r2, #136	; 0x88
 8007e8c:	2124      	movs	r1, #36	; 0x24
 8007e8e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	438a      	bics	r2, r1
 8007ea6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	4a0e      	ldr	r2, [pc, #56]	; (8007ee8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	0019      	movs	r1, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	0018      	movs	r0, r3
 8007ec2:	f000 f813 	bl	8007eec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2288      	movs	r2, #136	; 0x88
 8007ed2:	2120      	movs	r1, #32
 8007ed4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2284      	movs	r2, #132	; 0x84
 8007eda:	2100      	movs	r1, #0
 8007edc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	b004      	add	sp, #16
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	f1ffffff 	.word	0xf1ffffff

08007eec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d108      	bne.n	8007f0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	226a      	movs	r2, #106	; 0x6a
 8007f00:	2101      	movs	r1, #1
 8007f02:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2268      	movs	r2, #104	; 0x68
 8007f08:	2101      	movs	r1, #1
 8007f0a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f0c:	e043      	b.n	8007f96 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f0e:	260f      	movs	r6, #15
 8007f10:	19bb      	adds	r3, r7, r6
 8007f12:	2208      	movs	r2, #8
 8007f14:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f16:	200e      	movs	r0, #14
 8007f18:	183b      	adds	r3, r7, r0
 8007f1a:	2208      	movs	r2, #8
 8007f1c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	0e5b      	lsrs	r3, r3, #25
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	240d      	movs	r4, #13
 8007f2a:	193b      	adds	r3, r7, r4
 8007f2c:	2107      	movs	r1, #7
 8007f2e:	400a      	ands	r2, r1
 8007f30:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	0f5b      	lsrs	r3, r3, #29
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	250c      	movs	r5, #12
 8007f3e:	197b      	adds	r3, r7, r5
 8007f40:	2107      	movs	r1, #7
 8007f42:	400a      	ands	r2, r1
 8007f44:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f46:	183b      	adds	r3, r7, r0
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	197a      	adds	r2, r7, r5
 8007f4c:	7812      	ldrb	r2, [r2, #0]
 8007f4e:	4914      	ldr	r1, [pc, #80]	; (8007fa0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007f50:	5c8a      	ldrb	r2, [r1, r2]
 8007f52:	435a      	muls	r2, r3
 8007f54:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f56:	197b      	adds	r3, r7, r5
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	4a12      	ldr	r2, [pc, #72]	; (8007fa4 <UARTEx_SetNbDataToProcess+0xb8>)
 8007f5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f5e:	0019      	movs	r1, r3
 8007f60:	f7f8 f95a 	bl	8000218 <__divsi3>
 8007f64:	0003      	movs	r3, r0
 8007f66:	b299      	uxth	r1, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	226a      	movs	r2, #106	; 0x6a
 8007f6c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f6e:	19bb      	adds	r3, r7, r6
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	193a      	adds	r2, r7, r4
 8007f74:	7812      	ldrb	r2, [r2, #0]
 8007f76:	490a      	ldr	r1, [pc, #40]	; (8007fa0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007f78:	5c8a      	ldrb	r2, [r1, r2]
 8007f7a:	435a      	muls	r2, r3
 8007f7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f7e:	193b      	adds	r3, r7, r4
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	4a08      	ldr	r2, [pc, #32]	; (8007fa4 <UARTEx_SetNbDataToProcess+0xb8>)
 8007f84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f86:	0019      	movs	r1, r3
 8007f88:	f7f8 f946 	bl	8000218 <__divsi3>
 8007f8c:	0003      	movs	r3, r0
 8007f8e:	b299      	uxth	r1, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2268      	movs	r2, #104	; 0x68
 8007f94:	5299      	strh	r1, [r3, r2]
}
 8007f96:	46c0      	nop			; (mov r8, r8)
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	b005      	add	sp, #20
 8007f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f9e:	46c0      	nop			; (mov r8, r8)
 8007fa0:	080081d0 	.word	0x080081d0
 8007fa4:	080081d8 	.word	0x080081d8

08007fa8 <__libc_init_array>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	2600      	movs	r6, #0
 8007fac:	4d0c      	ldr	r5, [pc, #48]	; (8007fe0 <__libc_init_array+0x38>)
 8007fae:	4c0d      	ldr	r4, [pc, #52]	; (8007fe4 <__libc_init_array+0x3c>)
 8007fb0:	1b64      	subs	r4, r4, r5
 8007fb2:	10a4      	asrs	r4, r4, #2
 8007fb4:	42a6      	cmp	r6, r4
 8007fb6:	d109      	bne.n	8007fcc <__libc_init_array+0x24>
 8007fb8:	2600      	movs	r6, #0
 8007fba:	f000 f821 	bl	8008000 <_init>
 8007fbe:	4d0a      	ldr	r5, [pc, #40]	; (8007fe8 <__libc_init_array+0x40>)
 8007fc0:	4c0a      	ldr	r4, [pc, #40]	; (8007fec <__libc_init_array+0x44>)
 8007fc2:	1b64      	subs	r4, r4, r5
 8007fc4:	10a4      	asrs	r4, r4, #2
 8007fc6:	42a6      	cmp	r6, r4
 8007fc8:	d105      	bne.n	8007fd6 <__libc_init_array+0x2e>
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	00b3      	lsls	r3, r6, #2
 8007fce:	58eb      	ldr	r3, [r5, r3]
 8007fd0:	4798      	blx	r3
 8007fd2:	3601      	adds	r6, #1
 8007fd4:	e7ee      	b.n	8007fb4 <__libc_init_array+0xc>
 8007fd6:	00b3      	lsls	r3, r6, #2
 8007fd8:	58eb      	ldr	r3, [r5, r3]
 8007fda:	4798      	blx	r3
 8007fdc:	3601      	adds	r6, #1
 8007fde:	e7f2      	b.n	8007fc6 <__libc_init_array+0x1e>
 8007fe0:	080081e8 	.word	0x080081e8
 8007fe4:	080081e8 	.word	0x080081e8
 8007fe8:	080081e8 	.word	0x080081e8
 8007fec:	080081ec 	.word	0x080081ec

08007ff0 <memset>:
 8007ff0:	0003      	movs	r3, r0
 8007ff2:	1882      	adds	r2, r0, r2
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d100      	bne.n	8007ffa <memset+0xa>
 8007ff8:	4770      	bx	lr
 8007ffa:	7019      	strb	r1, [r3, #0]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	e7f9      	b.n	8007ff4 <memset+0x4>

08008000 <_init>:
 8008000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008002:	46c0      	nop			; (mov r8, r8)
 8008004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008006:	bc08      	pop	{r3}
 8008008:	469e      	mov	lr, r3
 800800a:	4770      	bx	lr

0800800c <_fini>:
 800800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800e:	46c0      	nop			; (mov r8, r8)
 8008010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008012:	bc08      	pop	{r3}
 8008014:	469e      	mov	lr, r3
 8008016:	4770      	bx	lr
